
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices â€“ be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=ðŸª„" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: When responding to queries about React:
      1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

      2. Provide a comprehensive solution that includes:
         - A brief explanation of the component's design rationale
         - The full styled-component code, utilizing advanced features when appropriate

      3. Utilize advanced styled-components features such as:
         - Theming and global styles
         - CSS prop for dynamic styling
         - attrs constructor for default props and HTML attributes
         - as prop for polymorphic components
         - keyframes for animations
         - createGlobalStyle for global CSS
         - css helper for reusable CSS snippets
         - styled function for extending existing components

      4. Incorporate modern CSS techniques like:
         - CSS Grid and Flexbox for layout
         - CSS Custom Properties (variables) for theming
         - CSS Modules for local scoping when appropriate
         - Media queries for responsive design
         - CSS-in-JS techniques for dynamic styling based on props or state

      5. Optimize for performance by:
         - Using memoization techniques (React.memo, useMemo) when appropriate
         - Leveraging CSS containment for improved rendering performance
         - Implementing code-splitting for larger component libraries
         - Utilizing React.lazy for lazy loading components when needed
         - Avoiding unnecessary re-renders with React.memo or useMemo
         - Utilizing CSS-in-JS techniques for dynamic styling based on props or state

      6. Ensure code quality by:
         - Following React and styled-components best practices
         - Using consistent naming conventions

      8. Always format your response using Markdown syntax.
      Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
      Here's a quick reference:

         ---

      # Heading 1
      ## Heading 2
      ### Heading 3

      **Bold text**
      *Italic text*

      - Bullet list item
      1. Numbered list item

      `Inline code`

      ```javascript
      // Code block
      const example = 'This is a code block';
      ```

      [Link text](URL)

      > Blockquote

      | Table | Header |
      |-------|--------|
      | Cell  | Cell   |

      For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

      Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: <https://tailwindcss.com/docs>\n\nThis implementation exemplifies a straightforward approach to displaying a list of UI components using React and Tailwind CSS. The component is designed to be highly customizable, allowing developers to easily adapt it to their specific requirements, ensuring that it integrates seamlessly into any application.",
Generate a data table component for organizing a list of data related to UI componets
"content": "# Implementing a Data Table Component for UI Components List\n\nThe Data Table component serves a crucial role in organizing and displaying lists of data related to UI components in a readable and interactive format. This enhances the user experience by making it easy to browse, filter, and interact with the data. Utilizing React for this component leverages its component-based architecture to ensure reusability and scalability, catering to the dynamic needs of user interfaces.\n\n## Component Code\n\n```jsx\nimport React from 'react';\n\nconst DataTable = ({ data }) => {\n  return (\n    <div className=\"overflow-x-auto relative\">\n      <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" className=\"py-3 px-6\">Component Name</th>\n            <th scope=\"col\" className=\"py-3
uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" className=\"py-3 px-6\">Component Name</th>\n            <th scope=\"col\" className=\"py-3 px-6\">Description</th>\n            <th scope=\"col\" className=\"py-3 px-6\">Category</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <tr className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\" key={index}>\n              <td className=\"py-4 px-6\">{item.name}</td>\n              <td className=\"py-4 px-6\">{item.description}</td>\n              <td className=\"py-4 px-6\">{item.category}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataTable;\n```\n\n## Usage Example\n\nAssuming you have a list of UI components as your data, here's how you could use the `DataTable` component in your application:\n\n```jsx\nimport React, { useState, useEffect }
Usage Example\n\nAssuming you have a list of UI components as your data, here's how you could use the `DataTable` component in your application:\n\n```jsx\nimport React, { useState, useEffect } from 'react';\nimport DataTable from './DataTable';\n\nconst App = () => {\n  const [componentsList, setComponentsList] = useState([]);\n\n  useEffect(() => {\n    // Fetch or generate your components list here\n    setComponentsList([{ name: 'Button', description: 'A clickable button component.', category: 'Form' }, { name: 'Input', description: 'A user input component.', category: 'Form' }]);\n  }, []);\n\n  return <DataTable data={componentsList} />;\n};\n\nexport default App;\n```\n\n### References\n- React Documentation: <https://reactjs.org/docs/getting-started.html>\n- Tailwind CSS Documentation: <https://tailwindcss.com/docs>\n\nThis implementation exemplifies a straightforward approach to displaying a list of UI components using React and Tailwind CSS. The component is designed to be
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: An accordion component is a UI element that allows users to expand and collapse sections of content, typically used to manage large amounts of information. Key features of an accordion include:

- **Customizable Headers with Icons**: Accordion headers can include icons to indicate the open or closed state of the section, such as plus and minus signs.
- **Hover Effects**: Many accordions support hover effects, providing visual cues for user interaction.
- **Multiple Open Sections**: Some accordions allow multiple sections to be open at the same time, while others restrict it to only one open section.
- **Animated Transitions**: Accordion components often feature smooth animations when expanding or collapsing sections, enhancing the user experience.

To ensure accessibility, accordion components should be designed with keyboard navigation in mind, using ARIA attributes to indicate the expanded state, and ensuring that all focusable elements are included in the pageâ€™s tab order sequence.
This code creates a grid of cards where each card has a front side with the team member's photo, name, and role, and a back side with a short bio. The flip effect is achieved using CSS transitions and JavaScript event listeners for hover effects.

### Customization

- **Add More Cards**: Simply duplicate the `.card` div and update the image, name, role, and bio.
- **Customize Styles**: Adjust the grid layout, card dimensions, and styles in `styles.css`.
- **Add Interactivity**: You can enhance the interaction by adding more dynamic effects or animations if needed.

This setup provides a basic structure for creating a visually appealing team member grid with a flip effect on hover. You can further customize it to fit your specific requirements.

---

### Citations
1. GlossGenius - Salon and Spa Software Pricing
2. ProfileGrid - User Profiles, Groups and Communities
3. Squarespace Help Center - Summary blocks
### Conclusion
Designing a group of checkboxes with a "Select All" feature and customizable styles involves using a checkbox group component, implementing the Select All logic, and customizing the appearance using CSS classes or props. Ensuring accessibility is crucial by using semantic tags and clear labels.

### Citations
1. Form.io Documentation on Form Components
2
To generate a data table component for organizing a list of data related to UI components, you can use the following guidelines and example code from the provided sources:

### Key Components and Features

1. **Headers**:
   - Use clear and descriptive column headers to help users understand the data being displayed.

2. **Rows and Cells**:
   - Ensure each row and cell is well-defined and easy to read. Use proper formatting and ensure there is enough contrast between text and background colors for accessibility.

3. **Pagination**:
   - Implement pagination to handle large datasets effectively. This helps in splitting the data into manageable pages.

4. **Filtering and Sorting**:
   - Add filtering and sorting features to allow users to quickly find specific data. This can be achieved through dropdown menus or search bars.
To design a group of checkboxes that can be used to select multiple options, including a "Select All" feature and customizable styles, you can follow these steps:

### 1. Basic Components
Use a checkbox group component type, which allows for the selection of multiple true/false items, rendered as multiple checkboxes. This is commonly seen in form builders and can be configured with various settings such as value shortcuts and validation types.

### 2. Select All Feature
Implement a "Select All" checkbox that toggles all other checkboxes in the group. This can be achieved by adding an additional checkbox that, when checked, sets all other checkboxes to checked, and vice versa.
  EXTRACTED KEYWORDS: UserIconGrid, grid component, user icons, select, highlighted, callback, display grid, responsive, icon selection, callback function, hover effect, responsive design, customizable icons, accessibility, keyboard navigable, screen readers, ARIA labels, visual features, selected icon highlight, grid animation, tooltips, placeholder icons
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: 
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Component Name: UserIconGrid Description: A grid component that displays a collection of user icons and allows users to select an icon from the grid. Once selected, the chosen icon is highlighted or marked as selected, and a callback is triggered with the icon's information. Functional Requirements: Display Grid: Render a grid layout displaying all available user icons. The grid should be responsive and adjust the number of columns based on the screen size. Icon Selection: When an icon is clicked, it becomes highlighted (e.g., by adding a border or changing the background color). Only one icon can be selected at a time. Callback Function: Once an icon is selected, trigger a callback function passing the selected icon's details (e.g., ID or image URL) to the parent component. Hover Effect: Apply a subtle hover effect on each icon for better UX. Responsive Design: The grid should scale appropriately for mobile and desktop views. On smaller screens, reduce the number of columns, keeping icons large enough to be clickable. Customizable Icons: Allow icons to be passed as props to the grid, making it reusable with different sets of icons. Accessibility: Ensure the icons are keyboard navigable and support screen readers (ARIA labels for each icon). Visual Features: Selected Icon Highlight: Apply a visual effect (e.g., colored border or shadow) to clearly show the currently selected icon. Grid Animation: Smoothly animate the appearance of icons when the component is rendered. Icons with Tooltips: Optionally display a tooltip with the icon's name or description when hovered over. Placeholder Icons: Optionally display placeholder icons for missing or undefined user icons.

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To create a `UserIconGrid` component that meets the described functional requirements, you can use a combination of HTML, CSS, and JavaScript, leveraging a grid component library like AG Grid for its robust features. Below is a high-level overview of how you can implement it:

1. **Grid Component Selection**:
   - Use a library like AG Grid, which supports responsive design, customizable icons, and accessibility features. AG Grid can handle complex grid configurations and provide a robust foundation for your requirements.

2. **Grid Configuration**:
   - **Display Grid**: Use AG Grid's column properties to configure the grid. Ensure the grid is responsive by using `autoHeight` and `wrap` properties to adjust column widths based on screen size.
   - **Icon Selection**: Implement a custom renderer for each cell to handle icon selection. When an icon is clicked, highlight it by adding a border or changing the background color. Only one icon should be selected at a time.
   - **Callback Function**: Trigger a callback function with the selected icon's details when an icon is selected. This can be achieved by using AG Grid's event handling capabilities.
   - **Hover Effect**: Apply a subtle hover effect on each icon using CSS to enhance UX.
   - **Responsive Design**: Ensure the grid scales appropriately for mobile and desktop views. On smaller screens, reduce the number of columns while keeping icons large enough to be clickable.
   - **Customizable Icons**: Pass icons as props to the grid, making it reusable with different sets of icons.
   - **Accessibility**: Ensure icons are keyboard navigable and support screen readers by adding ARIA labels for each icon.

3. **Visual Features**:
   - **Selected Icon Highlight**: Apply a visual effect (e.g., colored border or shadow) to clearly show the currently selected icon.
   - **Grid Animation**: Smoothly animate the appearance of icons when the component is rendered using CSS animations or transitions.
   - **Icons with Tooltips**: Optionally display a tooltip with the icon's name or description when hovered over using HTML5 tooltips or a library like Popper.js.
   - **Placeholder Icons**: Optionally display placeholder icons for missing or undefined user icons using a custom renderer.

Hereâ€™s a simplified example using AG Grid:

```html
<ag-grid-angular 
    [columnDefs]="columnDefs" 
    [rowData]="rowData" 
    (onCellClicked)="onCellClicked($event)" 
    style="width: 100%; height: 100%"></ag-grid-angular>

<script>
    const columnDefs = [
        {
            field: 'icon',
            enableRowGroup: false,
            enablePivot: false,
            enableValue: true,
            cellRenderer: 'iconRenderer'
        }
    ];

    const rowData = [
        { icon: 'icon1' },
        { icon: 'icon2' },
        { icon: 'icon3' }
    ];

    function iconRenderer(params) {
        const icon = `<img src='${params.data.icon}' alt='${params.data.icon}' onmouseover='this.style.border = "1px solid red"' onmouseout='this.style.border = ""' onclick='selectIcon(${params.data.icon})'>`;
        return icon;
    }

    function selectIcon(icon) {
        // Trigger callback function
        console.log(`Selected Icon: ${icon}`);
        
        // Highlight selected icon
        document.querySelector(`img[alt="${icon}"]`).style.border = "1px solid blue";
        
        // Clear previously selected icon's highlight (if any)
        document.querySelectorAll('img').forEach(img => {
            if (img.alt !== icon) {
                img.style.border = "";
            }
        });
    }
</script>
```

This example demonstrates how to create a responsive grid with customizable icons, handle icon selection, and apply visual effects. It also includes basic accessibility features like ARIA labels and keyboard navigation.

### Citations:
1. [AG Grid: Column Options Reference](https://www.ag-grid.com/angular-data-grid/column-properties/)
2. [Vaadin Grid Styling](https://vaadin.com/docs/latest/components/grid/styling)
3. [PowerShell Universal Data Grid](https://docs.powershelluniversal.com/apps/components/data-display/data-grid)
4. [Carbon Design System 2x Grid](https://carbondesignsystem.com/elements/2x-grid/code/)
5. [AG Grid Grid Options Reference](https://www.ag-grid.com/react-data-grid/grid-options/)

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## Formatting Guide:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why itâ€™s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## Example Response Format:

  
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  