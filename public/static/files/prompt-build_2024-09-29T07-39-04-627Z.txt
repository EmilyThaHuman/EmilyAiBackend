
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
   import React from 'react';
   import PropTypes from 'prop-types';
   import styles from './MyComponent.module.css';
   import { useMyHook } from '../hooks/myHook';
   import { MyContext } from '../context/myContext';
   import MyIcon from '../icons/MyIcon';

   const MyComponent = ({ prop1, prop2 }) => {
     const { state, dispatch } = useMyHook();
     const { data } = useContext(MyContext);

     return (
       <div className={styles.myComponent}>
         <MyIcon />
         <h1>{data.title}</h1>
         <p>{data.description}</p>
         {/* Render additional components or content based on props and state */}
       </div>
     );
   };
   MyComponent.propTypes = {
     prop1: PropTypes.string.isRequired,
     prop2: PropTypes.number,
   };

   export default MyComponent;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a file system sidebar component for managing code files saved from chat bot responses. it Should be able to create and retreive files from local storage
Generate a file system sidebar component for managing code files saved from chat bot responses
Generate a file system component for saving code files saved from chat bot responses
"content": "# File System Component for Chat Bot Responses\n\n## Component Explanation\nThis component is designed to handle the saving of code files generated from chat bot responses. It utilizes React for the frontend and integrates with a Node.js backend for file management. The component allows users to save, retrieve, and manage code files directly from the chat interface, enhancing the user experience by providing a seamless way to manage code snippets or files generated during chat sessions.\n\n## Code\n```jsx\nimport React, { useState } from 'react';\n\nconst FileSystemComponent = ({ onSave }) => {\n  const [codeContent, setCodeContent] = useState('');\n\n  const handleSaveFile = () => {\n    onSave(codeContent);\n    setCodeContent(''); // Reset content after saving\n  };\n\n  return (\n    <div>\n      <textarea\n        value={codeContent}\n        onChange={(e) => setCodeContent(e.target.value)}\n        placeholder=\"Paste your code here...\"\n      />\n      <button
"content": "# File System Sidebar Component for Managing Code Files from Chat Bot Responses\n\n## Component Explanation\nThis component serves as a sidebar for managing code files generated from chat bot responses. It's designed with React and TailwindCSS for a modern, responsive UI. The sidebar includes features such as file listing, search functionality, and dark mode support. The design rationale focuses on providing a user-friendly interface for developers to organize and access their code files efficiently.\n\n## Code\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nconst FileSystemSidebar = () => {\n  const [files, setFiles] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    // Fetch files from the backend or local storage\n    setFiles(['example.js', 'snippet.txt']);\n  }, []);\n\n  return (\n    <div className=\"bg-gray-800 text-white h-full p-4\">\n      <input\n        type=\"text\"\n        placeholder=\"Search
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages describe various UI components for web development, detailing their features and functionalities. These components include a user icon grid, social share buttons, a scroll-to-top button, a swipeable image carousel, and a floating action button with a menu. Each component is designed with specific user interactions, aesthetics, and responsive design considerations in mind. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 66f2a37e35bcd53f3a82189a1]: Describes a 'UserIconGrid' component for displaying user icons in a grid, with features like responsive design, icon selection, and accessibility considerations.
[Summary 2][id 66f2985235bcd53f3a8218921]: Proposes the creation of social share buttons with icons for Facebook, Twitter, LinkedIn, and Instagram, featuring hover effects.
[Summary 3][id 66f2947926dd62477c0ae8e91]: Outlines a 'Scroll-To-Top Button' that appears after scrolling and provides a smooth scroll back to the top of the page.
[Summary 4][id 66f2909926dd62477c0ae8e11]: Describes a 'Swipeable Image Carousel' with swipe navigation, slide indicators, and optional auto-scroll functionality.
[Summary 5][id 66f282b0d89f58569b8923251]: Introduces a 'Floating Action Button (FAB) with Menu', featuring a popup action menu and customizable icons and actions. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: ### Example Implementation

#### Chat Sidebar Design
```html
<div class="chat-sidebar">
  <div class="sidebar-header">
    <h2>File Directory</h2>
    <button class="toggle-sidebar">Toggle Sidebar</button>
  </div>
  
  <div class="sidebar-content">
    <div class="search-bar">
      <input type="search" placeholder="Search files and folders">
    </div>
    
    <div class="folder-tree">
      <!-- Folders will be dynamically generated here -->
    </div>
    
    <div class="toolbar">
      <!-- Toolbar controls will be dynamically generated here -->
    </div>
    
    <div class="right-click-menu" style="display:none;">
      <!-- Right-click menu options will be dynamically generated here -->
    </div>
  </div>
</div>
```
To generate a chat sidebar with a file directory management component, including various search, filter, and organize functions, and a dark theme, you can integrate the following features:

### File Directory Management Component

1. **File Organization**:
   - **Drag and Drop**: Allow users to drag and drop files into folders or between folders for easy organization.
   - **Folder Creation**: Enable users to create new folders with descriptive names, similar to Microsoft Teams' folder creation process.

2. **Search and Filter**:
   - **Search Bar**: Include a search bar that allows users to search for files and folders by name, similar to FileBird's powerful search feature.
   - **Filter Options**: Provide filter options such as sorting by date, author, and file size to help users quickly locate specific files.
To generate a Retrieval Augmented Generation (RAG) chat sidebar with file directory management, including various search, filter, and organize functions, and a dark theme, you can integrate the following components:

1. **File Directory Management**:
   - **Component**: A file upload and management system that allows users to upload various types of files (documents, images, audio, video) and organize them in a directory structure.
   - **Implementation**: Use a library like Snowflake Cortex Search to manage and index files. Create a stage with a directory table to upload documents and manage them.

2. **Search Functionality**:
   - **Component**: Implement a search bar that allows users to query specific documents based on keywords.
   - **Implementation**: Use Snowflake's search capabilities to index documents and enable users to query them. For example, create a table to store relative paths and chunked text, and use Snowflake's query capabilities to retrieve relevant documents.
To generate a sidebar with a file directory management component in a dark theme, you can use the following steps and components:

1. **Theme Configuration**:
   - Use a dark theme for the overall application. This can be achieved by setting the theme color scheme to dark mode in the application settings, as shown in.

2. **Sidebar Customization**:
   - For Obsidian, you can use CSS snippets to customize the sidebar. For example, the `Hide Ribbon` and `Native Scrollbar styles` snippets can help in maintaining a clean and dark appearance for the sidebar.

3. **File Directory Management Component**:
   - If you're using Obsidian, you can enable plugins like `dataview` or `omnisearch` which provide functionalities for managing files and directories within the sidebar.
   - For a more customized approach, you can use the `Meta Bind (Compact)` snippet to make inline controls more compact, which might be useful for managing directories within the sidebar.
To create a chat sidebar with a file directory management component in a dark theme, you would need to integrate a file management system into Microsoft Teams. Here’s a step-by-step guide to achieve this:

1. **Configure Microsoft Teams Chat in Dynamics 365 Customer Service**:
   - Add the Teams collaboration and chat settings page to the sitemap of your app in Dynamics 365 Customer Service.
   - Ensure the chat functionality is properly set up for connected chats and record types.

2. **Use a Custom File Manager Component**:
   - Utilize a custom file manager component like the DevExtreme React FileManager, which allows for hierarchical file system management and customization.
   - Integrate this component into your chat sidebar to manage files.

3. **Implement Dark Theme**:
   - Customize the file manager component to support a dark theme. For example, you can change the color scheme of the file manager to a dark theme by adjusting the styles and themes of the component.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a file system sidebar component for managing code files saved from chat bot responses, you can design a sidebar that integrates with the file system of your chosen operating system or file manager. Here’s a conceptual outline:

1. **Sidebar Design**:
   - **Layout**: Use HTML, CSS, and JavaScript to create a sidebar that appears on the side of your browser or application window. This can be done using web technologies like HTML5 and CSS3 for the layout and design.
   - **Content**: The sidebar will display a list of code files managed by the chat bot responses. Each file can be represented by a clickable item that shows the file name and possibly a brief description or preview.
To generate a file system sidebar component for managing code files saved from chat bot responses, you can design it using HTML, CSS, and JavaScript. Here’s a basic structure:

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code File Manager</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="sidebar">
        <h2>Code File Manager</h2>
        <button id="create-btn">Create New File</button>
        <button id="list-btn">List Files</button>
        <div id="file-list"></div>
        <div id="file-content"></div>
    </div>
To generate a file system component for saving code files saved from chatbot responses, you can use the following steps:

1. **Create a File System Structure**: Designate a directory structure to store the code files. This could be within a project directory, such as `src/data/code` or `assets/code`.

2. **Implement File Management Logic**: Use a programming language like JavaScript or Python to manage the file system. For example, you can use `fs` in Node.js to read and write files.

3. **Handle File Uploads**: Integrate a mechanism to upload files from the chatbot responses. This could involve handling file uploads in the chat interface and then saving them to the designated directory.

4. **Store and Retrieve Code Files**: Ensure that the chatbot can both store and retrieve code files as needed. This might involve creating functions to save files, retrieve them, and update them.

Here’s a simple example using Node.js to manage the file system:
To generate a file system sidebar component for managing code files saved from chat bot responses, you can leverage the functionality of a web extension sidebar in a browser like Firefox. Here’s a step-by-step guide to create such a sidebar:

1. **Define the Sidebar in the Manifest File**:
   - Use the `sidebar_action` key in your `manifest.json` file to specify the default title, panel, and icon for the sidebar.
   - Example:
     ```json
     "sidebar_action": {
       "default_title": "Code Manager",
       "default_panel": "sidebar.html",
       "default_icon": "sidebar_icon.png"
     }
     ```
const handleUpload = (event) => {
     const newFile = event.target.files;
     setUploadedFiles([...uploadedFiles, newFile]);
     saveCodeFile(newFile.name, newFile);
   };
   ```

3. **Store and Retrieve Code Files**:
   - Implement functions to store and retrieve code files as needed. The example above demonstrates how to save a code file. You can extend this to include retrieval logic as shown.

By following these steps, you can create a file system component for saving code files from chatbot responses, ensuring that the code is properly stored and managed within your application.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a file system sidebar component for managing code files saved from chat bot responses, you can leverage the functionality of a web extension sidebar in a browser like Firefox. Here’s a step-by-step guide to create such a sidebar:

1. **Define the Sidebar in the Manifest File**:
   - Use the `sidebar_action` key in your `manifest.json` file to specify the default title, panel, and icon for the sidebar.
   - Example:
     ```json
     "sidebar_action": {
       "default_title": "Code Manager",
       "default_panel": "sidebar.html",
       "default_icon": "sidebar_icon.png"
     }
     ```

2. **Design the Sidebar HTML**:
   - Create an HTML file (`sidebar.html`) that will serve as the content for the sidebar. This file should include UI elements for creating, retrieving, and saving files.
   - Example:
     ```html
     <div id="file-manager">
       <button id="create-file-btn">Create File</button>
       <button id="retrieve-file-btn">Retrieve File</button>
       <button id="save-file-btn">Save to Public Directory</button>
       <input type="text" id="file-name" placeholder="File Name">
       <input type="text" id="file-content" placeholder="File Content">
       <textarea id="file-extension" placeholder="File Extension (e.g., .js, .txt)"></textarea>
     </div>
     ```

3. **Add JavaScript to Handle File Operations**:
   - Use the `browser` object to interact with the browser's APIs, such as `windows.getCurrent()` to determine the current window, and `runtime.getBackgroundPage()` to access the background script.
   - Example JavaScript code for handling file operations:
     ```javascript
     // sidebar.js

     document.getElementById('create-file-btn').addEventListener('click', createFile);
     document.getElementById('retrieve-file-btn').addEventListener('click', retrieveFile);
     document.getElementById('save-file-btn').addEventListener('click', saveToFile);

     function createFile() {
       const fileName = document.getElementById('file-name').value;
       const fileContent = document.getElementById('file-content').value;
       const fileExtension = document.getElementById('file-extension').value;

       // Create a new file in local storage.
       browser.storage.local.set({ [fileName]: fileContent });
       console.log(`File ${fileName} created successfully.`);
     }

     function retrieveFile() {
       // Retrieve a file from local storage.
       browser.storage.local.get().then((result) => {
         if (result) {
           console.log(`File contents: ${result}`);
           // Display the retrieved file content in the UI.
           document.getElementById('file-content').value = result;
         } else {
           console.error('No files found.');
         }
       });
     }

     function saveToFile() {
       // Save the file to the project public directory.
       const fileName = document.getElementById('file-name').value;
       const fileContent = document.getElementById('file-content').value;
       const fileExtension = document.getElementById('file-extension').value;

       // Check if the file already exists in the public directory.
       const existingFiles = browser.runtime.getBackgroundPage().existingFiles;
       if (existingFiles.includes(`${fileName}${fileExtension}`)) {
         alert('File already exists.');
       } else {
         // Save the file to the public directory.
         browser.runtime.getBackgroundPage().saveFileToPublicDirectory(`${fileName}${fileExtension}`, fileContent);
         console.log(`File ${fileName} saved successfully.`);
       }
     }

     // Function to save file to public directory
     function saveFileToPublicDirectory(filename, content) {
       // This function should be implemented in the background script.
       // Example:
       browser.runtime.sendMessage({ action: 'saveFile', filename, content });
     }
     ```

4. **Implement Background Script**:
   - The background script should handle the saving of files to the public directory.
   - Example background script (`background.js`):
     ```javascript
     // background.js

     browser.runtime.onMessage.addListener((request, sender, sendResponse) => {
       if (request.action === 'saveFile') {
         const filename = request.filename;
         const content = request.content;

         // Save the file to the project public directory.
         browser.storage.local.get().then((existingFiles) => {
           if (!existingFiles[filename]) {
             browser.storage.local.set({ [filename]: content });
             console.log(`File ${filename} saved successfully.`);
             sendResponse({ status: 'success' });
           } else {
             sendResponse({ status: 'failure', message: 'File already exists.' });
           }
         });
       }
     });
     ```

5. **Add UI to Display Files**:
   - Use the `browser.storage.local.get()` method to retrieve all files and display them in the sidebar.
   - Example UI update code:
     ```javascript
     // sidebar.js
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: file system, sidebar component, managing code files, chat bot responses, create, retrieve, local storage, save files, project public directory, custom file type, extension
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Sidebar, File System, Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a file system sidebar component for managing code files saved from chat bot responses. it Should be able to create and retreive files from local storage and also save files to project public directory with custom file type / extension.
  EXTRACTED KEYWORDS: file system, sidebar component, managing code files, chat bot responses, create, retrieve, local storage, save files, project public directory, custom file type, extension

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  