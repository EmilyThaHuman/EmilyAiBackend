
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate advanced styled dialog component
Generate a reusable dialog component with data display
Generate a reusable form dialog with a variety of data table components displaying data about chat bots
generate a styled dialog component displaying user icon grid as well as select and save tto user logic
generate a chat sidebar containing a file directory management component with various search, filter, organize functions etc. and dark theme
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages contain requests from a user to generate various React components, including a button, a button for file uploads, a data table for organizing a list of data and documents for AI agent creation, and another generic React component. These requests were made within a short timeframe, indicating a project or learning task involving React development. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 670c30063a88f6a7d8fcc4131]: A request to generate a React button component.
[Summary 2][id 670c1fc059ab56a3c92c10fe1]: A request to generate a React button component specifically for file uploads.
[Summary 3][id 670c1e0a59ab56a3c92c10ee1]: Another request for generating a React button component, possibly a duplicate.
[Summary 4][id 670af2f746ab40ecae9bb9f01]: A request to generate a data table React component for organizing data and UI library documents, related to AI agent creation.
[Summary 5][id 670af210f6d3b57023a1f9791]: A request for generating a generic React component. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a styled dialog component that displays a user icon grid and includes select and save functionality, you can use a combination of Radix Vue for the dialog component and customize it with your requirements. Here is an example of how you might achieve this:
### Dialog Component
```html
<template>
  <DialogRoot>
    <DialogTrigger class="text-grass11 font-semibold shadow-blackA7 hover:bg-mauve3 inline-flex h-[35px] items-center justify-center rounded-[4px] bg-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none">
      Open Dialog
    </DialogTrigger>
    <DialogContent class="text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal">
      <div class="mt-[25px] flex justify-center">
        <!-- User Icon Grid -->
        <div class="grid grid-cols-2 gap-4">
          <!-- Example User Icon Items -->
          <div class="grid-item">
            <img src="user-icon-1.jpg" alt="User Icon 1" />
          </div>
          <div class="grid-item">
            <img src="user-icon-2.jpg" alt="User Icon 2" />
          </div>
          <!-- Add more user icons as needed -->
        </div>
      </div>
      <!-- Select and Save Logic -->
      <div class="mt-[25px] flex justify-end">
### Customization
You can further customize the dialog by adding more features such as animations, custom styles, and additional functionality using Radix Vue's API and CSS customization options.

### Example Use Case
This dialog component can be used in various applications where users need to select and save a set of icons or other data. For instance, in a social media app, users might use this dialog to select their profile icons.

### References
- [Radix Vue Dialog Component](https://www.radix-vue.com/components/dialog)
- [Customizing Dialogs in Kendo UI for Angular](https://www.telerik.com/kendo-angular-ui/components/styling/theme-default/customization-dialog)
- [Hero Video Dialog in Magic UI](https://magicui.design/docs/components/hero-video-dialog)
To generate a data table dialog with environment key forms, you can follow these steps:

1. **Set Up the Environment**:
   - Ensure you have the necessary dependencies and plugins installed. For example, in IntelliJ IDEA, you can enable the Database Tools and SQL plugin to manage data sources and database drivers.

2. **Create the Dialog Component**:
   - Use a UI component library to create a dialog box. For example, in Next.js, you can use the `Dialog` component from a UI library like `@material-ui` or `react-dialog` to create a modal dialog.

3. **Design the Form**:
   - Inside the dialog, design a form that includes input fields for the environment keys. You can use form libraries like `react-hook-form` to handle form state and validation.

4. **Add Form Validation**:
   - Define a schema to validate the intake of the form. This ensures that the data entered by the user is correct and consistent.
```javascript
   import { styled } from 'styled-components';

   const DialogContainer = styled.div`
     width: 400px;
     height: 300px;
     background-color: #fff;
     border-radius: 10px;
     box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
     position: fixed;
     top: 50%;
     left: 50%;
     transform: translate(-50%, -50%);
     padding: 20px;
     display: flex;
     flex-direction: column;
     align-items: center;
   `;

   const Header = styled.div`
     background-color: #f0f0f0;
     padding: 10px;
     border-bottom: 1px solid #ccc;
   `;

   const Content = styled.div`
     flex-grow: 1;
     padding: 20px;
   `;

   const Footer = styled.div`
     background-color: #f0f0f0;
     padding: 10px;
     border-top: 1px solid #ccc;
     display: flex;
     justify-content: flex-end;
   `;

   function openDialog() {
     document.getElementById('dialog-container').style.display = 'block';
   }
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a dark-themed dialog component with input for writing syntax highlighted and formatted JSON data, you can use the following steps in Visual Studio Code (VS Code):

1. **Customize the Theme**:
   - Use the `workbench.colorCustomizations` user setting to customize the colors of the dialog component. For a dark theme, you can set the background and foreground colors to dark shades. For example:
   ```json
   "workbench.colorCustomizations": {
     "input.background": "#333333",
     "input.border": "#444444",
     "input.foreground": "#ffffff",
     "input.placeholderForeground": "#888888",
     ...
   }
   ```

2. **Syntax Highlighting for JSON**:
   - VS Code has built-in support for syntax highlighting JSON. When you write JSON in the input field, it will automatically highlight the syntax.

3. **Formatting JSON**:
   - You can use an extension like `json formatter` to format the JSON data as you type. This will ensure that the JSON is correctly formatted and easy to read.
To generate a dialog component in Angular that allows users to write syntax-highlighted and formatted JSON data, you can use the following steps:

1. **Install Required Dependencies**:
   Ensure you have the necessary dependencies installed. You can use tools like `ng generate component` with schematic preferences from your `angular.json` file.

2. **Create the Component**:
   Use the `ng generate component` command to create the dialog component. This command will generate a basic component structure with HTML, CSS, and TypeScript files.

3. **Customize the Component**:
   In the component's HTML file (`dialog.component.html`), you can use an `<editor>` component like Monaco Editor or ACE Editor to provide syntax highlighting for JSON data. For example, you can use Monaco Editor by including the following code:

```html
<monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
```
3. **Formatting JSON**:
   - You can use an extension like `json formatter` to format the JSON data as you type. This will ensure that the JSON is correctly formatted and easy to read.

Here’s a sample configuration for a dark-themed dialog component in VS Code:

```json
{
  "workbench.colorCustomizations": {
    "input.background": "#333333",
    "input.border": "#444444",
    "input.foreground": "#ffffff",
    "input.placeholderForeground": "#888888",
    ...
    "editor.tokenColorCustomizations": [
      {
        "scope": "source.json",
        "settings": {
          "foreground": "#f8f8f2"
        }
      }
    ]
  }
}
```

This configuration will give you a dark-themed dialog component with syntax highlighted and formatted JSON data.

### List of Citations:
```html
<monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
```

4. **Configure Monaco Editor**:
   In your component's TypeScript file (`dialog.component.ts`), import Monaco Editor and configure it to provide syntax highlighting for JSON data. Here’s an example:

```typescript
import { Component } from '@angular/core';
import { MonacoEditorComponent } from 'ngx-monaco-editor';

@Component({
  selector: 'app-dialog',
  templateUrl: './dialog.component.html',
  styleUrls: ['./dialog.component.css']
})
export class DialogComponent {
  jsonData = '{"key": "value"}'; // Initial JSON data

  onChange(event) {
    console.log('JSON Data:', event);
    this.jsonData = event;
  }
}
```

5. **Add Monaco Editor Library**:
   Ensure you have included the Monaco Editor library in your project. You can do this by adding the necessary scripts in your `index.html` file or using a library like `ngx-monaco-editor`.
onChange(event) {
        console.log('JSON Data:', event);
        this.jsonData = event;
      }
    }
    ```

3. **Add Monaco Editor to Your HTML Template**:
    ```html
    <div class="container">
      <h2>JSON Editor</h2>
      <monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
    </div>
    ```

4. **Configure Monaco Editor**:
    Ensure that the `ngx-monaco-editor` library is properly configured to provide syntax highlighting for JSON data. The library should handle this automatically.

By following these steps, you can create a dialog component in Angular that allows users to write syntax-highlighted and formatted JSON data.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a dark-themed dialog component with input for writing syntax highlighted and formatted JSON data, you can use the following steps in Visual Studio Code (VS Code):

1. **Customize the Theme**:
   - Use the `workbench.colorCustomizations` user setting to customize the colors of the dialog component. For a dark theme, you can set the background and foreground colors to dark shades. For example:
   ```json
   "workbench.colorCustomizations": {
     "input.background": "#333333",
     "input.border": "#444444",
     "input.foreground": "#ffffff",
     "input.placeholderForeground": "#888888",
     ...
   }
   ```

2. **Syntax Highlighting for JSON**:
   - VS Code has built-in support for syntax highlighting JSON. When you write JSON in the input field, it will automatically highlight the syntax.

3. **Formatting JSON**:
   - You can use an extension like `json formatter` to format the JSON data as you type. This will ensure that the JSON is correctly formatted and easy to read.

Here’s a sample configuration for a dark-themed dialog component in VS Code:

```json
{
  "workbench.colorCustomizations": {
    "input.background": "#333333",
    "input.border": "#444444",
    "input.foreground": "#ffffff",
    "input.placeholderForeground": "#888888",
    ...
    "editor.tokenColorCustomizations": [
      {
        "scope": "source.json",
        "settings": {
          "foreground": "#f8f8f2"
        }
      }
    ]
  }
}
```

This configuration will give you a dark-themed dialog component with syntax highlighted and formatted JSON data.

### List of Citations:
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: dark-themed, dialog component, input, syntax highlighted, formatted, json data
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Dialog, Input
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a dark-themed dialog component with for input allowing using to write syntax highlighted and formatted json data
  EXTRACTED KEYWORDS: dark-themed, dialog component, input, syntax highlighted, formatted, json data

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  