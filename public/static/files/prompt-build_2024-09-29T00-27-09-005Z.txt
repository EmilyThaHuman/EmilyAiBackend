
    SYSTEM PROMPT: 
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.


    ASSISTANT INSTRUCTIONS: When responding to queries about React:
      1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

      2. Provide a comprehensive solution that includes:
         - A brief explanation of the component's design rationale
         - The full styled-component code, utilizing advanced features when appropriate

      3. Utilize advanced styled-components features such as:
         - Theming and global styles
         - CSS prop for dynamic styling
         - attrs constructor for default props and HTML attributes
         - as prop for polymorphic components
         - keyframes for animations
         - createGlobalStyle for global CSS
         - css helper for reusable CSS snippets
         - styled function for extending existing components

      4. Incorporate modern CSS techniques like:
         - CSS Grid and Flexbox for layout
         - CSS Custom Properties (variables) for theming
         - CSS Modules for local scoping when appropriate
         - Media queries for responsive design
         - CSS-in-JS techniques for dynamic styling based on props or state

      5. Optimize for performance by:
         - Using memoization techniques (React.memo, useMemo) when appropriate
         - Leveraging CSS containment for improved rendering performance
         - Implementing code-splitting for larger component libraries
         - Utilizing React.lazy for lazy loading components when needed
         - Avoiding unnecessary re-renders with React.memo or useMemo
         - Utilizing CSS-in-JS techniques for dynamic styling based on props or state

      6. Ensure code quality by:
         - Following React and styled-components best practices
         - Using consistent naming conventions

      8. Always format your response using Markdown syntax.
      Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
      Here's a quick reference:

         ---

      # Heading 1
      ## Heading 2
      ### Heading 3

      **Bold text**
      *Italic text*

      - Bullet list item
      1. Numbered list item

      `Inline code`

      ```javascript
      // Code block
      const example = 'This is a code block';
      ```

      [Link text](URL)

      > Blockquote

      | Table | Header |
      |-------|--------|
      | Cell  | Cell   |

      For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

      Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Generate a modal compoennt with data table
Generate a popup component reusable
Generate a resuable button component with moddable colors
Generate a reusable dialog component with data display
Generate a reusable tooltip component with data display
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: To generate a reusable dialog component with data display, you can use React and Tailwind CSS, similar to the approach described in. Here’s a concise implementation:

1. **Create the Modal Component**:
   ```javascript
   // Modal.js
   import React, { useState } from 'react';
   import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';

   const Modal = ({ isOpen, onClose, children }) => {
     if (!isOpen) return null;
     return (
       <Dialog open={isOpen} onClose={onClose}>
         <DialogTitle>{children}</DialogTitle>
         <DialogContent>{children}</DialogContent>
         <DialogActions>
           <Button onClick={onClose}>Close</Button>
         </DialogActions>
       </Dialog>
     );
   };

   export default Modal;
   ```

2. **Create Specific Modal Components**:
   - **Alert Modal**:
     ```javascript
     // AlertModal.js
     import React from 'react';
     import Modal from './Modal';
To generate a modal component with a data table, you can combine the concepts from the provided resources. Here’s a step-by-step guide:

1. **Create the Modal Component**:
   - Use React to build a reusable modal component, similar to the example in. This will include properties for title, body content, and actions.

   ```jsx
   import React, { useState } from 'react';

   const Modal = ({ open, titleContent, cancelFn, primaryFn, content }) => {
     if (!open) return null;

     return (
       <div className="modalBackground">
         <div className="modalContainer">
           <div className="title">
             {titleContent}
             <button onClick={cancelFn}>X</button>
           </div>
           <div className="content">
             {content}
           </div>
           <div className="actions">
             <button onClick={primaryFn}>Confirm</button>
           </div>
         </div>
       </div>
     );
   };

   export default Modal;
   ```
To generate a styled dialog component that displays a user icon grid and includes select and save functionality, you can use a combination of Radix Vue for the dialog component and customize it with your requirements. Here is an example of how you might achieve this:
{/* Popover Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for popover items */}
        {/* Example Icon */}
        {/* <InformationCircleIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Popovers</span> */}
      </div>

      {/* Profile Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for profile items */}
        {/* Example Icon */}
        {/* <UserCircleIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Profiles</span> */}
      </div>
2. **Create Specific Modal Components**:
   - **Alert Modal**:
     ```javascript
     // AlertModal.js
     import React from 'react';
     import Modal from './Modal';

     const AlertModal = ({ isOpen, onClose }) => {
       return (
         <Modal isOpen={isOpen} onClose={onClose}>
           <DialogTitle>Alert</DialogTitle>
           <DialogContent>
             <p>This is an important message.</p>
           </DialogContent>
           <DialogActions>
             <Button onClick={onClose}>OK</Button>
           </DialogActions>
         </Modal>
       );
     };

     export default AlertModal;
     ```

   - **Form Modal**:
     ```javascript
     // FormModal.js
     import React, { useState } from 'react';
     import Modal from './Modal';

     const FormModal = ({ isOpen, onClose, onSubmit }) => {
       const [formData, setFormData] = useState({ name: '', email: '' });
  EXTRACTED KEYWORDS: modal component, displaying, icon previews
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: modal
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a modal component for displaying icon previews

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To generate a modal component for displaying icon previews in React, you can follow these steps:

1. **Set Up the Project**:
   - Create a new React application using `npx create-react-app react-app`.
   - Install necessary dependencies: `npm install tailwindcss postcss autoprefixer react-icons`.

2. **Install Tailwind CSS**:
   - Initialize Tailwind CSS using `npx tailwindcss init -p`.
   - Configure Tailwind CSS in `tailwind.config.js`.

3. **Create the Modal Component**:
   - Define a reusable Modal component that controls its visibility.
   - Use Tailwind CSS for styling the modal.

Here is an example of how you can create the modal component:

```javascript
// App.js
import React, { useState } from 'react';
import './App.css';
import { FaBox, FaTag, FaUsers } from 'react-icons/fa';

// Sample category data with icons and descriptions
const categories = [
  { name: "Products", icon: <FaBox size={24} />, bgColor: "bg-green-500", image: "https://via.placeholder.com/150", description: "Explore a wide range of products available for you." },
  { name: "Trending", icon: <FaUsers size={24} />, bgColor: "bg-purple-500", image: "https://via.placeholder.com/150", description: "See what's trending in the market." },
  { name: "Tags", icon: <FaTag size={24} />, bgColor: "bg-red-500", image: "https://via.placeholder.com/150", description: "Explore our best-selling products." },
];

const CategoryPreview = () => {
  const [selectedCategory, setSelectedCategory] = useState(null);

  const handleCategoryClick = (category) => {
    setSelectedCategory(category);
  };

  const closeModal = () => {
    setSelectedCategory(null);
  };

  return (
    <div>
      <p className="text-center font-bold text-green-600 text-[45px] p-5 mb-2"> Category Previews </p>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-2 w-11/12 m-auto">
        {categories.map((category, index) => (
          <div key={index} className={`bg-${category.bgColor} p-4 rounded-lg ${selectedCategory === category ? 'border border-green-400' : ''}`} onClick={() => handleCategoryClick(category)}>
            <div className="flex items-center">
              {category.icon}
              <span className="ml-2">{category.name}</span>
            </div>
            {selectedCategory === category && (
              <div className="mt-4">
                <img src={category.image} alt={category.name} className="w-full h-auto" />
                <p>{category.description}</p>
              </div>
            )}
          </div>
        ))}
      </div>

      {selectedCategory && (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white p-4 rounded-lg shadow-md w-1/2 mx-auto">
            <h2 className="text-lg font-bold">{selectedCategory.name}</h2>
            <img src={selectedCategory.image} alt={selectedCategory.name} className="w-full h-auto" />
            <p>{selectedCategory.description}</p>
            <button className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg" onClick={closeModal}>Close</button>
          </div>
        </div>
      )}
    </div>
  );
};

export default CategoryPreview;
```

### Explanation
- **State Management**: The `CategoryPreview` component uses `useState` to manage the selected category.
- **Modal Logic**: When a category is clicked, it sets the selected category and displays the modal with the category's details.
- **Modal Styling**: The modal is styled using Tailwind CSS classes for a clean and modern look.

### Tailwind Configuration
Ensure you have Tailwind CSS configured properly in your project by adding the following to your `tailwind.config.js` file:

```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

This setup will allow you to use Tailwind CSS utility classes to style your components.

### Running the Application
To run the application, use the command `npm start`. This will start your React application on port 3000, allowing you to see the modal component in action.

### Citations
1. [Geeks for Geeks - Create Category Previews Using React and Tailwind CSS](https://www.geeksforgeeks

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## CONTENT REQUIREMENTS:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## FORMATTING GUIDE: Use the following guide to format messages using Markdown syntax. 
	This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more.
	Ensure to apply the appropriate syntax for the desired formatting.
	Please return final response JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
	Markdown Guide

	Headings:

	# (H1)

	Example: # Heading 1 renders as:

	Heading 1
	## (H2)

	Example: ## Heading 2 renders as:

	Heading 2
	### (H3)

	Example: ### Heading 3 renders as:

	Heading 3
	#### (H4)

	Example: #### Heading 4 renders as:

	Heading 4
	##### (H5)

	Example: ##### Heading 5 renders as:

	Heading 5
	###### (H6)

	Example: ###### Heading 6 renders as:

	Heading 6
	Text Formatting:

	**bold** or __bold__

	Example: **Bold Text** renders as: Bold Text

	*italic* or _italic_

	Example: *Italic Text* renders as: Italic Text

	***bold and italic***

	Example: ***Bold and Italic Text*** renders as: Bold and Italic Text

	~~strikethrough~~

	Example: ~~Strikethrough Text~~ renders as: Strikethrough Text

	`inline code`

	Example: `Inline Code` renders as: Inline Code

	Lists:

	Numbered: Start with 1., 2., etc.

	Example:

	1. Item A
	2. Item B
	Renders as:

	1. Item A
	2. Item B

	Bullet: Start with -, *, or +

	Example:

	- Item A
	* Item B
	+ Item C
	Renders as:

	- Item A
	- Item B
	- Item C

	(It's also possible to indent numbered Lists & bulleted Lists!)

	- Task lists: Start with [ ] (unchecked) or [x] (checked)

	Example:
	- [ ] Unchecked Task
	- [x] Checked Task

	Renders as:
	- [ ] Unchecked Task
	- [x] Checked Task

	Links and Images:
	- Hyperlink: [link text](URL)
	- Example: [Google](https://www.google.com) renders as: Google
	- Image: ![alt text](URL)
	- Example: ![Placeholder Image](https://via.placeholder.com/150) renders as (using a placeholder image): Placeholder Image

	Blockquotes:
	- Start with >
	- Example: > Blockquote Renders as:

	> Blockquote

	> Multiple lines
	>
	> Blockquote
	> Main Quote
	>
	> > Indented Quote
	> >
	> > More of the Indented Quote
	(it's also possible to indent these blockquotes!)

	Code Blocks:
	- Enclose with triple backticks or indent with 4 spaces.
	- Example: ``` Code Block ``` Renders as:

	```
	Code Block
	```

	Horizontal Rule:
	- Use ---, ___, or ***
	- Example: --- renders as: ---

	Escape Special Characters:
	Use a backslash  before the character.
	- Example: # Not a Heading renders as: # Not a Heading

	Tables:
	- Example: | Header 1 | Header 2 |
	|----------|----------|
	| Cell 1 | Cell 2 |
	Renders as:
	| Header 1 | Header 2 |
	|----------|----------|
	| Cell 1 | Cell 2 |

	Superscript: ^ (works on some platforms like Reddit)
	- Example: E = mc^2 might render as (E = mc²) on supported platforms.

	Subscript: ~ (in specific platforms)
	- Example: H~2~O might render as (H₂O) on supported platforms.

	Table of Contents: [TOC] (in specific platforms/extensions).

	Footnotes: [^1] and [^1]: (in some Markdown parsers).

	Definition Lists (in specific platforms):
	- Example: Term : Definition

	Abbreviations (in specific platforms):
	- Example: *[HTML]: Hyper Text Markup Language

	Highlight: ==highlighted text== (in platforms like StackEdit).

	Custom Containers (in platforms like VuePress):
	- Example: ::: warning *Here be dragons* :::

	Emoji: :emoji_name: (in platforms like GitHub).
	- Example: :smile: might render as 🙂 on supported platforms.

	HTML Format: All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: “<h1>Heading level 1</h1>”. This conversion applies to most markdowns used in website design and construction.

	Special Characters: Of course, there's a whole set of Characters which can be used in formatting, like [brackets], {curly brackets}, ackslashes, <angle brackets>, and so much more!

	Mermaid Diagrams:
	- Mermaid diagrams can be used to create flowcharts, sequence diagrams, class diagrams, and more using the mermaid syntax.
	- To include a Mermaid diagram, use the following format:
	```mermaid
	diagram_type
	diagram_code
	```
	- Example: To create a flowchart, you can use:
	```mermaid
	graph TD;
		A-->B;
		A-->C;
		B-->D;
		C-->D;
	```
	This will render a simple flowchart with nodes A, B, C, and D.

	Citations:
  - When including information from external sources, use inline citations in the format [@AuthorYear].
  - At the end of the response, include a "References" section with full citation details.
  - Format each reference as follows:
    [@AuthorYear]: Author, A. (Year). Title of the work. Source. URL

  Example:
  This is a sentence with a citation [@Smith2023].

  References:
  [@Smith2023]: Smith, J. (2023). Example Article. Journal of Examples. https://example.com/article

  Please return final response JSON (json): { "content": "Your Markdown formatted message with citations", "type": "markdown", "references": ["Array of reference strings"] }.

		Now, with all the markdowns I've provided, use these to create a [Type of Content Here]; maintaining the markdowns provided.
		**Additional Styling Instructions**:
		- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.


  --- EXAMPLE RESPONSE FORMAT ---

  ```json
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  