
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
   import React from 'react';
   import PropTypes from 'prop-types';
   import styles from './MyComponent.module.css';
   import { useMyHook } from '../hooks/myHook';
   import { MyContext } from '../context/myContext';
   import MyIcon from '../icons/MyIcon';

   const MyComponent = ({ prop1, prop2 }) => {
     const { state, dispatch } = useMyHook();
     const { data } = useContext(MyContext);

     return (
       <div className={styles.myComponent}>
         <MyIcon />
         <h1>{data.title}</h1>
         <p>{data.description}</p>
         {/* Render additional components or content based on props and state */}
       </div>
     );
   };
   MyComponent.propTypes = {
     prop1: PropTypes.string.isRequired,
     prop2: PropTypes.number,
   };

   export default MyComponent;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a reusable loading button
Generate a file manager component
Generate a reusable dialog component with data display
Generate a popup component reusable
generate a styled file uplaod button with file preview option
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The communication consists of requests and responses regarding the development of UI components, specifically a rating component for evaluating chat prompt response quality, and a data table component for organizing UI library documents. The exchange involves a user's request for generating a rating component, followed by a detailed implementation of the rating component using React and Tailwind CSS, and a system's mention of a data table component. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 66fa0d00b869e1ec40a49e041]: A detailed explanation and code implementation for a React-based rating component to evaluate chat prompt response quality. It includes criteria such as instruction following, groundedness, conciseness, fluency, and coherence, alongside a usage example and references to React and Tailwind CSS documentation.
[Summary 2][id 66fa0cddb869e1ec40a49dfd1]: A user's request for generating a rating component to assess chat prompt response quality.
[Summary 3][id 66f03c3c2a7bc27b85b47d801]: A system's mention of generating a data table component for organizing UI library documents stored in a vector database. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To build a progress bar component that visually represents the completion status with customizable properties like value, max, color, and animated transitions, you can use a combination of HTML, CSS, and JavaScript. Below is an example using Tailwind CSS for styling and React for the dynamic component:

### Progress Bar Component Example

```html
<!-- HTML Structure -->
<div class="w-full bg-gray-200 rounded-full">
  <div class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-l-full animate-progress" style="width: {{percentage}}%" id="progress-bar">{{percentage}}%</div>
</div>

<!-- React Component -->
import React, { useState, useEffect } from 'react';

const ProgressBar = ({ value, max, color }) => {
  const [percentage, setPercentage] = useState(0);

  useEffect(() => {
    setPercentage((value / max) * 100);
  }, [value, max]);
const ProgressBar = ({ value, max, color }) => {
  const [percentage, setPercentage] = useState(0);

  useEffect(() => {
    setPercentage((value / max) * 100);
  }, [value, max]);

  return (
    <div className={`w-full bg-gray-200 rounded-full`}>
      <div
        className={`bg-${color}-600 text-xs font-medium text-${color}-100 text-center p-0.5 leading-none rounded-l-full animate-progress`}
        style={{ width: `${percentage}%` }}
        id="progress-bar"
      >
        {percentage}%
      </div>
    </div>
  );
};

export default ProgressBar;
```

### Explanation

1. **HTML Structure**:
   - The outer div sets the width and background color of the progress bar.
   - The inner div sets the background color of the progress bar and its text.
const data = await response.json();
      console.log(data);
      setStatus('success');
    } catch (error) {
      console.error(error);
      setStatus('fail');
    }
  };

  return (
    <>
      <div className="input-group">
        <input id="file" type="file" onChange={handleFileChange} />
      </div>
      {file && (
        <section>
          File details:
          <ul>
            <li>Name: {file.name}</li>
            <li>Type: {file.type}</li>
            <li>Size: {file.size} bytes</li>
          </ul>
        </section>
      )}
      {file && (
        <button onClick={handleUpload} className="submit">
          Upload a file
        </button>
      )}
    </>
  );
}

export default App;
```

### Citations

1. Nuxeo Documentation on File Manager
2. Syncfusion's Angular FileManager Component
3. Syncfusion's React FileManager Component
4. Custom React Implementation for File Upload
To generate a reusable loading button in React, you can create a custom component that handles the loading state effectively. Here’s a step-by-step guide:

1. **Create the Component**:
   - Start by creating a new React component that will handle the loading state. You can use a functional component for simplicity.

2. **Use a Hook for Loading State**:
   - Use the `useActionState` hook from React 19 to manage the loading state. This hook provides a pending state, which is useful for displaying loading indicators during asynchronous operations like form submissions.

3. **Implement the Loading Button**:
   - Create a button that conditionally renders a loading indicator based on the pending state.

Here’s an example implementation:

```jsx
import { useActionState } from 'react';

const LoadingButton = ({ children, loadingText = 'Loading...', onSubmit }) => {
  const { pending } = useActionState();

  const handleSubmit = (event) => {
    event.preventDefault();
    onSubmit();
  };
This component is responsive and can be integrated into any React application with ease, providing a customizable and visually appealing progress bar representation. 

### Props
- **value**: The current value of the progress (required).
- **max**: The maximum value of the progress (required).
- **color**: The color of the progress bar (optional).

### Usage
```jsx
import React from 'react';
import ProgressBar from './ProgressBar';

const App = () => {
  return (
    <div>
      <ProgressBar value={80} max={100} color="blue" />
    </div>
  );
};

export default App;
```

This setup allows you to create a progress bar component that dynamically updates based on the provided values, with customizable colors and animated transitions.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a progress component and logic to display for a file loading/upload component, you can follow these steps using JavaScript and HTML. Below is an example of how you can achieve this:

### HTML
### Explanation

1. **HTML Structure**:
   - The form `#fileUploadForm` contains an input element for file selection and a submit button.
   - The `.progress` div will display the progress bar.

2. **CSS Styling**:
   - Basic styling for the progress bar is added to make it visually appealing.

3. **JavaScript Logic**:
   - The `ajaxForm` method from jQuery Form is used to handle the file upload.
   - The `beforeSend` function sets the initial width of the progress bar to 0%.
   - The `uploadProgress` function updates the width of the progress bar based on the percentage of completion.
   - The `complete` function displays an alert message upon successful upload.

This setup will display a progress bar that updates as the file is being uploaded, giving the user a visual indication of the upload status.
### HTML

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>File Upload with Progress Bar</title>
    <style>
        .progress {
            width: 100%;
            height: 20px;
            border-radius: 10px;
            background-color: #ddd;
        }
        .progress-bar {
            width: 0%;
            height: 100%;
            border-radius: 10px;
            background-color: #007bff;
        }
    </style>
</head>
<body>
    <form id="fileUploadForm" method="POST" enctype="multipart/form-data">
        <input type="file" id="fileInput" name="file" class="form-control">
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
        </div>
        <input type="submit" value="Upload" class="btn btn-primary">
    </form>
<script>
        $(function () {
            $(document).ready(function () {
                $('#fileUploadForm').ajaxForm({
                    beforeSend: function () {
                        $('.progress .progress-bar').css("width", "0%");
                    },
                    uploadProgress: function (event, position, total, percentComplete) {
                        var percentage = percentComplete;
                        $('.progress .progress-bar').css("width", percentage + "%");
                        $('.progress .progress-bar').attr("aria-valuenow", percentage);
                    },
                    complete: function (xhr) {
                        alert('File has uploaded successfully!');
                    }
                });
            });
        });
    </script>
</body>
</html>
```

### Explanation
const handleUpload = (event) => {
     const newFile = event.target.files;
     setUploadedFiles([...uploadedFiles, newFile]);
     saveCodeFile(newFile.name, newFile);
   };
   ```

3. **Store and Retrieve Code Files**:
   - Implement functions to store and retrieve code files as needed. The example above demonstrates how to save a code file. You can extend this to include retrieval logic as shown.

By following these steps, you can create a file system component for saving code files from chatbot responses, ensuring that the code is properly stored and managed within your application.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a progress component and logic to display for a file loading/upload component, you can follow these steps using JavaScript and HTML. Below is an example of how you can achieve this:

### HTML

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>File Upload with Progress Bar</title>
    <style>
        .progress {
            width: 100%;
            height: 20px;
            border-radius: 10px;
            background-color: #ddd;
        }
        .progress-bar {
            width: 0%;
            height: 100%;
            border-radius: 10px;
            background-color: #007bff;
        }
    </style>
</head>
<body>
    <form id="fileUploadForm" method="POST" enctype="multipart/form-data">
        <input type="file" id="fileInput" name="file" class="form-control">
        <div class="progress">
            <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%"></div>
        </div>
        <input type="submit" value="Upload" class="btn btn-primary">
    </form>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.form/4.3.0/jquery.form.min.js"></script>

    <script>
        $(function () {
            $(document).ready(function () {
                $('#fileUploadForm').ajaxForm({
                    beforeSend: function () {
                        $('.progress .progress-bar').css("width", "0%");
                    },
                    uploadProgress: function (event, position, total, percentComplete) {
                        var percentage = percentComplete;
                        $('.progress .progress-bar').css("width", percentage + "%");
                        $('.progress .progress-bar').attr("aria-valuenow", percentage);
                    },
                    complete: function (xhr) {
                        alert('File has uploaded successfully!');
                    }
                });
            });
        });
    </script>
</body>
</html>
```

### Explanation

1. **HTML Structure**:
   - The form `#fileUploadForm` contains an input element for file selection and a submit button.
   - The `.progress` div will display the progress bar.

2. **CSS Styling**:
   - Basic styling for the progress bar is added to make it visually appealing.

3. **JavaScript Logic**:
   - The `ajaxForm` method from jQuery Form is used to handle the file upload.
   - The `beforeSend` function sets the initial width of the progress bar to 0%.
   - The `uploadProgress` function updates the width of the progress bar based on the percentage of completion.
   - The `complete` function displays an alert message upon successful upload.

This setup will display a progress bar that updates as the file is being uploaded, giving the user a visual indication of the upload status.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: Progress component, logic, display, file loading, upload component
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Progress, Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a Progress componenet and logic to display for a file loading/upload component
  EXTRACTED KEYWORDS: Progress component, logic, display, file loading, upload component

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  