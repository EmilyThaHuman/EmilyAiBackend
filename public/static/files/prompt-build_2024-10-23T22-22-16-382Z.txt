
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a dashboard for viewing chat session data like promtps and messages
Generate a dashboard for viewing chat session data like promtps and messages and token count and favorite prompts
Generate a dashboard to display dashboard data related to a chat bot
generate  react prompt templatre dispklay dashboard with dark theme and animations using framer motion
Generate a reusable form dialog with a variety of data table components displaying data about chat bots
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages discuss the generation of a Material UI dashboard for chat monitoring, with increasing complexity in requirements across the messages. The progression includes, starting from basic chat monitoring, adding chat prompt templates, and finally including a prompt create dialog. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671976944977a3612198d6b21]: Detailed request to generate a Material UI dashboard for chat monitoring, including chat prompt templates and a prompt create dialog.
[Summary 2][id 671974f2d2d3a461981b2a911]: Request to generate a Material UI dashboard for chat monitoring, with the addition of chat prompt templates.
[Summary 3][id 671972c9e49fe4df33c483131]: Initial request to generate a Material UI dashboard for basic chat monitoring. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: variables: {

"customer_data":"",

"chat_query":""

}

})
```

This template can be extended with more variables and Mustache tags to enhance its functionality.

### Conclusion

By combining these features and best practices, you can create a robust prompt template editor component that supports seamless creation, management, and deployment of LLM prompts.

### References Portkey Docs: Prompt Templates Amazon Bedrock: Design a Prompt Salesforce Help: Manage Prompt Templates
To generate a prompt template editor component, you can leverage the features of tools like Portkey AI and Salesforce Prompt Builder, which offer robust capabilities for creating, managing, and deploying prompt templates. Here’s a concise overview of how you can build such a component:

1. **Use a Templating Engine**: Utilize a templating engine like Mustache, which is used by Portkey AI under the hood. Mustache allows you to define variables and incorporate them into your prompts, making them extensible.

2. **Variable Definition**: Define variables within the template that can be passed at runtime. For example, in Portkey AI, you can use `{{customer_data}}` and `{{chat_query}}` as variables.

3. **API Integration**: Integrate the prompt template editor with an API to deploy the templates seamlessly. Portkey AI allows you to create and manage prompts with just an API call.
To generate a data table component for organizing a list of custom user prompts for a chat app, you can use UI components like those in UI Bakery or Retool. Here’s a step-by-step guide:

### Using UI Bakery

1. **Add a Table Component**:
   - Click the "Add Component" button and select the "Table" component from UI Bakery.

2. **Configure Columns**:
   - Dynamic columns can be configured using JavaScript mode. Click the JS button next to the columns section to enable dynamic mode.
   - Specify columns using an array of objects, defining properties like `prop` (data property to display), `type` (available types like 'number', 'string', 'text', etc.), and `primaryKey` (at least one column must be a primary key) if necessary.
6. **User Interface**: Design a user-friendly interface that allows users to easily create, edit, and manage prompt templates. Salesforce Prompt Builder offers features like version management, activation, and deactivation, which can be integrated into your UI.

### Example Template

Here’s an example of how you might structure a prompt template using Mustache:

```plaintext
As you can see,

`{{customer_data}}` and

`{{chat_query}}` are defined as variables in the template and you can pass their value at the runtime:

```

```javascript
import Portkey from 'portkey-ai'

const portkey = new Portkey()

const response = portkey.prompts.completions.create({

promptID: "pp-hr-bot-5c8c6e",

variables: {

"customer_data":"",

"chat_query":""

}

})
```

This template can be extended with more variables and Mustache tags to enhance its functionality.

### Conclusion
To generate a dashboard component for displaying UI data, including icons and options for organizing the data, you can use a combination of the following components and tools:
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a Material UI dashboard for chat monitoring with chat prompt templates and a prompt create dialog, you can follow these steps:

### 1. **Choose a Material UI Template**
Select a suitable Material UI template like Material Dashboard or Star Admin, which are both free and feature-rich Bootstrap admin templates inspired by Google's UI design principles.

### 2. **Set Up the Dashboard Structure**
Create a dashboard with the following sections:
- **Chat Log**: A table or list to display all chat logs.
- **Prompt Templates**: A section to manage and display chat prompt templates.
- **Prompt Create Dialog**: A dialog box where users can create new chat prompts.

### 3. **Implement Chat Log Section**
Use a table or list component to display chat logs. This can be achieved using a library like HoloViz Panel, which provides easy-to-use widgets for creating chat components.
To generate a material UI dashboard for chat monitoring with chat prompt templates and a prompt creator dialogue, you can follow these steps:

1. **Design Layout**:
   - **Header**: Include a navigation bar with tabs for different chat interfaces (e.g., Text Input, File Input, Chat Log).
   - **Chat Interface**: Use a `pn.template.FastListTemplate` for the chat interface, as suggested in. This will allow for a clean and organized layout.
   - **Chat Log**: Display the chat log using `panel.chat.ChatMessage` to render chat messages with user avatars, names, and timestamps.
To generate a Material UI dashboard for chat monitoring with chat prompt templates, you can follow these steps:

1. **Design Principles**:
   - **Interactive Elements**: Incorporate interactive filters and time interval widgets to allow users to easily navigate and analyze chat data.
   - **Animation Options**: Use animation options to enhance the visual appeal of the dashboard, but use them sparingly to maintain simplicity.

2. **Template Utilization**:
   - Use a template to streamline the design process. For example, a template for a construction project dashboard can be adapted for chat monitoring by focusing on key metrics like user engagement, message frequency, and response times.

3. **Chat Prompt Templates**:
   - Implement chat prompt templates using AI tools like ChatGPT. These templates can be integrated into the dashboard to provide users with pre-defined prompts for specific chat scenarios, such as customer service inquiries or technical support requests.
To generate a Material UI (MUI) dashboard for chat monitoring, you would need to follow these steps:

1. **Set Up the Project**: Create a new React project and install MUI.
   ```bash
   npx create-react-app my-chat-dashboard
   npm install @mui/material @emotion/react @emotion/styled
   ```

2. **Import MUI Components**: Import necessary components from MUI.
   ```jsx
   import { Box, Grid, Typography } from '@mui/material';
   ```

3. **Design the Dashboard Layout**:
   - **Header**: Include a header with navigation.
     ```jsx
     <Box sx={{ flexGrow: 1 }}>
       <AppBar position="static">
         <Toolbar>
           <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
             Chat Monitoring Dashboard
           </Typography>
           <Button color="inherit">Settings</Button>
         </Toolbar>
       </AppBar>
     </Box>
     ```
# Finally, serve the dashboard
template.servable()
```

This code snippet demonstrates how to create a material UI dashboard for chat monitoring with chat prompt templates and a prompt creator dialogue. It also includes interactive elements for filtering and customizing the dashboard, as well as a simple real-time data visualization using Plotly.

### Citations
1. Eleken blog about dashboard design examples.
2. HoloViz Panel documentation for chat components.
4. RIB Software blog about BI dashboard design principles.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a material UI dashboard for chat monitoring with chat prompt templates and a prompt creator dialogue, you can follow these steps:

1. **Design Layout**:
   - **Header**: Include a navigation bar with tabs for different chat interfaces (e.g., Text Input, File Input, Chat Log).
   - **Chat Interface**: Use a `pn.template.FastListTemplate` for the chat interface, as suggested in. This will allow for a clean and organized layout.
   - **Chat Log**: Display the chat log using `panel.chat.ChatMessage` to render chat messages with user avatars, names, and timestamps.

2. **Interactive Elements**:
   - **Prompt Templates**: Include a dropdown or tab for selecting different chat prompt templates. This can be integrated with a simple list of predefined prompts.
   - **Prompt Creator Dialogue**: Implement a dialogue box where users can create their own custom prompts. This could include text inputs for the prompt and any additional parameters like timeout duration or message parameters.

3. **Real-time Data Visualization**:
   - Use real-time data visualization tools like line charts or graphs to display metrics such as conversation rate, response time, and user engagement.

4. **Customization Options**:
   - Allow users to customize the appearance of the dashboard, including colors, fonts, and layout options.

5. **Smart Alarms**:
   - Implement smart alarms to notify users of any anomalies or critical events in the chat data, such as high response times or low conversation rates.

Here’s a sample implementation in Python using HoloViz Panel:

```python
import panel as pn
from panel.chat import ChatInterface, ChatMessage

# Define the chat interface
chat_interface = ChatInterface(callback=repeat_contents, widgets=[pn.widgets.TextInput(), pn.widgets.FileInput()])

# Define the prompt templates dropdown
prompt_templates = pn.widgets.Select(options=["Default Prompt", "Custom Prompt", "Template 1", "Template 2"])

# Define the prompt creator dialogue
def create_prompt():
    prompt_dialogue = pn.widgets.TextInput(value="Enter your custom prompt")
    return prompt_dialogue

# Create the dashboard layout
template = pn.template.FastListTemplate(
    title="Chat Monitoring Dashboard",
    main=[chat_interface, prompt_templates, create_prompt()],
)

# Add interactive elements for filtering and customizing the dashboard
template.servable()

# Implement smart alarms (example using a simple alert system)
def alert_system(data):
    if data['response_time'] > 10:
        return "High Response Time Alert!"
    else:
        return ""

# Display real-time data visualization (example using a simple line chart)
import plotly.graph_objects as go

def real_time_data Visualization(data):
    fig = go.Figure(data=[go.Line(x=data['timestamp'], y=data['response_time'])])
    return fig

# Integrate the real-time data visualization into the dashboard
real_time_data Visualization(pn.widgets.CurvePlot(real_time_data Visualization))

# Finally, serve the dashboard
template.servable()
```

This code snippet demonstrates how to create a material UI dashboard for chat monitoring with chat prompt templates and a prompt creator dialogue. It also includes interactive elements for filtering and customizing the dashboard, as well as a simple real-time data visualization using Plotly.

### Citations
1. Eleken blog about dashboard design examples.
2. HoloViz Panel documentation for chat components.
4. RIB Software blog about BI dashboard design principles.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: material UI, dashboard, chat monitoring, chat prompt templates, prompt creator dialog
      | UI Libraries: React, Material UI
      | JS Libraries: React
      | Component Types: dashboard, chat prompt templates, prompt creator dialog
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a material UI dashboard for chat monitoring with chat prompt templates and prompt creator dialo
  EXTRACTED KEYWORDS: material UI, dashboard, chat monitoring, chat prompt templates, prompt creator dialog

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  