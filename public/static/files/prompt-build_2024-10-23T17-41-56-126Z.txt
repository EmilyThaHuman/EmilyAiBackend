
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: generate a chat sidebar containing a file directory management component with various search, filter, organize functions etc. and dark theme
generate a mesage box componenet with chat history data dispalyed
Generate a data table component for listing chat messages
Generate a message box componeneet for chat messages
Generate a file system sidebar component for managing code files saved from chat bot responses
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The series of messages consists of requests for code generation, alongside a sequence of nonsensical text entries, all from the same user within a single session. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671902004776946bb76ab6cc1]: Request to generate a gradient ghost button component.
[Summary 2][id 671900717facfe6b62bde2451]: Nonsensical text entry.
[Summary 3][id 6718fc4e673133571cffa6531]: Nonsensical text entry.
[Summary 4][id 6718fb450b982f4ff0ec70601]: Nonsensical text entry.
[Summary 5][id 6718f9c55200b9b85ddeceeb1]: Nonsensical text entry. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a chatbot dashboard layout with a sidebar navigation, header, and chat history data, you can incorporate the following components:

1. **Header**:
   - **Navigation Bar**: Include buttons or links for main navigation such as "Chat History," "Settings," and "Help."
   - **User Profile**: Display the user's profile information, such as their name and avatar.

2. **Sidebar Navigation**:
   - **Chat History**: A list or grid view of previous conversations, with options to filter by date, user, or conversation type.
   - **Settings**: Options to manage chatbot settings, such as customizing triggers, actions, and integrations.
   - **Help**: Links to FAQs, documentation, or support resources.
{/* Chat Box Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChatBubbleLeftIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Boxes</span>
      </div>

      {/* Chat List Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CommentDotsIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Lists</span>
      </div>

      {/* Dashboard Dropdown Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <BellIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Dashboard Dropdowns</span>
      </div>

      {/* Data Stats Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <UserIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Data Stats</span>
      </div>
To generate a chat template rendering component, you can use a combination of HTML, CSS, and JavaScript, along with a framework like React or Blazor for more complex applications. Here’s a basic example using HTML and CSS for a chat component, and then an example using React with TypeScript and Socket.io for a more dynamic chat application.

### Basic HTML and CSS Chat Template
### Example Implementation

#### Chat Sidebar Design
```html
<div class="chat-sidebar">
  <div class="sidebar-header">
    <h2>File Directory</h2>
    <button class="toggle-sidebar">Toggle Sidebar</button>
  </div>
  
  <div class="sidebar-content">
    <div class="search-bar">
      <input type="search" placeholder="Search files and folders">
    </div>
    
    <div class="folder-tree">
      <!-- Folders will be dynamically generated here -->
    </div>
    
    <div class="toolbar">
      <!-- Toolbar controls will be dynamically generated here -->
    </div>
    
    <div class="right-click-menu" style="display:none;">
      <!-- Right-click menu options will be dynamically generated here -->
    </div>
  </div>
</div>
```
To generate a dashboard layout for displaying your chatbot app stats with a sidebar navigation, header, and content area, consider the following structure:

### Dashboard Layout

1. **Header**
   - **Title**: "Chatbot Analytics Dashboard"
   - **Navigation Icons**: User profile, settings, help, and logout options

2. **Sidebar Navigation**
   - **Main Menu**: 
     - **Overview**
     - **Engagement**
     - **Conversions**
     - **Retention**
     - **Advanced Analytics**
   - **Submenu Options**:
     - Each main menu item can have sub-options like "Metrics," "Trends," "Reports," etc.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: export default App;
```

This approach leverages Shadcn UI components to create a visually appealing and functional card component for displaying chat prompt templates with icons and titles.
To generate a React card component to display chat prompt templates with an icon and title, you can use the Shadcn UI components from the Horizon AI Boilerplate. Here's a concise guide:

1. **Install Shadcn UI**: Ensure you have the necessary dependencies installed. You can use a package manager like npm or yarn.

    ```bash
    npm install @shadcn/ui
    ```

2. **Create the Card Component**:
    - Import the necessary components from Shadcn UI.
    - Use the `Card` and `Card.Body` components to create the card structure.
    - Add an `Icon` component for the icon and a `Title` component for the title.

Here’s an example implementation:

```jsx
import React from 'react';
import { Card, Card.Body, Icon } from '@shadcn/ui';
To create a component in different frameworks, follow these steps:

### 1. Create a React Component with Nx
Use Nx to generate a new React component. You can use the following command:
```bash
nx g @nx/react:component libs/ui/src/my-component
```
This will create a new component named `my-component` under the `libs/ui` project in your Nx workspace.

### 2. Create a Component in FlutterFlow
In FlutterFlow, you can create a component from scratch by clicking the **Add Button** in the **Page Selector** or **Widget Tree** tab and choosing **New Component**. You can also convert an existing widget into a reusable component by right-clicking on the root widget and selecting **Convert to Component**.
To create a `ResponsiveNavbarWithDropdownsAndSearch` component that automatically adjusts to various screen sizes, includes multi-level dropdown menus with smooth transition animations, and integrates a search bar with autocomplete functionality, you can combine elements from different frameworks and libraries. Here’s a detailed approach:

### 1. **Base Component Structure**
Use a framework like React to create the base structure of the navbar. This will help in managing the component's state and handling interactions.

```jsx
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { ReactComponent as Hamburger } from '../../assets/icons/hamburger.svg';
import { ReactComponent as Brand } from '../../assets/icons/logo.svg';

const Navbar = () => {
  const [showNavbar, setShowNavbar] = useState(false);
  const handleShowNavbar = () => {
    setShowNavbar(!showNavbar);
  };
### Citations https://nx.dev/nx-api/react/generators/component https://docs.flutterflow.io/resources/ui/components/creating-components/ https://docs.uniform.app/docs/learn/tutorials/csk/create-component https://www.npmjs.com/package/new-component
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a navigation component for a chat app, you can use various tools and frameworks depending on your development environment. Here’s a general approach using React Native and the `react-native-gifted-chat` library, which is commonly used for chat applications:

### Step-by-Step Guide

1. **Set Up Your Project**:
   - Initialize a new React Native project using `create-react-native-app`.

2. **Install `react-native-gifted-chat`**:
   ```bash
   npm install react-native-gifted-chat
   ```

3. **Create the Navigation Component**:
   - Create a new file for your navigation component, e.g., `ChatNavigation.js`.

4. **Implement the Navigation Component**:
   - Use the `react-native-gifted-chat` library to create a chat interface and handle navigation between different chat screens.

Here’s an example implementation:

```javascript
// ChatNavigation.js
import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import GiftedChat from 'react-native-gifted-chat';

const ChatNavigation = ({ navigation }) => {
  const [messages, setMessages] = useState([]);

  useEffect(() => {
    // Initialize messages array
    setMessages([
      {
        _id: 1,
        text: 'Hello!',
        createdAt: new Date(Date.UTC(2016, 5, 11, 17, 20, 0)),
        user: {
          _id: 2,
          name: 'React Native',
          avatar: 'https://facebook.github.io/react/img/logo_og.png',
        },
      },
    ]);
  }, []);

  const handleSendMessage = (message) => {
    setMessages((previousMessages) => [...previousMessages, message]);
  };

  const handleNavigateToChatScreen = () => {
    navigation.navigate('ChatScreen');
  };

  return (
    <View style={{ flex: 1 }}>
      <TouchableOpacity onPress={handleNavigateToChatScreen}>
        <Text style={{ fontSize: 24, textAlign: 'center', margin: 20 }}>
          Go to Chat Screen
        </Text>
      </TouchableOpacity>
      <GiftedChat
        messages={messages}
        onSend={(message) => handleSendMessage(message)}
        user={{
          _id: 1,
          name: 'User',
          avatar: 'https://via.placeholder.com/150',
        }}
      />
    </View>
  );
};

export default ChatNavigation;
```

5. **Integrate with React Navigation**:
   - In your main app file, integrate this component with `react-navigation`.

### Example Integration

```javascript
// App.js
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import ChatNavigation from './ChatNavigation';

const Stack = createStackNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="ChatNavigation">
        <Stack.Screen name="ChatNavigation" component={ChatNavigation} />
        <Stack.Screen name="ChatScreen" component={ChatScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default App;
```

### Conclusion

This approach provides a basic navigation component for a chat app using React Native and `react-native-gifted-chat`. You can further customize and extend this component to fit your specific needs.

### Additional Tips

- For more advanced customization, you can use additional props provided by `react-native-gifted-chat`, such as `renderChatFooter`, `renderInputToolbar`, etc.
- If you need more complex navigation, consider using other libraries like `react-navigation` or `react-router-dom`.

### Citations

1. - UI Bakery Docs: "Add navigation to application" (2024-10-07)
2. - NPM: `react-native-gifted-chat` documentation (2024-10-01)
3. - Nocodable: "How to make a navigation with Tabs in Bubble" (2024-09-24)

### Citations List

- UI Bakery Docs: "Add navigation to application" (2024-10-07)
- Nocodable: "How to make a navigation with Tabs in Bubble" (2024-09-24)
- NPM: `react-native-gifted-chat` documentation (2024-10-01)
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: generate, navigation component, chat app
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Navigation
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: generate a navigation compoenent for a chat app
  EXTRACTED KEYWORDS: generate, navigation component, chat app

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  