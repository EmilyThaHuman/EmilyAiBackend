
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: geenrate a highly animatedbutton using MUI and framer motion
generate a reusable modal component with motion animations
{
  "content": "# Reusable Modal Component with Motion Animations

## Explanation
This React component is a reusable modal that incorporates motion animations using Framer Motion. The modal is designed to provide a flexible and interactive way to display content with engaging animations for a better user experience.

## React Component Code
```jsx
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';

const Modal = ({ isOpen, onClose, children }) => {
  const modalVariants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.3 } },
  };
generate  react prompt templatre dispklay dashboard with dark theme and animations using framer motion
Generate a react tool dial component with using framer motion for animations
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The conversation details a user's request for generating a black and white modal login dialog for an admin dashboard and the assistant's provision of a detailed explanation and React component code to fulfill this request. The conversation evolves from a general request for a black and white gradient component for an admin dashboard to a more specific modal login dialog, including code, usage examples, and references. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 67190aa7f0b89915f78befa51]: An explanation and React component code for a black and white modal login dialog for an admin dashboard, including usage examples and references to Bootstrap and WordPress documentation.
[Summary 2][id 67190a8af0b89915f78befa11]: User requests the generation of a black and white modal login dialog for an admin dashboard.
[Summary 3][id 671909791a48f4b36d490be81]: User requests the generation of a black and white modal dialog for an admin dashboard.
[Summary 4][id 671907b9438c78f28556f90a1]: User requests a black and white gradient dialog for an admin dashboard.
[Summary 5][id 671905c1ba36947b909d64c21]: User requests the generation of a black and white gradient admin dashboard component. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a reusable dialog component with data display, you can use React and Tailwind CSS, similar to the approach described in. Here’s a concise implementation:

1. **Create the Modal Component**:
   ```javascript
   // Modal.js
   import React, { useState } from 'react';
   import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';

   const Modal = ({ isOpen, onClose, children }) => {
     if (!isOpen) return null;
     return (
       <Dialog open={isOpen} onClose={onClose}>
         <DialogTitle>{children}</DialogTitle>
         <DialogContent>{children}</DialogContent>
         <DialogActions>
           <Button onClick={onClose}>Close</Button>
         </DialogActions>
       </Dialog>
     );
   };

   export default Modal;
   ```

2. **Create Specific Modal Components**:
   - **Alert Modal**:
     ```javascript
     // AlertModal.js
     import React from 'react';
     import Modal from './Modal';
export default Modal;
   ```

2. **Create the Data Table Component**:
   - Use a library like Material React Table (MRT) or TanStack Table to create the data table. For simplicity, let’s use MRT.

   ```jsx
   import { useMemo, useState } from 'react';
   import { MaterialReactTable, useMaterialReactTable } from 'material-react-table';
To generate a modal component with a data table, you can combine the concepts from the provided resources. Here’s a step-by-step guide:

1. **Create the Modal Component**:
   - Use React to build a reusable modal component, similar to the example in. This will include properties for title, body content, and actions.

   ```jsx
   import React, { useState } from 'react';

   const Modal = ({ open, titleContent, cancelFn, primaryFn, content }) => {
     if (!open) return null;

     return (
       <div className="modalBackground">
         <div className="modalContainer">
           <div className="title">
             {titleContent}
             <button onClick={cancelFn}>X</button>
           </div>
           <div className="content">
             {content}
           </div>
           <div className="actions">
             <button onClick={primaryFn}>Confirm</button>
           </div>
         </div>
       </div>
     );
   };

   export default Modal;
   ```
To generate a modal component for displaying icon previews in React, you can follow these steps:

1. **Set Up the Project**:
   - Create a new React application using `npx create-react-app react-app`.
   - Install necessary dependencies: `npm install tailwindcss postcss autoprefixer react-icons`.

2. **Install Tailwind CSS**:
   - Initialize Tailwind CSS using `npx tailwindcss init -p`.
   - Configure Tailwind CSS in `tailwind.config.js`.

3. **Create the Modal Component**:
   - Define a reusable Modal component that controls its visibility.
   - Use Tailwind CSS for styling the modal.

Here is an example of how you can create the modal component:

```javascript
// App.js
import React, { useState } from 'react';
import './App.css';
import { FaBox, FaTag, FaUsers } from 'react-icons/fa';
const handleOpenModal = () => {
       setModalOpen(true);
     };

     const handleCloseModal = () => {
       setModalOpen(false);
     };

     return (
       <div>
         <button onClick={handleOpenModal}>Open Modal</button>
         {modalOpen && (
           <Modal
             open={modalOpen}
             titleContent={<h1>Data Table</h1>}
             cancelFn={handleCloseModal}
             primaryFn={() => console.log('Data Table Confirmed')}
             content={
               <DataTable data={data} />
             }
           />
         )}
       </div>
     );
   };

   export default App;
   ```

This setup will create a modal component with a data table inside it. The `DataTable` component uses Material React Table to display the data in a table format, and the `Modal` component manages the visibility and actions of the modal.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a highly animated modal using Material-UI (MUI) and Framer Motion, you can follow these steps:

1. **Set Up Framer Motion**:
   - Install Framer Motion if you haven't already: `npm install framer-motion`.
   - Import Framer Motion in your component: `import { motion } from 'framer-motion';`.

2. **Create the Modal Component**:
   - Create a new component for your modal, e.g., `Modal.js`.
   - Use MUI's `Modal` component and wrap it with Framer Motion's `motion.div` to apply animations.

3. **Animate the Modal**:
   - Define the animation variants for opening and closing the modal.
   - Use `initial`, `animate`, and `exit` states to control the animation.

Here’s a basic example:

```jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Modal, ModalProps } from '@mui/material';

interface AnimatedModalProps extends ModalProps {
  isOpen: boolean;
}
```jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Modal, ModalProps } from '@mui/material';

interface AnimatedModalProps extends ModalProps {
  isOpen: boolean;
}

const AnimatedModal = ({ isOpen, ...props }: AnimatedModalProps) => {
  const variants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 },
  };

  return (
    <motion.div
      initial={isOpen ? 'animate' : 'initial'}
      animate={isOpen ? 'animate' : 'exit'}
      transition={{ duration: 0.3 }}
      style={{ position: 'fixed', zIndex: 1000 }}
    >
      <Modal {...props} />
    </motion.div>
  );
};

export default AnimatedModal;
```

4. **Use the Animated Modal**:
   - In your main component, control the `isOpen` state and pass it to the `AnimatedModal`.

```jsx
import React, { useState } from 'react';
import { Button } from '@mui/material';
import AnimatedModal from './AnimatedModal';
```jsx
import React, { useState } from 'react';
import { Button } from '@mui/material';
import AnimatedModal from './AnimatedModal';

const App = () => {
  const [open, setOpen] = useState(false);

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  return (
    <div>
      <Button onClick={handleOpen}>Open Modal</Button>
      <AnimatedModal open={open} onClose={handleClose}>
        {/* Your modal content here */}
        <h2>Animated Modal</h2>
        <button onClick={handleClose}>Close</button>
      </AnimatedModal>
    </div>
  );
};

export default App;
```

This setup will give you a highly animated modal using MUI and Framer Motion.
To create a highly animated button using MUI and Framer Motion, you can follow these steps:

1. **Install Framer Motion**:
   ```bash
   npm install framer-motion
   ```

2. **Import Framer Motion**:
   ```javascript
   import { motion } from 'framer-motion';
   ```

3. **Create the Animated Button Component**:
   ```javascript
   import { Button } from '@mui/material';
   import { motion } from 'framer-motion';

   export default function AnimatedButton({ children, ...props }) {
     return (
       <motion.div
         initial={{ opacity: 0, scale: 0.5 }}
         animate={{ opacity: 1, scale: 1 }}
         transition={{ duration: 0.3 }}
         style={{ display: 'inline-block' }}
       >
         <Button {...props}>{children}</Button>
       </motion.div>
     );
   }
   ```
5. **Integrate with MUI Components**:
   You can use this animated button component within your MUI application as needed.

This approach will give you a highly animated button with smooth transitions and customizable effects using Framer Motion.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a highly animated modal using Material-UI (MUI) and Framer Motion, you can follow these steps:

1. **Set Up Framer Motion**:
   - Install Framer Motion if you haven't already: `npm install framer-motion`.
   - Import Framer Motion in your component: `import { motion } from 'framer-motion';`.

2. **Create the Modal Component**:
   - Create a new component for your modal, e.g., `Modal.js`.
   - Use MUI's `Modal` component and wrap it with Framer Motion's `motion.div` to apply animations.

3. **Animate the Modal**:
   - Define the animation variants for opening and closing the modal.
   - Use `initial`, `animate`, and `exit` states to control the animation.

Here’s a basic example:

```jsx
import React from 'react';
import { motion } from 'framer-motion';
import { Modal, ModalProps } from '@mui/material';

interface AnimatedModalProps extends ModalProps {
  isOpen: boolean;
}

const AnimatedModal = ({ isOpen, ...props }: AnimatedModalProps) => {
  const variants = {
    initial: { opacity: 0, scale: 0.9 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.9 },
  };

  return (
    <motion.div
      initial={isOpen ? 'animate' : 'initial'}
      animate={isOpen ? 'animate' : 'exit'}
      transition={{ duration: 0.3 }}
      style={{ position: 'fixed', zIndex: 1000 }}
    >
      <Modal {...props} />
    </motion.div>
  );
};

export default AnimatedModal;
```

4. **Use the Animated Modal**:
   - In your main component, control the `isOpen` state and pass it to the `AnimatedModal`.

```jsx
import React, { useState } from 'react';
import { Button } from '@mui/material';
import AnimatedModal from './AnimatedModal';

const App = () => {
  const [open, setOpen] = useState(false);

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  return (
    <div>
      <Button onClick={handleOpen}>Open Modal</Button>
      <AnimatedModal open={open} onClose={handleClose}>
        {/* Your modal content here */}
        <h2>Animated Modal</h2>
        <button onClick={handleClose}>Close</button>
      </AnimatedModal>
    </div>
  );
};

export default App;
```

This setup will give you a highly animated modal using MUI and Framer Motion.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: generate, highly, animated, modal, MUI, framer motion
      | UI Libraries: React, MUI
      | JS Libraries: React, framer motion
      | Component Types: modal
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: geenrate a highly animated modal using MUI and framer motion
  EXTRACTED KEYWORDS: generate, highly, animated, modal, MUI, framer motion

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  