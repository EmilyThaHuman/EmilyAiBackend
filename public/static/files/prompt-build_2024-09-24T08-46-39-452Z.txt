
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices – be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=🪄" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: 
When responding to queries about React styled components:

1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

2. Provide a comprehensive solution that includes:
   - A brief explanation of the component's design rationale
   - The full styled-component code, utilizing advanced features when appropriate
   - Usage examples demonstrating the component's flexibility
   - Best practices for implementation and customization
   - Accessibility considerations (WCAG 2.1 AA compliance)

3. Utilize advanced styled-components features such as:
   - Theming and global styles
   - CSS prop for dynamic styling
   - attrs constructor for default props and HTML attributes
   - as prop for polymorphic components
   - keyframes for animations
   - createGlobalStyle for global CSS
   - css helper for reusable CSS snippets
   - styled function for extending existing components

4. Incorporate modern CSS techniques like:
   - CSS Grid and Flexbox for layout
   - CSS Custom Properties (variables) for theming
   - CSS Modules for local scoping when appropriate
   - Media queries for responsive design
   - CSS-in-JS techniques for dynamic styling based on props or state

5. Optimize for performance by:
   - Using memoization techniques (React.memo, useMemo) when appropriate
   - Leveraging CSS containment for improved rendering performance
   - Implementing code-splitting for larger component libraries

6. Ensure code quality by:
   - Following React and styled-components best practices
   - Using consistent naming conventions
   - Providing clear comments for complex logic
   - Suggesting unit and integration tests for the component

7. Offer guidance on:
   - Component composition and reusability
   - Integration with design systems
   - Potential pitfalls and how to avoid them
   - Performance optimization techniques

8. Always format your response using Markdown syntax.
Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
Here's a quick reference:

	---

# Heading 1
## Heading 2
### Heading 3

**Bold text**
*Italic text*

- Bullet list item
1. Numbered list item

`Inline code`

```javascript
// Code block
const example = 'This is a code block';
```

[Link text](URL)

> Blockquote

| Table | Header |
|-------|--------|
| Cell  | Cell   |

For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Generate a data table component for organizing a list of data related to UI componets
Generate a file manager component
Generate a data table component for listing chat messages
Generate a data table component for a vector db list
uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" className=\"py-3 px-6\">Component Name</th>\n            <th scope=\"col\" className=\"py-3 px-6\">Description</th>\n            <th scope=\"col\" className=\"py-3 px-6\">Category</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <tr className=\"bg-white border-b dark:bg-gray-800 dark:border-gray-700\" key={index}>\n              <td className=\"py-4 px-6\">{item.name}</td>\n              <td className=\"py-4 px-6\">{item.description}</td>\n              <td className=\"py-4 px-6\">{item.category}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataTable;\n```\n\n## Usage Example\n\nAssuming you have a list of UI components as your data, here's how you could use the `DataTable` component in your application:\n\n```jsx\nimport React, { useState, useEffect }
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: To generate a data table component for organizing workspace and folder data, you can leverage the capabilities of Databricks, as described in the documentation provided by Databricks. Here is a concise guide:

1. **Create a Workspace**: Start by creating a Databricks workspace, which organizes objects like notebooks, libraries, dashboards, and experiments into folders and provides access to data objects and computational resources.

2. **Define Datasets**: Use the **Data** tab to define the underlying datasets for your workspace. You can create new queries against tables or views, or use existing Unity Catalog tables or views.

3. **Organize with Folders**: Organize your datasets and notebooks into folders within your workspace. This allows for easy management and access to data objects.

4. **Use Unity Catalog**: Utilize Unity Catalog for centralized access control, auditing, lineage, and data discovery capabilities. This helps in managing data across your workspaces effectively.
### Summary

By following these steps, you can create a data table component for organizing workspace and folder data in Databricks. This involves creating a workspace, defining datasets, organizing them into folders, and using notebooks to display the data in a table format.

### Citations https://support.workbench.verily.com/docs/getting_started/workspace_quickstart/ https://app.cnvrg.io/docs/core_concepts/workspaces.html https://experienceleague.adobe.com/en/docs/analytics/export/analytics-data-feed/create-feed https://docs.databricks.com/en/getting-started/concepts.html https://docs.databricks.com/en/dashboards/index.html
To generate a data table component for organizing a list of data related to UI components, you can use the following guidelines and example code from the provided sources:

### Key Components and Features

1. **Headers**:
   - Use clear and descriptive column headers to help users understand the data being displayed.

2. **Rows and Cells**:
   - Ensure each row and cell is well-defined and easy to read. Use proper formatting and ensure there is enough contrast between text and background colors for accessibility.

3. **Pagination**:
   - Implement pagination to handle large datasets effectively. This helps in splitting the data into manageable pages.

4. **Filtering and Sorting**:
   - Add filtering and sorting features to allow users to quickly find specific data. This can be achieved through dropdown menus or search bars.
To generate a data table component for organizing chatbot session data, you can use a combination of properties and attributes from various chatbot platforms and frameworks. Here is a sample data table component that includes relevant fields for organizing chatbot session data:
To generate a data table component for organizing a list of chat bot UI data, you can use a tool like Form.io, which provides a Data Table as a Select Component. Here’s a step-by-step guide to create such a component:

1. **Add the Data Source Component**:
   - Start by adding the Data Source component to the builder.
   - Within the settings, click the **Fetch** tab and add the URL of the JSON file containing the list of chat bot UI data.

2. **Configure the Trigger Component**:
   - Add a Checkbox and name the component 'Populate'.
   - Open the Data Source settings and click the **Trigger** tab.
   - Select the 'Populate' checkbox from the form as the trigger to execute the event.

3. **Define the Triggered Event**:
   - Set the Triggered Event to match the Data Source event, for example, 'populateState'.
  EXTRACTED KEYWORDS: data table, component, organizing, file folders, workspaces
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: data table
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a data table component for organizing file folders in wowrkspaces

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To generate a data table component for organizing file folders in workspaces, you can leverage tools like Tableau, which offers robust data visualization capabilities and folder organization features. Here’s a step-by-step guide using Tableau:

1. **Create Folders**:
   - Right-click on an empty space in the Data Pane and select "Create" > "Folder." Name the folder based on the category or theme you want to organize.

2. **Drag and Drop Organization**:
   - Simply drag and drop fields into the created folders. This intuitive process enables users to categorize and organize elements effortlessly.

3. **Nested Folders**:
   - Folders can be nested within each other, allowing for a hierarchical structure. This is useful for creating subcategories and further refining the organization of fields.

4. **Renaming and Reordering**:
   - Right-click on folders to rename them or adjust their order. This customization ensures that folders are labeled in a way that aligns with the user’s workflow.

5. **Color Coding**:
   - Folders can be color-coded for visual distinction. Right-click on a folder, choose “Folder Color,” and select a color to enhance visual organization.

6. **Filtering the Data Pane**:
   - The search bar in the Data Pane allows users to filter the displayed fields based on keywords. This feature, combined with folders, streamlines the process of locating specific fields within large datasets.

### Example Implementation

#### Tableau Data Pane Organization

**Steps:**
1. **Create Folders:**
   - Right-click on an empty space in the Data Pane.
   - Select "Create" > "Folder."
   - Name the folder (e.g., "Geography").

2. **Drag and Drop Fields:**
   - Drag dimensions and measures related to geography into the "Geography" folder.

3. **Nested Folders:**
   - Create subfolders within "Geography" (e.g., "Countries," "Cities").
   - Drag specific fields into these subfolders.

4. **Color Coding:**
   - Right-click on the "Geography" folder.
   - Choose "Folder Color" and select a color for better visual distinction.

5. **Filtering:**
   - Use the search bar in the Data Pane to filter fields based on keywords.

By following these steps, you can create a structured and organized workspace in Tableau, enhancing data exploration efficiency and maintaining a logical grouping of fields.

### Additional Tools for Workspace Organization

While Tableau is ideal for data visualization and folder organization, other tools like Azure Machine Learning and Databricks offer different features for managing files and dashboards:

- **Azure Machine Learning:** Allows creating and managing files in the workspace, including sharing and deleting files.
- **Databricks:** Enables organizing dashboards into folders and defining datasets for dashboards.

These tools can complement Tableau by providing additional organizational capabilities tailored to specific needs in data management and visualization.

### Summary

To generate a data table component for organizing file folders in workspaces, use Tableau's robust folder organization features. Create folders, drag and drop fields, use nested folders, rename and reorder folders, color-code them, and filter the Data Pane for efficient organization. For additional workspace management needs, consider integrating with Azure Machine Learning or Databricks.

---

### Citations: Tableau, "Structuring Clarity: Organizing the Tableau Data Pane with Folders," 2024-08-27. Microsoft Azure, "Create and manage files in your workspace - Azure Machine Learning," 2024-09-03. Databricks, "Dashboards | Databricks on AWS," 2024-09-23.

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## Formatting Guide:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Usage Examples**: Provide usage examples as separate code blocks in markdown.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## Example Response Format:

  ```json
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```,
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }
  ```

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  