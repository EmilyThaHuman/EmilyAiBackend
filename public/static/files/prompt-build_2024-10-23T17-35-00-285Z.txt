
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a dashboard for viewing chat session data like promtps and messages
Generate a dashboard to display dashboard data related to a chat bot
Generate a dashboard component for displaying UI data for my project
Generate a dashboard component for displaying UI data for my project including icons for the components and options for organziing the data
Generate a dashboard component for displaying UI data for my project including icons for the components
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The user has sent five messages within a short time frame, all containing garbled or nonsensical text. These messages seem to follow a sequential order based on their timestamps, indicating a series of rapid, consecutive postings by the user in the same session. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671900717facfe6b62bde2451]: Message contains nonsensical text, representing a part of a rapid series of postings by the user.
[Summary 2][id 6718fc4e673133571cffa6531]: Contains garbled text; appears right before the final message in a quick succession of user posts.
[Summary 3][id 6718fb450b982f4ff0ec70601]: Includes nonsensical text, forming part of a sequence of messages posted in quick succession.
[Summary 4][id 6718f9c55200b9b85ddeceeb1]: Message features garbled text, indicating continuous, rapid messaging activity by the user.
[Summary 5][id 6718f9090ae1d00431b7bab01]: Contains nonsensical text, marking one of the earliest messages in a quick series of posts by the user. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: ### Example Dashboard

**Header**
- **Title**: "Chatbot Analytics Dashboard"
- **Navigation Icons**: User profile, settings, help, and logout options

**Sidebar Navigation**
- **Main Menu**:
  - **Overview**
  - **Engagement**
  - **Conversions**
  - **Retention**
  - **Advanced Analytics**
  
  - **Submenu Options**:
    - **Metrics**
    - **Trends**
    - **Reports**

**Content Area**
- **Overview Section**
  - **Key Metrics**:
    - Engagement Rate
    - Satisfaction Score
    - Leads Captured
  - **Charts and Graphs**: A line chart showing the trend of engagement rate over time.

- **Engagement Section**
  - **User Engagement**:
    - 50% of users interacted with the chatbot
  - **Message Click-Through Rate**:
    - 30% of visitors reached a specific message

- **Conversions Section**
  - **Leads Captured**:
    - 200 visitors left their email address
  - **Conversion Rate**:
    - 20% of interactions resulted in a conversion
To generate a dashboard layout for displaying your chatbot app stats with a sidebar navigation, header, and content area, consider the following structure:

### Dashboard Layout

1. **Header**
   - **Title**: "Chatbot Analytics Dashboard"
   - **Navigation Icons**: User profile, settings, help, and logout options

2. **Sidebar Navigation**
   - **Main Menu**: 
     - **Overview**
     - **Engagement**
     - **Conversions**
     - **Retention**
     - **Advanced Analytics**
   - **Submenu Options**:
     - Each main menu item can have sub-options like "Metrics," "Trends," "Reports," etc.
To generate a data table component for organizing and managing chat session history, you can use a combination of tools and techniques from different platforms. Here’s a step-by-step approach:

1. **Data Preparation**:
   - Use tools like Splunk Table Views to prepare and filter your data without needing to know SPL (Structured Query Language) queries.
   - If you're dealing with structured data, you can use Microsoft Dataverse for organizing data entities and tables, which supports schema information and operations like retrieval and update.

2. **Visualization**:
   - Utilize Grafana’s table visualization to display your data in a flexible and customizable format. This can include various data types such as tables, time series, annotations, and raw JSON data.
This data table component helps organize and track key information about each chat session, including user interactions, chatbot responses, and context.

### References:
1. **Azure OpenAI Quickstart**: For using Azure OpenAI models with your own data.
2. **Dialogflow CX**: For managing agent data and conversation history.
3. **Chatbot API Guide**: For understanding chatbot architecture and session management.

### Citations:
1.
2.
3.
To generate a data table component for chat results, you can use a combination of HTML and JavaScript, leveraging libraries like UI Bakery or Grafana, which provide robust table components. Here’s a simplified example using HTML and JavaScript:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Results Table</title>
    <style>
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a dashboard for viewing chat session data like prompts, messages, and token count, you can use various tools and platforms that offer customizable dashboards for chat analytics. Here’s a concise overview:

1. **Langfuse**: Langfuse provides a way to group traces together using `Sessions` to see a simple session replay of the entire interaction. You can add a `sessionId` when creating a trace to group related interactions.

2. **Live Helper Chat**: Live Helper Chat offers a dashboard where operators can manage chats, including pending and active chats, bot chats, and closed chats. However, it does not specifically track prompts, messages, or token count.
To create a custom dashboard specifically for viewing chat session data like prompts, messages, and token count, you would need to integrate various tools. Here’s a high-level approach:

- **Data Collection**: Use a tool like Langfuse to collect data on chat sessions, including prompts and messages.
- **Data Processing**: Process the collected data to extract relevant metrics such as token count.
- **Dashboard Creation**: Utilize a platform like Amazon Connect or a custom solution with tools like Google Analytics to create a dashboard that displays these metrics.

### Example Dashboard Components

1. **Session Overview**:
   - Display the session ID.
   - Show the number of prompts and messages within the session.

2. **Prompt Analysis**:
   - List all prompts with their timestamps.
   - Highlight any patterns or anomalies in prompt usage.

3. **Message Analysis**:
   - Display all messages sent during the session.
   - Track the token count for each message.
To generate a dashboard for viewing chat session data like prompts and messages, you can use a combination of tools and platforms. Here’s a step-by-step guide:

### 1. **Crisp Analytics**
**For Chat Session Data:**
- **Conversations Over Time:** Track the number of conversations per day to monitor chat activity over time.
- **Channels:** Monitor the different channels (chat, email, WhatsApp) and review the most popularly used ones.
- **Segments Used Over Time:** Track the usage frequency of segments in conversations to understand user interactions.

### 2. **Custom Dashboard with Solace PubSub+ Insights**
**For Advanced Monitoring:**
- **Message Flow Trends Dashboard:** Use this dashboard to identify messaging trends, including total messages sent, messages sent over time, and incoming message rates.
- **Message Spool Monitor Count & Status:** Monitor the status of message-related monitors to track message flow and potential issues.
To generate a dashboard to display data related to your chatbot app, such as tokens, message history, and prompt history, you can use the following tools:

1. **Zapier with ChatGPT**:
   - Zapier allows you to create dashboards and integrate various data sources, including chatbot interactions. You can use ChatGPT to analyze and display data like tokens, message history, and prompt history. For example, you can create a dashboard page to display your data with buttons to change it if needed, like a personal budget planner.

2. **BlazeSQL AI**:
   - BlazeSQL AI can connect to your database and generate insights based on SQL queries. You can use it to extract and display data related to your chatbot app, such as tokens and message history. It supports various SQL databases and allows for hyper-personalized dashboards.
3. **Amazon Connect**: Amazon Connect dashboards provide real-time and historical metrics about contact center performance. While not specifically designed for chat sessions, it could be customized to track various metrics related to chat interactions. You can customize dashboards with filters for time ranges, benchmarks, and more.

4. **Tidio Chatbot Analytics**: Tidio offers advanced chatbot analytics that track key metrics such as engagement rate, satisfaction score, and conversation volumes. However, it does not directly track prompts, messages, or token count in chat sessions.

### Custom Dashboard Solution

To create a custom dashboard specifically for viewing chat session data like prompts, messages, and token count, you would need to integrate various tools. Here’s a high-level approach:
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a dashboard for viewing chat session data like prompts, messages, and token count, you can use various tools and platforms that offer customizable dashboards for chat analytics. Here’s a concise overview:

1. **Langfuse**: Langfuse provides a way to group traces together using `Sessions` to see a simple session replay of the entire interaction. You can add a `sessionId` when creating a trace to group related interactions.

2. **Live Helper Chat**: Live Helper Chat offers a dashboard where operators can manage chats, including pending and active chats, bot chats, and closed chats. However, it does not specifically track prompts, messages, or token count.

3. **Amazon Connect**: Amazon Connect dashboards provide real-time and historical metrics about contact center performance. While not specifically designed for chat sessions, it could be customized to track various metrics related to chat interactions. You can customize dashboards with filters for time ranges, benchmarks, and more.

4. **Tidio Chatbot Analytics**: Tidio offers advanced chatbot analytics that track key metrics such as engagement rate, satisfaction score, and conversation volumes. However, it does not directly track prompts, messages, or token count in chat sessions.

### Custom Dashboard Solution

To create a custom dashboard specifically for viewing chat session data like prompts, messages, and token count, you would need to integrate various tools. Here’s a high-level approach:

- **Data Collection**: Use a tool like Langfuse to collect data on chat sessions, including prompts and messages.
- **Data Processing**: Process the collected data to extract relevant metrics such as token count.
- **Dashboard Creation**: Utilize a platform like Amazon Connect or a custom solution with tools like Google Analytics to create a dashboard that displays these metrics.

### Example Dashboard Components

1. **Session Overview**:
   - Display the session ID.
   - Show the number of prompts and messages within the session.

2. **Prompt Analysis**:
   - List all prompts with their timestamps.
   - Highlight any patterns or anomalies in prompt usage.

3. **Message Analysis**:
   - Display all messages sent during the session.
   - Track the token count for each message.

4. **Performance Metrics**:
   - Track engagement rates based on prompt and message interactions.
   - Display satisfaction scores from human-in-the-loop evaluations.

By integrating these components, you can create a comprehensive dashboard tailored to your specific needs for analyzing chat session data.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: dashboard, viewing, chat session data, prompts, messages, token count
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Dashboard, Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a dashboard for viewing chat session data like promtps and messages and token count
  EXTRACTED KEYWORDS: dashboard, viewing, chat session data, prompts, messages, token count

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  