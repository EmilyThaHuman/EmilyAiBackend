
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: generate  react prompt templatre dispklay dashboard with dark theme and animations using framer motion
"content": "# React Dashboard with Dark Theme and Animations Using Framer Motion\n\n## Component Explanation\nThis React dashboard component is designed to showcase a modern and intuitive user interface with a dark theme, enhanced by smooth animations using Framer Motion. The dark theme provides a sleek, professional look that's easier on the eyes, especially in low-light environments. Framer Motion is utilized to add engaging animations, making the user experience more dynamic and responsive.\n\n## Code\n```jsx\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Dashboard = () => {\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      className=\"min-h-screen bg-gray-800 text-white p-8\"\n    >\n      <h1 className=\"text-4xl mb-4\">Dashboard</h1>\n      {/* Dashboard Content Here */}\n    </motion.div>\n  );\n};\n\nexport default Dashboard;\n```\n\n## Usage Example\nTo integrate
Generate a react input component with automatic-text animation
"type": "markdown",
  "references": ["https://reactjs.org/", "https://tailwindcss.com/", "https://www.framer.com/api/motion"]
}
Generate a react tool dial component with using framer motion for animations
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages are requests for generating React components, including basic button components, a button component specifically for file uploads, and a data table component aimed at organizing list data and UI library documents for AI agent creation. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 670c30063a88f6a7d8fcc4131]: User requests generation of a basic React button component.
[Summary 2][id 670c1fc059ab56a3c92c10fe1]: User requests creation of a React button component designed for file uploads.
[Summary 3][id 670c1e0a59ab56a3c92c10ee1]: Request for generating a basic React button component, similar to the first request.
[Summary 4][id 670af2f746ab40ecae9bb9f01]: User seeks to generate a data table component for managing lists of data and UI library documents for AI agent creation.
[Summary 5][id 670af210f6d3b57023a1f9791]: Request for generating a general React component. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: <!-- JavaScript for theme toggle and other functionality -->
     <script src="script.js"></script>
   </body>
   </html>
   ```

2. **CSS for Dark Theme**:
   - Define the dark theme styles using CSS variables or Tailwind CSS.
   
   **Using CSS Variables**:
   ```css
   html.dark {
     --text-color: white;
     --background-color: black;
     --primary-color: #007bff;
     --secondary-color: #6c757d;
   }

   .nav-bar {
     background-color: var(--primary-color);
     color: white;
   }

   .file-list {
     background-color: var(--background-color);
     color: var(--text-color);
   }

   .file-item {
     color: var(--text-color);
   }

   .footer {
     background-color: var(--primary-color);
     color: white;
   }
   ```

   **Using Tailwind CSS**:
   ```css
   @import 'tailwindcss/base';
   @import 'tailwindcss/components';
   @import 'tailwindcss/utilities';

   @layer components {
     .nav-bar {
       @apply bg-primary text-white;
     }
export default App;
   ```

2. **Customize for Dark Theme**:
   ```jsx
   .dark-theme {
     background-color: #333;
     color: #fff;
   }
   ```

3. **Integrate with Microsoft Teams**:
   - Create a custom app in Microsoft Teams that includes the file manager component.
   - Use the `TeamsCollaborationAdmin` URL to add the chat and collaboration settings page to the sitemap.

By following these steps, you can create a chat sidebar in Microsoft Teams that includes a file directory management component with a dark theme.

### Citations
1. https://learn.microsoft.com/en-us/dynamics365/customer-service/administer/configure-teams-chat
2. https://js.devexpress.com/React/Demos/WidgetsGallery/Demo/FileManager/BindingToHierarchicalStructure/MaterialBlueLight/
3. https://www.thebricks.com/resources/how-to-create-a-folder-in-microsoft-teams
"code": "Copy(or ⌘C)<Tooltip title=\"Add\">\n  <Button>Grow</Button>\n</Tooltip>\n<Tooltip\n  TransitionComponent={Fade}\n  TransitionProps={{ timeout: 600 }}\n  title=\"Add\"\n>\n  <Button>Fade</Button>\n</Tooltip>\n<Tooltip TransitionComponent={Zoom} title=\"Add\">\n  <Button>Zoom</Button>\n</Tooltip><Tooltip title=\"Add\">\n  <Button>Grow</Button>\n</Tooltip>\n<Tooltip\n  TransitionComponent={Fade}\n  TransitionProps={{ timeout: 600 }}\n  title=\"Add\"\n>\n  <Button>Fade</Button>\n</Tooltip>\n<Tooltip TransitionComponent={Zoom} title=\"Add\">\n  <Button>Zoom</Button>\n</Tooltip>\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.npm__react-simple-code-editor__textarea:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to
<!-- Footer -->
  <footer class="footer">
    <!-- Footer Content -->
  </footer>

  <!-- JavaScript for theme toggle and other functionality -->
  <script src="script.js"></script>
</body>
</html>
```

#### CSS (Using CSS Variables)
```css
html.dark {
  --text-color: white;
  --background-color: black;
  --primary-color: #007bff;
  --secondary-color: #6c757d;
}

.nav-bar {
  background-color: var(--primary-color);
  color: white;
}

.file-list {
  background-color: var(--background-color);
  color: var(--text-color);
}

.file-item {
  color: var(--text-color);
}

.footer {
  background-color: var(--primary-color);
  color: white;
}
```

#### JavaScript
```javascript
function toggleTheme() {
  document.documentElement.classList.toggle('dark');
}

// Add event listener to toggle button
document.querySelector('.toggle-theme').addEventListener('click', toggleTheme);
```

### Citations
1. Matt Stobbs, "The Complete Guide to Dark Mode with Remix (202
### Tailwind Configuration
Ensure you have Tailwind CSS configured properly in your project by adding the following to your `tailwind.config.js` file:

```javascript
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```

This setup will allow you to use Tailwind CSS utility classes to style your components.

### Running the Application
To run the application, use the command `npm start`. This will start your React application on port 3000, allowing you to see the modal component in action.

### Citations
1. [Geeks for Geeks - Create Category Previews Using React and Tailwind CSS](https://www.geeksforgeeks
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a React text and code file content viewer with syntax highlighting support, animations using Framer, and a dark theme, you can follow these steps:

1. **Choose a Text Editor Component**:
   - Use `@uiw/react-codemirror` for its extensive customization options, performance, and syntax highlighting capabilities.

2. **Implement Syntax Highlighting**:
   - Import the necessary language extensions for syntax highlighting. For example, if you're working with JavaScript, you would need `@codemirror/lang-javascript`.

3. **Customize the Theme**:
   - Use `@uiw/codemirror-themes` to create a custom dark theme for your editor. This involves creating a theme object with settings and styles.

4. **Add Animations with Framer**:
   - Use Framer Motion to add animations to your text and code file viewer. This could include animations for opening and closing the viewer, or highlighting specific lines of code.
To generate a React text and code file content viewer with syntax highlighting support and animations using Framer, you can follow these steps:

1. **Choose a React Component Library**:
   - **React Markdown**: This library can render Markdown text and support syntax highlighting with plugins like `remark-gfm` for GFM features.
   - **@uiw/react-codemirror**: This library offers extensive customization options, including syntax highlighting and linting, making it suitable for complex applications.

2. **Implement Syntax Highlighting**:
   - For syntax highlighting, you can use a library like `react-syntax-highlighter` which integrates well with `react-markdown` or `@uiw/react-codemirror`.
   - If using `react-markdown`, you can pass a custom component for syntax highlighting, such as `react-syntax-highlighter`.
To generate a React text and code file content viewer with syntax highlighting support, you can use the `@uiw/react-codemirror` package, which offers extensive customization options and supports syntax highlighting. Here’s a basic example to get you started:

1. **Install the necessary packages**:
   ```bash
   npm install @uiw/react-codemirror
   ```

2. **Create the React component**:
   ```jsx
   import React from 'react';
   import { Editor, Highlight, ProseMirror } from '@uiw/react-codemirror';
   import { json } from '@codemirror/lang-json';
   import { markdown } from '@codemirror/lang-markdown';

   const CodeViewer = () => {
     const [value, setValue] = React.useState('');
export default CodeViewer;
```

This example integrates `react-markdown` with `react-syntax-highlighter` to provide syntax highlighting for code blocks in MDX files.

### Summary

To generate a React text and code file content viewer with syntax highlighting support, you can use packages like `@uiw/react-codemirror`, `react-ace`, or `react-monaco-editor`. For MDX files, integrating `react-markdown` with syntax highlighting plugins and custom components can provide the desired functionality.
export default TextViewer;
```

### Explanation

- **CodeBlock Component**: This custom component handles code blocks and applies syntax highlighting using `react-syntax-highlighter`. It also uses Framer Motion for animations.
- **TextViewer Component**: This component wraps the `ReactMarkdown` component and applies animations to the entire text viewer using Framer Motion.

This setup allows you to render Markdown text with syntax highlighted code blocks and adds smooth animations using Framer Motion.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a React text and code file content viewer with syntax highlighting support, animations using Framer, and a dark theme, you can follow these steps:

1. **Choose a Text Editor Component**:
   - Use `@uiw/react-codemirror` for its extensive customization options, performance, and syntax highlighting capabilities.

2. **Implement Syntax Highlighting**:
   - Import the necessary language extensions for syntax highlighting. For example, if you're working with JavaScript, you would need `@codemirror/lang-javascript`.

3. **Customize the Theme**:
   - Use `@uiw/codemirror-themes` to create a custom dark theme for your editor. This involves creating a theme object with settings and styles.

4. **Add Animations with Framer**:
   - Use Framer Motion to add animations to your text and code file viewer. This could include animations for opening and closing the viewer, or highlighting specific lines of code.

5. **Example Code**:
   ```jsx
   import { CodeMirror } from '@uiw/react-codemirror';
   import { markdown, markdownLanguage } from '@codemirror/lang-markdown';
   import { languages } from '@codemirror/language-data';
   import { createTheme } from '@uiw/codemirror-themes';
   import { motion } from 'framer-motion';

   const myTheme = createTheme({
     theme: 'dark',
     settings: {
       background: '#2f3436',
       foreground: '#8a8a8a',
       caret: '#e6e6e6',
       selection: '#505050',
       lineHighlight: '#505050',
     },
     styles: [
       { tag: t.comment, color: '#787b8099' },
       { tag: t.variableName, color: '#0080ff' },
       // Other styles
     ],
   });

   const Example = () => {
     const [code, setCode] = useState('your code here');
     const [theme, setTheme] = useState(myTheme);

     const handleThemeChange = () => {
       setTheme(createTheme({
         theme: 'dark',
         settings: {
           background: '#2f3436',
           foreground: '#8a8a8a',
           caret: '#e6e6e6',
           selection: '#505050',
           lineHighlight: '#505050',
         },
         styles: [
           { tag: t.comment, color: '#787b8099' },
           { tag: t.variableName, color: '#0080ff' },
           // Other styles
         ],
       }));
     };

     return (
       <motion.div
         initial={{ opacity: 0 }}
         animate={{ opacity: 1 }}
         transition={{ duration: 0.5 }}
       >
         <CodeMirror
           value={code}
           extensions={[markdown(), myTheme]}
           height="100%"
           width="100%"
         />
         <button onClick={handleThemeChange}>Change Theme</button>
       </motion.div>
     );
   };

   export default Example;
   ```

6. **Run the Application**:
   - Make sure you have installed all the necessary dependencies, including `@uiw/react-codemirror`, `@codemirror/lang-markdown`, and `framer-motion`.

This setup will provide a text and code file content viewer with syntax highlighting, a custom dark theme, and animations using Framer Motion.

### Citations:
1. - https://www.npmjs.com/package/@uiw/react-codemirror
2. - https://www.npmjs.com/package/@uiw/codemirror-themes
3. - https://docusaurus.io/docs/next/markdown-features/react (for Framer Motion integration example)
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: react, text, code file content viewer, syntax highlighting, framer, animations, dark theme
      | UI Libraries: React, Framer
      | JS Libraries: React
      | Component Types: text viewer, code file content viewer
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a react text and code file content viewer with syntax hightlighting support using framer to add animations and give ut a dark theme
  EXTRACTED KEYWORDS: react, text, code file content viewer, syntax highlighting, framer, animations, dark theme

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  