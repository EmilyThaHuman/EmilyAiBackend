
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a message box componeneet for chat messages
Generate a data table component for listing chat messages
Generate a reusable dialog component with data display
"content": "# Message Box Component\n\n## Explanation\n\nThe Message Box Component is designed to display chat messages in a visually appealing and organized manner. It allows users to view messages sent and received, with the ability to send new messages. The component includes styling for differentiating between sent and received messages.\n\n## Code\n```jsx\nimport React, { useState } from 'react';\n\nconst MessageBox = () => {\n  const [messages, setMessages] = useState([\n    { text: 'Hello, how are you?', user: 'Alice' },\n    { text: 'I am good, thanks!', user: 'Bob' },\n  ]);\n\n  const handleSendMessage = (text) => {\n    setMessages((prevMessages) => [...prevMessages, { text, user: 'Alice' }]);\n  };\n\n  return (\n    <div className=\"message-box\">\n      <div className=\"messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={`message ${message.user === 'Alice' ? 'sent' : 'received'}`}> \n            <p>{message.text}</p>\n
Generate a reusable form dialog with a variety of data table components displaying data about chat bots
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: A series of chat messages by a user containing nonsensical text sequences, showing gradual progression in time. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671900717facfe6b62bde2451]: Content of incoherent characters with no meaningful message, dated October 23, 2024.
[Summary 2][id 6718fc4e673133571cffa6531]: Text with random characters, indicating the user's continued interaction in the session, dated October 23, 2024.
[Summary 3][id 6718fb450b982f4ff0ec70601]: Another series of nonsensical characters, representing continued but meaningless user input, dated October 23, 2024.
[Summary 4][id 6718f9c55200b9b85ddeceeb1]: Random character sequence without clear intent, marking an earlier point in the session, dated October 23, 2024.
[Summary 5][id 6718f9090ae1d00431b7ba651]: Early message in the session containing nonsensical characters, recorded on October 23, 2024. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a chat template rendering component, you can use a combination of HTML, CSS, and JavaScript, along with a framework like React or Blazor for more complex applications. Here’s a basic example using HTML and CSS for a chat component, and then an example using React with TypeScript and Socket.io for a more dynamic chat application.

### Basic HTML and CSS Chat Template
By combining these approaches, you can create a comprehensive and reusable form dialog with various data table components displaying data about chat bots.
To generate a data table component for chat results, you can use a combination of HTML and JavaScript, leveraging libraries like UI Bakery or Grafana, which provide robust table components. Here’s a simplified example using HTML and JavaScript:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Results Table</title>
    <style>
        table {
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
{/* Chat Box Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChatBubbleLeftIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Boxes</span>
      </div>

      {/* Chat List Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CommentDotsIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Lists</span>
      </div>

      {/* Dashboard Dropdown Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <BellIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Dashboard Dropdowns</span>
      </div>

      {/* Data Stats Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <UserIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Data Stats</span>
      </div>
To generate a data table component for listing chat messages, you can follow these steps using UI Bakery:

1. **Create the Table Component**:
   - Add a table component to your UI Bakery project.
   - Connect your data source to the table by clicking the **Connect my data** button in the **Data** field of the table.

2. **Set Up Columns**:
   - Add columns for each piece of information you want to display, such as `id`, `sender`, `receiver`, and `text`.

3. **Customize Column Types**:
   - Set the type of each column according to the data type. For example, set `sender` and `receiver` to `Link` if you want to display user profiles, and set `text` to `String`.

4. **Filtering and Sorting**:
   - Add filters to narrow down the data if necessary. For example, you can create a filter to show messages between specific users.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To create a message box component for chat messages, you can use HTML, CSS, and JavaScript. Below is a simple example using React to handle the component creation and state management.

### Message Box Component

```jsx
import React, { useState } from 'react';

const MessageBox = () => {
  const [messages, setMessages] = useState([
    { text: 'Hello, how are you?', user: 'Alice' },
    { text: 'I am good, thanks!', user: 'Bob' },
  ]);

  const handleSendMessage = (text) => {
    setMessages((prevMessages) => [...prevMessages, { text, user: 'Alice' }]);
  };
### CSS Styling

You can add CSS to style the component as follows:

```css
.message-box {
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 500px;
  margin: 0 auto;
}

.messages {
  padding: 10px;
  border-radius: 10px;
  background-color: #f2f2f2;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.message {
  margin-bottom: 10px;
}

.message.sent {
  background-color: #e0e0e0;
  border-radius: 10px;
}

.message.received {
  background-color: #d0d0d0;
  border-radius: 10px;
}

.input-message {
  width: 100%;
  padding: 10px;
  border-radius: 10px;
  border: none;
  margin-top: 10px;
}
```

### Usage

To use this component in your application, simply import it and render it:

```jsx
import React from 'react';
import MessageBox from './MessageBox';

const App = () => {
  return (
    <div>
      <h1>Chat Box</h1>
      <MessageBox />
    </div>
  );
};

export default App;
```

### Citations
const handleSendMessage = (text) => {
    setMessages((prevMessages) => [...prevMessages, { text, user: 'Alice' }]);
  };

  return (
    <div className="message-box">
      <div className="messages">
        {messages.map((message, index) => (
          <div key={index} className={`message ${message.user === 'Alice' ? 'sent' : 'received'}`}>
            <p>{message.text}</p>
          </div>
        ))}
      </div>
      <input
        type="text"
        className="input-message"
        placeholder="Type a message..."
        onKeyUp={(e) => {
          if (e.key === 'Enter') {
            handleSendMessage(e.target.value);
            e.target.value = '';
          }
        }}
      />
    </div>
  );
};

export default MessageBox;
```

### CSS Styling

You can add CSS to style the component as follows:

```css
.message-box {
  display: flex;
  flex-direction: column;
  align-items: center;
  max-width: 500px;
  margin: 0 auto;
}
const App = () => {
  return (
    <div>
      <h1>Chat Box</h1>
      <MessageBox />
    </div>
  );
};

export default App;
```

### Citations

1. React documentation for state management.
2. CSS styling best practices.

### Citations List React documentation for state management. CSS styling best practices.

Note: The above code is a simplified example and can be further customized and enhanced based on specific requirements.
To generate a dialog with Framer Motion animations for displaying chat messages, you can follow these steps:

1. **Set Up Framer Motion**:
   - Ensure you have Framer Motion installed in your React project. You can install it using npm or yarn: `npm install framer-motion` or `yarn add framer-motion`.

2. **Create the Dialog Component**:
   - Create a functional component for the dialog box and use `useAnimation` from Framer Motion to manage the animations.
   - Use `AnimatePresence` from Framer Motion to handle the mounting and unmounting of chat messages.

3. **Animate the Chat Messages**:
   - Use `motion.div` and `motion.p` to animate the div and paragraph elements within the dialog box.
   - Apply transitions and animations using the `animate` prop.

Here’s a simplified example of how you can achieve this:

```jsx
import { motion, AnimatePresence } from 'framer-motion';
import React, { useState } from 'react';
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a message box component with chat history data displayed, you can use a library like HoloViz Panel, which provides tools for creating interactive applications, including chat interfaces. Here’s a concise example of how you might implement it:

### Example Implementation

1. **Install HoloViz Panel**:
   ```bash
   pip install holoviz
   ```

2. **Create the Chat Component**:
   ```python
   import panel as pn
   from panel.chat import ChatMessage

   # Sample chat log
   chat_log = [
       ChatMessage("Hello, how are you?", user="Alice", avatar="😊"),
       ChatMessage("I'm good, thanks!", user="Bob", avatar="👋"),
       ChatMessage("Great How can I assist you today?", user="Alice", avatar="😊")
   ]

   # Create a chat component
   chat_component = pn.Column(
       pn.pane.Markdown("Chat Log"),
       pn.pane.HTML("<hr>"),
       pn.Row(*[pn.pane.Markdown(f"{msg.user}: {msg.content}") for msg in chat_log])
   )

   # Display the chat component
   pn.serve(chat_component, show=True)
   ```

This code snippet creates a simple chat log display using HoloViz Panel. You can customize the appearance and functionality by adding more features, such as user input fields and message sending capabilities.

### Additional Features

- **User Input Field**:
  You can add an input field where users can type messages and send them to the chat log.

  ```python
  user_input = pn.Column(
      pn.Textarea(value="", placeholder="Type your message"),
      pn.Button("Send", button_type="primary")
  )

  def send_message(content):
      chat_log.append(ChatMessage(content, user="User", avatar="👋"))
      chat_component.object = pn.Row(*[pn.pane.Markdown(f"{msg.user}: {msg.content}") for msg in chat_log])

  user_input.button.on_click(send_message)
  ```

- **Message Sending**:
  When the "Send" button is clicked, it appends the new message to the chat log and updates the display.

This approach allows you to create a basic chat interface with a history display, which can be further customized and extended to include more features like persistent chat sessions or AI-powered chat assistants.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: message box, component, chat history, displayed
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: MessageBox, ChatHistory
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: generate a mesage box componenet with chat history data dispalyed
  EXTRACTED KEYWORDS: message box, component, chat history, displayed

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  