
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices – be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=🪄" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: When responding to queries about React:
      1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

      2. Provide a comprehensive solution that includes:
         - A brief explanation of the component's design rationale
         - The full styled-component code, utilizing advanced features when appropriate

      3. Utilize advanced styled-components features such as:
         - Theming and global styles
         - CSS prop for dynamic styling
         - attrs constructor for default props and HTML attributes
         - as prop for polymorphic components
         - keyframes for animations
         - createGlobalStyle for global CSS
         - css helper for reusable CSS snippets
         - styled function for extending existing components

      4. Incorporate modern CSS techniques like:
         - CSS Grid and Flexbox for layout
         - CSS Custom Properties (variables) for theming
         - CSS Modules for local scoping when appropriate
         - Media queries for responsive design
         - CSS-in-JS techniques for dynamic styling based on props or state

      5. Optimize for performance by:
         - Using memoization techniques (React.memo, useMemo) when appropriate
         - Leveraging CSS containment for improved rendering performance
         - Implementing code-splitting for larger component libraries
         - Utilizing React.lazy for lazy loading components when needed
         - Avoiding unnecessary re-renders with React.memo or useMemo
         - Utilizing CSS-in-JS techniques for dynamic styling based on props or state

      6. Ensure code quality by:
         - Following React and styled-components best practices
         - Using consistent naming conventions

      8. Always format your response using Markdown syntax.
      Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
      Here's a quick reference:

         ---

      # Heading 1
      ## Heading 2
      ### Heading 3

      **Bold text**
      *Italic text*

      - Bullet list item
      1. Numbered list item

      `Inline code`

      ```javascript
      // Code block
      const example = 'This is a code block';
      ```

      [Link text](URL)

      > Blockquote

      | Table | Header |
      |-------|--------|
      | Cell  | Cell   |

      For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

      Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Generate a dashboard component for displaying UI data for my project including icons for the componenets
Generate a dashboard component for displaying UI data for my project
"content": "# Dashboard Component for Displaying UI Data\n\nThis React component is designed to display UI data for projects, integrating seamlessly with icons and providing a modern, responsive user experience. Tailored for project management and analytics, it combines interactive elements like charts, calendars, and chat boxes. TailwindCSS ensures a highly customizable and adaptable interface, making it perfect for developers seeking a flexible, efficient way to display complex information.\n\n## Component Code\n\n```javascript\nimport React from 'react';\nimport { Calendar, Chart, ChatBox, Dropdown, DataStats } from 'tailgrids-react';\n\nfunction ProjectDashboard() {\n  return (\n    <div className='flex flex-col h-screen'>\n      <div className='flex flex-row justify-between p-4'>\n        <Calendar />\n        <Chart type='bar' data={projectProgressData} />\n        <ChatBox />\n      </div>\n      <div className='flex flex-row justify-between p-4'>\n        <Dropdown
"content": "# Dashboard Component for Displaying UI Data\n\nThis React dashboard component is designed to serve as a central piece in an application for displaying and managing UI data relevant to projects. The rationale behind its design is to offer a sleek, customizable, and responsive interface for users to interact with their project information efficiently. It leverages the React framework along with TailwindCSS for styling, ensuring a modern and aesthetically pleasing user experience. The component features a dynamic table for organizing and displaying UI component library data, complete with pagination, sorting, and filtering capabilities.\n\n## Component Code\n\n```javascript\nimport React, { useState, useEffect } from 'react';\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Placeholder for data fetching logic\n    setData([{ id: 1, name: 'UI Component #1', status: 'Completed' }, { id: 2, name: 'UI Component #2', status:
Generate a data table component for displaying a list of UI compoennt library data
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: To generate a dashboard component for displaying UI data for your project, including icons for the components, you can use TailGrids React Dashboard Components, which offer a comprehensive set of UI components that are flexible, optimized, and scalable. Here’s how you can approach this:

1. **Choose the Right Components**: Select the necessary components from TailGrids React, such as calendars, charts, chat boxes, dropdowns, data stats, drawers, horizontal menus, maps, popovers, profiles, select boxes, settings pages, steps, table stacks, and vertical navigation bars.

2. **Customize Icons**: TailGrids React components can be customized to include icons. You can use Tailwind CSS to add custom icons or use pre-built icons provided by TailGrids React.

3. **Design the Layout**: Plan the layout of your dashboard to ensure that all components are integrated seamlessly. Use a consistent design pattern to make the dashboard user-friendly and intuitive.
To generate a dashboard component for displaying UI data, you can use a combination of React components and Tailwind CSS, as suggested by TailGrids React Dashboard Components. Here’s a sample component that includes icons for various elements:

### Sample Dashboard Component

```jsx
import React from 'react';
import { CalendarIcon, ChartBarIcon, ChatBubbleLeftIcon, CommentDotsIcon, BellIcon, UserIcon, LinkIcon } from '@heroicons/react/outline';

const DashboardComponent = () => {
  return (
    <div className="flex flex-wrap">
      {/* Calendar Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CalendarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Calendar</span>
      </div>

      {/* Chart Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChartBarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Charts</span>
      </div>
To generate a dashboard component for displaying UI data in your project, you can use various tools and libraries depending on your specific requirements. Here are some steps and recommendations:

1. **Choose a Dashboard Library**:
   - **React Libraries**: For a React-based project, consider using libraries like Luzmo, Material UI (MUI), Tailwind CSS, or Bootstrap 4. Luzmo is particularly noted for its ease of use and customizable styling options, making it suitable for both developers and non-developers.
   - **Salesforce**: If you're using Salesforce, you can integrate dashboards directly into the platform by following the steps outlined in the Salesforce documentation.
   - **Bitrix24**: For Bitrix24, you can use the BI Builder to create and manage dashboards. This tool allows you to edit built-in dashboards or create new ones from scratch.
const projectKpiData = [
  { label: 'KPI 1', value: 80 },
  { label: 'KPI 2', value: 90 },
  { label: 'KPI 3', value: 60 },
];

export default ProjectDashboard;
```

### Citations
1. - TailGrids React Dashboard Components
2. - Top 6 Project Dashboard Tools for Agencies in 2024
3. - React Dashboard Libraries: Which One to Use in 2024?
- **Dropdown Component**: Utilize a dropdown component to provide dropdown-style options for filtering or selecting data in your dashboard.

- **Data Stats Component**: Showcase key performance indicators (KPIs) or metrics through data stats components, ideal for financial dashboards or performance tracking systems.

### Example Code Snippet

Here’s a simplified example of how you might integrate some of these components:

```javascript
import React from 'react';
import { Calendar, Chart, ChatBox, Dropdown } from 'tailgrids-react';
  EXTRACTED KEYWORDS: dashboard component, displaying, UI data, project, icons, components
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: 
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a dashboard component for displaying UI data for my project including icons for the components

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To generate a dashboard component for displaying UI data, you can use a combination of React components and Tailwind CSS, as suggested by TailGrids React Dashboard Components. Here’s a sample component that includes icons for various elements:

### Sample Dashboard Component

```jsx
import React from 'react';
import { CalendarIcon, ChartBarIcon, ChatBubbleLeftIcon, CommentDotsIcon, BellIcon, UserIcon, LinkIcon } from '@heroicons/react/outline';

const DashboardComponent = () => {
  return (
    <div className="flex flex-wrap">
      {/* Calendar Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CalendarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Calendar</span>
      </div>

      {/* Chart Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChartBarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Charts</span>
      </div>

      {/* Chat Box Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChatBubbleLeftIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Boxes</span>
      </div>

      {/* Chat List Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CommentDotsIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Chat Lists</span>
      </div>

      {/* Dashboard Dropdown Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <BellIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Dashboard Dropdowns</span>
      </div>

      {/* Data Stats Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <UserIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Data Stats</span>
      </div>

      {/* Drawer Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <LinkIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Drawers</span>
      </div>

      {/* Horizontal Menu Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for horizontal menu items */}
        {/* Example Icon */}
        {/* <ArrowRightIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Horizontal Menu</span> */}
      </div>

      {/* Map Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for map items */}
        {/* Example Icon */}
        {/* <LocationMarkerIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Maps</span> */}
      </div>

      {/* Popover Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for popover items */}
        {/* Example Icon */}
        {/* <InformationCircleIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Popovers</span> */}
      </div>

      {/* Profile Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for profile items */}
        {/* Example Icon */}
        {/* <UserCircleIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Profiles</span> */}
      </div>

      {/* Select Box Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for select box items */}
        {/* Example Icon */}
        {/* <ChevronDownIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Select Boxes</span> */}
      </div>

      {/* Settings Page Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for settings page items */}
        {/* Example Icon */}
        {/* <CogIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## CONTENT REQUIREMENTS:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## FORMATTING GUIDE: Use the following guide to format messages using Markdown syntax. 
	This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more.
	Ensure to apply the appropriate syntax for the desired formatting.
	Please return final response JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
	Markdown Guide

	Headings:

	# (H1)

	Example: # Heading 1 renders as:

	Heading 1
	## (H2)

	Example: ## Heading 2 renders as:

	Heading 2
	### (H3)

	Example: ### Heading 3 renders as:

	Heading 3
	#### (H4)

	Example: #### Heading 4 renders as:

	Heading 4
	##### (H5)

	Example: ##### Heading 5 renders as:

	Heading 5
	###### (H6)

	Example: ###### Heading 6 renders as:

	Heading 6
	Text Formatting:

	**bold** or __bold__

	Example: **Bold Text** renders as: Bold Text

	*italic* or _italic_

	Example: *Italic Text* renders as: Italic Text

	***bold and italic***

	Example: ***Bold and Italic Text*** renders as: Bold and Italic Text

	~~strikethrough~~

	Example: ~~Strikethrough Text~~ renders as: Strikethrough Text

	`inline code`

	Example: `Inline Code` renders as: Inline Code

	Lists:

	Numbered: Start with 1., 2., etc.

	Example:

	1. Item A
	2. Item B
	Renders as:

	1. Item A
	2. Item B

	Bullet: Start with -, *, or +

	Example:

	- Item A
	* Item B
	+ Item C
	Renders as:

	- Item A
	- Item B
	- Item C

	(It's also possible to indent numbered Lists & bulleted Lists!)

	- Task lists: Start with [ ] (unchecked) or [x] (checked)

	Example:
	- [ ] Unchecked Task
	- [x] Checked Task

	Renders as:
	- [ ] Unchecked Task
	- [x] Checked Task

	Links and Images:
	- Hyperlink: [link text](URL)
	- Example: [Google](https://www.google.com) renders as: Google
	- Image: ![alt text](URL)
	- Example: ![Placeholder Image](https://via.placeholder.com/150) renders as (using a placeholder image): Placeholder Image

	Blockquotes:
	- Start with >
	- Example: > Blockquote Renders as:

	> Blockquote

	> Multiple lines
	>
	> Blockquote
	> Main Quote
	>
	> > Indented Quote
	> >
	> > More of the Indented Quote
	(it's also possible to indent these blockquotes!)

	Code Blocks:
	- Enclose with triple backticks or indent with 4 spaces.
	- Example: ``` Code Block ``` Renders as:

	```
	Code Block
	```

	Horizontal Rule:
	- Use ---, ___, or ***
	- Example: --- renders as: ---

	Escape Special Characters:
	Use a backslash  before the character.
	- Example: # Not a Heading renders as: # Not a Heading

	Tables:
	- Example: | Header 1 | Header 2 |
	|----------|----------|
	| Cell 1 | Cell 2 |
	Renders as:
	| Header 1 | Header 2 |
	|----------|----------|
	| Cell 1 | Cell 2 |

	Superscript: ^ (works on some platforms like Reddit)
	- Example: E = mc^2 might render as (E = mc²) on supported platforms.

	Subscript: ~ (in specific platforms)
	- Example: H~2~O might render as (H₂O) on supported platforms.

	Table of Contents: [TOC] (in specific platforms/extensions).

	Footnotes: [^1] and [^1]: (in some Markdown parsers).

	Definition Lists (in specific platforms):
	- Example: Term : Definition

	Abbreviations (in specific platforms):
	- Example: *[HTML]: Hyper Text Markup Language

	Highlight: ==highlighted text== (in platforms like StackEdit).

	Custom Containers (in platforms like VuePress):
	- Example: ::: warning *Here be dragons* :::

	Emoji: :emoji_name: (in platforms like GitHub).
	- Example: :smile: might render as 🙂 on supported platforms.

	HTML Format: All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: “<h1>Heading level 1</h1>”. This conversion applies to most markdowns used in website design and construction.

	Special Characters: Of course, there's a whole set of Characters which can be used in formatting, like [brackets], {curly brackets}, ackslashes, <angle brackets>, and so much more!

	Mermaid Diagrams:
	- Mermaid diagrams can be used to create flowcharts, sequence diagrams, class diagrams, and more using the mermaid syntax.
	- To include a Mermaid diagram, use the following format:
	```mermaid
	diagram_type
	diagram_code
	```
	- Example: To create a flowchart, you can use:
	```mermaid
	graph TD;
		A-->B;
		A-->C;
		B-->D;
		C-->D;
	```
	This will render a simple flowchart with nodes A, B, C, and D.

	Citations:
  - When including information from external sources, use inline citations in the format [@AuthorYear].
  - At the end of the response, include a "References" section with full citation details.
  - Format each reference as follows:
    [@AuthorYear]: Author, A. (Year). Title of the work. Source. URL

  Example:
  This is a sentence with a citation [@Smith2023].

  References:
  [@Smith2023]: Smith, J. (2023). Example Article. Journal of Examples. https://example.com/article

  Please return final response JSON (json): { "content": "Your Markdown formatted message with citations", "type": "markdown", "references": ["Array of reference strings"] }.

		Now, with all the markdowns I've provided, use these to create a [Type of Content Here]; maintaining the markdowns provided.
		**Additional Styling Instructions**:
		- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.


  --- EXAMPLE RESPONSE FORMAT ---

  ```json
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  