
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
   import React from 'react';
   import PropTypes from 'prop-types';
   import styles from './MyComponent.module.css';
   import { useMyHook } from '../hooks/myHook';
   import { MyContext } from '../context/myContext';
   import MyIcon from '../icons/MyIcon';

   const MyComponent = ({ prop1, prop2 }) => {
     const { state, dispatch } = useMyHook();
     const { data } = useContext(MyContext);

     return (
       <div className={styles.myComponent}>
         <MyIcon />
         <h1>{data.title}</h1>
         <p>{data.description}</p>
         {/* Render additional components or content based on props and state */}
       </div>
     );
   };
   MyComponent.propTypes = {
     prop1: PropTypes.string.isRequired,
     prop2: PropTypes.number,
   };

   export default MyComponent;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Create a ResponsiveNavbarWithDropdownsAndSearch component that automatically adjusts to various screen sizes, includes multi-level dropdown menus with smooth transition animations, and integrates a search bar with autocomplete functionality. Ensure the component supports extensive styling customization for background colors, fonts, and active link states.
"content": "# Responsive Navbar with Dropdowns and Search Component\n\nThe `ResponsiveNavbarWithDropdownsAndSearch` component is designed to adapt to various screen sizes, providing a seamless user experience across devices. It features multi-level dropdown menus with smooth transition animations for intuitive navigation, and a search bar with autocomplete functionality for quick access to content. The component supports extensive styling customization, allowing developers to tailor the appearance to match their application's theme, including background colors, fonts, and active link states.\n\n## Component Code\n\n```jsx\nimport React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst Navbar = () => {\n  const [showNavbar, setShowNavbar] = useState(false);\n  const toggleNavbar = () => setShowNavbar(!showNavbar);\n\n  return (\n    <nav className='bg-gray-800 text-white p-4'>\n      <div className='flex justify-between items-center'>\n        <div
Generate a reusable icon button component with extensive customizable options
below divs with actual icon components or images */}\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon1')}>Icon 1</div>\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon2')}>Icon 2</div>\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon3')}>Icon 3</div>\n              {/* Add more icons as needed */}\n            </div>\n            <div className='mt-4 flex justify-end'>\n              <button className='px-4 py-2 bg-blue-500 text-white hover:bg-blue-700 rounded' onClick={closeModal}>Close</button>\n            </div>\n          </Dialog.Panel>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UserIconDialog;\n```iv>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UserIconDialog;\n```\n\n### Customization\nTo customize this component, consider passing a dynamic list of icons as props to the
{"role":"assistant","type":"markdown","content":"To create an advanced styled dialog component in React, leveraging TailwindCSS for styling and incorporating the latest React features and best practices, we will desi### gn a user-friendly dialog that offers a seamless experience for selecting and saving a user icon**. This component fosters a more interactive and customizable user interface within applications. \n\n### Component Purpose and Design Rationale\nThe UserIconDialog component enhances user interaction by providi**ng a ### visually appealing and easy-to-use interface for selecting a user icon. TailwindCSS ensures responsive and adaptive styling, making the dialog aesthetically pleasing across all devices. The component is designe```jsx\nimport React, { useState } from 'react';\nimport { Dialog } from '@headlessui/react';\n\nconst UserIconDialog = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedIcon, setSelectedIcon] = useState('');\n\n  const
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The chat exchange outlines the process of developing React components, focusing on a progress component for file upload and a rating component for chat prompt response quality. A user initiates the creation of these components, and the assistant provides comprehensive explanations, including the components' purpose, code examples, and usage. Additionally, a system message discusses generating a data table component for organizing documents in a database. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 66fa10728e8ae6b09f1d7b551]: A detailed explanation and code for a React component designed to visually track the progress of file uploads, including a usage example highlighting how it enhances user experience.
[Summary 2][id 66fa10548e8ae6b09f1d7b4e1]: User request for generating a progress component and logic for file uploads.
[Summary 3][id 66fa0d00b869e1ec40a49e041]: Exposition and code for a React component that allows users to rate the quality of chat prompt responses, featuring a submission form for ratings and comments along with a usage guide.
[Summary 4][id 66fa0cddb869e1ec40a49dfd1]: User request for creating a rating component to assess chat prompt response quality.
[Summary 5][id 66f03c3c2a7bc27b85b47d801]: System message discussing the generation of a data table component for organizing UI library documents in a vector database. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To create a collapsible sidebar for navigation with support for expanding/collapsing submenus and highlighting active links, you can use the following components and libraries:

1. **Material UI Collapsible Sidebar**: This component from Material UI allows users to collapse and expand sidebars or navigation menus, enhancing user experience and optimizing screen space. It supports responsive design and includes features like toggle functionality and customization with themes.

2. **Shadcn Collapsible Component**: This component provides an interactive panel that expands and collapses, which can be used to create a collapsible sidebar. It includes a trigger and content sections, making it easy to implement in your project. You can customize it further with themes and icons.
2. **Shadcn Collapsible**:
   - **Install Shadcn**: Use `npx shadcn@latest add collapsible` to add the collapsible component to your project.
   - **Import Components**: Import `Collapsible`, `CollapsibleContent`, and `CollapsibleTrigger` from `@/components/ui/collapsible`.
   - **Create Collapsible Sidebar**: Use the `Collapsible` component to create an interactive panel that expands and collapses, and customize it with themes and icons as needed.

3. **Bootstrap with Custom CSS**:
   - **Set Up Top Navigation Bar**: Use Bootstrap's predefined navbar classes to create a top navigation bar.
   - **Create Left Sidebar**: Style the left sidebar with custom CSS, ensuring it occupies a specific column (e.g., `col-2`) and includes navigation links.
   - **Customize CSS for Responsive Design**: Adjust the sidebar's collapsed state using custom CSS, ensuring it collapses into a hamburger menu on smaller screens. Highlight active links by adding active classes to the navigation items.
By following these steps, you can create a collapsible sidebar for navigation that supports expanding/collapsing submenus and highlights active links, with options for light and dark themes and icon-only or text+icon modes.

### List of Citations
An accordion component is a UI element that allows users to expand and collapse sections of content, typically used to manage large amounts of information. Key features of an accordion include:

- **Customizable Headers with Icons**: Accordion headers can include icons to indicate the open or closed state of the section, such as plus and minus signs.
- **Hover Effects**: Many accordions support hover effects, providing visual cues for user interaction.
- **Multiple Open Sections**: Some accordions allow multiple sections to be open at the same time, while others restrict it to only one open section.
- **Animated Transitions**: Accordion components often feature smooth animations when expanding or collapsing sections, enhancing the user experience.

To ensure accessibility, accordion components should be designed with keyboard navigation in mind, using ARIA attributes to indicate the expanded state, and ensuring that all focusable elements are included in the page’s tab order sequence.
5. **Add Transitions**:
   - Add "on click" connections to the menu icons for both closed and open variants.

6. **Clean Up & Add to Page**:
   - Add the component to your page, set the width to 100%, and position as fixed. Adjust the mobile logo variant to just the icon for cleaner design.

### Using ReactJS
1. **Create Responsive Navbar Component**:
   - Use a `useMediaQuery` hook to make the navbar responsive. This hook allows you to conditionally render components based on screen sizes.

2. **Mobile Screen Design**:
   - On mobile screens, use a hamburger icon that toggles the nav links. Implement a state and toggle function to manage this behavior.

3. **CSS for Responsive Navbar**:
   - Use CSS to change the display property based on screen width. For example, set `display: none` or `block` at desired widths to make the navbar responsive.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To create a `ResponsiveNavbarWithDropdownsAndSearch` component that automatically adjusts to various screen sizes, includes multi-level dropdown menus with smooth transition animations, and integrates a search bar with autocomplete functionality, you can combine elements from different frameworks and libraries. Here’s a detailed approach:

### 1. **Base Component Structure**
Use a framework like React to create the base structure of the navbar. This will help in managing the component's state and handling interactions.

```jsx
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { ReactComponent as Hamburger } from '../../assets/icons/hamburger.svg';
import { ReactComponent as Brand } from '../../assets/icons/logo.svg';

const Navbar = () => {
  const [showNavbar, setShowNavbar] = useState(false);
  const handleShowNavbar = () => {
    setShowNavbar(!showNavbar);
  };
.navbar .search-bar {
  margin-left: 1rem;
}

/* Add custom styles for active links and hover effects */
.navbar .active {
  background-color: #444;
}

/* Add custom styles for dropdown menus */
.dropdown-menu li:hover {
  background-color: #444;
}
```

### 3. **Responsive Design**
Ensure the navbar is responsive by using media queries or CSS frameworks like Bootstrap or Tailwind CSS.

```css
/* Using Tailwind CSS */
@media (max-width: 768px) {
  .navbar .menu-icon {
    display: block;
  }
  .navbar .menu-links {
    display: none;
  }
  .navbar .menu-links.open {
    display: block;
  }
}

/* Using Bootstrap */
@media (max-width: 768px) {
  .navbar .menu-icon {
    display: block;
  }
  .navbar .menu-links {
    display: none;
  }
  .navbar .menu-links.open {
    display: block;
  }
}
```

### 4. **Smooth Transition Animations**
Add smooth transition animations using CSS transitions or keyframe animations.
4. **User Interface**:
   - **Navigation**: Include navigation options within the sidebar to allow users to create new folders, upload files, and move existing files between folders. This can be achieved using buttons and dropdown menus.
   - **Search Functionality**: Add a search bar to help users quickly find specific code files within the list.

5. **Settings and Customization**:
   - **Settings Panel**: Include a settings panel within the sidebar where users can customize the layout, font sizes, and other visual settings. This can be done using a configuration file or local storage.

Here is a simple example of how the HTML structure for such a sidebar could look:
export default Navbar;
```

### 2. **Styling and Customization**
Use CSS and CSS-in-JS solutions like Tailwind CSS or styled components to customize the navbar's appearance, including background colors, fonts, and active link states.

```css
.navbar {
  background-color: #333;
  padding: 1rem;
}

.navbar .container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.navbar .logo {
  margin-right: 1rem;
}

.navbar .menu-icon {
  cursor: pointer;
}

.navbar .menu-links {
  display: none;
  position: absolute;
  background-color: #333;
  padding: 1rem;
}

.navbar .menu-links.open {
  display: block;
}

.navbar .dropdown-menu {
  display: none;
  position: absolute;
  background-color: #333;
  padding: 1rem;
}

.navbar .dropdown-menu li {
  margin-bottom: 0.5rem;
}

.navbar .search-bar {
  margin-left: 1rem;
}

/* Add custom styles for active links and hover effects */
.navbar .active {
  background-color: #444;
}
To generate a file system sidebar component for managing code files saved from chat bot responses, you can design a sidebar that integrates with the file system of your chosen operating system or file manager. Here’s a conceptual outline:

1. **Sidebar Design**:
   - **Layout**: Use HTML, CSS, and JavaScript to create a sidebar that appears on the side of your browser or application window. This can be done using web technologies like HTML5 and CSS3 for the layout and design.
   - **Content**: The sidebar will display a list of code files managed by the chat bot responses. Each file can be represented by a clickable item that shows the file name and possibly a brief description or preview.
      | Raw Perplexity Search Results Data: 
      | -- Results: To develop a `CustomizableSidebarWithCollapsibleSectionsAndIcons` component, you can combine elements from Bootstrap, Material UI, and Tailwind CSS to achieve the desired functionality. Here’s a step-by-step guide to creating such a component:

### Step 1: Basic Structure

**HTML Structure**
```html
<template>
  <div class="sidebar">
    <button class="toggle-button" @click="toggleSidebar">
      <i class="fa fa-bars" aria-hidden="true"></i>
    </button>
    <div class="sidebar-content" :class="{ 'expanded': expanded }">
      <!-- Sidebar content here -->
      <div v-for="(item, index) in menu" :key="index">
        <div class="sidebar-item" @click="toggleItem(item)">
          <i :class="item.icon"></i>
          {{ item.title }}
          <!-- Optional nested items -->
          <div v-if="item.children">
            <div v-for="(child, childIndex) in item.children" :key="childIndex">
              {{ child.title }}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue';

let expanded = ref(false);
let menu = [
  {
    title: 'Dashboard',
    icon: 'fa fa-home',
    children: [
      { title: 'Dashboard Overview' },
      { title: 'Dashboard Analytics' }
    ]
  },
  {
    title: 'Settings',
    icon: 'fa fa-cog'
  }
];

function toggleSidebar() {
  expanded.value = !expanded.value;
}

function toggleItem(item) {
  // Optional logic to toggle nested items
}
</script>

<style scoped>
/* Add basic styling for the sidebar */
.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  width: 200px;
  height: 100vh;
  background-color: #333;
  color: #fff;
}

/* Add animation for expanding/collapsing */
.sidebar-content {
  transition: width 0.3s ease-in-out;
}

.expanded {
  width: 200px;
}

/* Add styles for individual items */
.sidebar-item {
  padding: 10px;
  cursor: pointer;
}

.sidebar-item:hover {
  background-color: #444;
}

/* Add styles for icons */
.sidebar-item i {
  margin-right: 10px;
}
</style>
```

### Step 2: Customization Options

#### Positioning
- **Fixed Positioning**: Use `position: fixed` in the `.sidebar` class to keep the sidebar at the same position regardless of the page's scroll.
- **Floating Positioning**: Use CSS grid or flexbox to make the sidebar float next to the main content.

#### Styling
- **Colors**: Use Tailwind CSS classes like `bg-[color]`, `text-[color]`, etc., to customize colors.
- **Fonts**: Use Tailwind CSS classes like `font-[font-family]`, `font-[font-size]`, etc., to customize fonts.
- **Section Dividers**: Add custom dividers using Tailwind CSS classes like `border-r`, `border-l`, etc.

### Step 3: Animated Transitions

To add animated transitions, you can use Tailwind CSS classes like `transition`, `duration`, and `ease-in-out` along with custom CSS animations.

```html
<div class="sidebar-content" :class="{ 'expanded': expanded }">
  <!-- Add transition classes -->
  <div class="transition duration-300 ease-in-out">
    <!-- Sidebar content here -->
  </div>
</div>
```

### Step 4: Icons and Hover Effects

- **Icons**: Use Font Awesome icons by adding the `fa` prefix to the class name of the icon (e.g., `fa fa-home`).
- **Hover Effects**: Add hover effects using Tailwind CSS classes like `hover:bg-[color]`, `hover:text-[color]`, etc.

### Step 5: Integration with Vue.js

If you're using Vue.js, you can leverage Vue's reactivity features to dynamically toggle the sidebar and its sections.

### Example Implementation

Here’s a more detailed example combining elements from Bootstrap, Material UI, and Tailwind CSS:

**HTML Structure**
```html
<template>
  <div class="sidebar-container">
    <!-- Sidebar toggle button -->
    <button class="toggle-button" @click="toggleSidebar">
      <i class="fa fa-bars" aria-hidden="true"></i>
    </button>
    <!-- Sidebar content -->
    <div class="sidebar-content" :class="{ 'expanded': expanded }">
      <!-- List of sidebar items -->
      <div v-for="(item, index) in menu" :key="index">
        <div class="sidebar-item" @click="toggleItem(item)">
          <!-- Icon for the item -->
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: CustomizableSidebarWithCollapsibleSectionsAndIcons, users, toggle, sections, animated transitions, icons, item, options, fixed, floating, positioning, styling, colors, fonts, section dividers
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: CustomizableSidebarWithCollapsibleSectionsAndIcons
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Develop a CustomizableSidebarWithCollapsibleSectionsAndIcons component that allows users to toggle sections open or closed with animated transitions. It should support the inclusion of icons next to each item, offer options for fixed or floating positioning, and provide a wide range of styling options for colors, fonts, and section dividers
  EXTRACTED KEYWORDS: CustomizableSidebarWithCollapsibleSectionsAndIcons, users, toggle, sections, animated transitions, icons, item, options, fixed, floating, positioning, styling, colors, fonts, section dividers

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  