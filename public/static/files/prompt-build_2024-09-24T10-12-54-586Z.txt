
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices â€“ be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=ðŸª„" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: When responding to queries about React:
      1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

      2. Provide a comprehensive solution that includes:
         - A brief explanation of the component's design rationale
         - The full styled-component code, utilizing advanced features when appropriate

      3. Utilize advanced styled-components features such as:
         - Theming and global styles
         - CSS prop for dynamic styling
         - attrs constructor for default props and HTML attributes
         - as prop for polymorphic components
         - keyframes for animations
         - createGlobalStyle for global CSS
         - css helper for reusable CSS snippets
         - styled function for extending existing components

      4. Incorporate modern CSS techniques like:
         - CSS Grid and Flexbox for layout
         - CSS Custom Properties (variables) for theming
         - CSS Modules for local scoping when appropriate
         - Media queries for responsive design
         - CSS-in-JS techniques for dynamic styling based on props or state

      5. Optimize for performance by:
         - Using memoization techniques (React.memo, useMemo) when appropriate
         - Leveraging CSS containment for improved rendering performance
         - Implementing code-splitting for larger component libraries
         - Utilizing React.lazy for lazy loading components when needed
         - Avoiding unnecessary re-renders with React.memo or useMemo
         - Utilizing CSS-in-JS techniques for dynamic styling based on props or state

      6. Ensure code quality by:
         - Following React and styled-components best practices
         - Using consistent naming conventions

      8. Always format your response using Markdown syntax.
      Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
      Here's a quick reference:

         ---

      # Heading 1
      ## Heading 2
      ### Heading 3

      **Bold text**
      *Italic text*

      - Bullet list item
      1. Numbered list item

      `Inline code`

      ```javascript
      // Code block
      const example = 'This is a code block';
      ```

      [Link text](URL)

      > Blockquote

      | Table | Header |
      |-------|--------|
      | Cell  | Cell   |

      For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

      Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: <https://tailwindcss.com/docs>\n\nThis implementation exemplifies a straightforward approach to displaying a list of UI components using React and Tailwind CSS. The component is designed to be highly customizable, allowing developers to easily adapt it to their specific requirements, ensuring that it integrates seamlessly into any application.",
Generate a reusable loading button
"content": "# Creating a File Manager Component in React\n\nThe File Manager component is designed to create an efficient user interface for managing files within a web application. It aims to provide an intuitive way to handle file operations such as uploading, viewing, deleting, and downloading files. This component leverages the React framework to ensure a responsive and accessible user experience, integrating seamlessly with modern web applications.\n\n## Implementation\n\n```jsx\nimport React, { useState } from 'react';\n\nconst FileManager = () => {\n  const [files, setFiles] = useState([]);\n\n  const handleFileChange = (event) => {\n    setFiles([...event.target.files]);\n  };\n\n  const handleUpload = async () => {\n    const formData = new FormData();\n    files.forEach(file => formData.append('files', file));\n\n    try {\n      await fetch('YOUR_BACKEND_UPLOAD_ENDPOINT', {\n        method: 'POST',\n        body: formData,\n      });\n      alert('Files successfully
"content": "# Implementing a Data Table Component for UI Components List\n\nThe Data Table component serves a crucial role in organizing and displaying lists of data related to UI components in a readable and interactive format. This enhances the user experience by making it easy to browse, filter, and interact with the data. Utilizing React for this component leverages its component-based architecture to ensure reusability and scalability, catering to the dynamic needs of user interfaces.\n\n## Component Code\n\n```jsx\nimport React from 'react';\n\nconst DataTable = ({ data }) => {\n  return (\n    <div className=\"overflow-x-auto relative\">\n      <table className=\"w-full text-sm text-left text-gray-500 dark:text-gray-400\">\n        <thead className=\"text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400\">\n          <tr>\n            <th scope=\"col\" className=\"py-3 px-6\">Component Name</th>\n            <th scope=\"col\" className=\"py-3
"content": "# Reusable Loading Button Component\n\nThe purpose of the loading button component is to provide a clear and immediate visual feedback to the user when an asynchronous operation, like form submission, is in progress. It enhances the user experience by disabling the button to prevent multiple submissions and indicating that the request is being processed. The design rationale behind this component is to offer consistency across different parts of your application, reducing code duplication and ensuring an intuitive user experience.\n\n## Implementation using `useActionState` from React 19\n\n```jsx\nimport React from 'react';\nimport { useActionState } from 'react';\n\nconst LoadingButton = ({ children, loadingText = 'Loading...', onClick }) => {\n  const { pending, run } = useActionState();\n\n  const handleClick = (event) => {\n    // Prevent the form from submitting traditionally\n    event.preventDefault();\n    // Execute the provided onClick function in the run
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: 2. **Customize the Carousel:**
   - **Content Settings:**
     - Ensure that the carousel is responsive and adaptable to different devices.
     - Add features like auto-height adjustment, autoplay, and the ability to pause on hover or interaction.
   - **Navigation Controls:**
     - Include previous and next controls that are prominent and easily visible, such as large arrows on the sides of the carousel.
   - **Design Settings:**
     - Use a clean and modern design theme for the carousel. This can include adjusting the spacing between slides, using a light background, and adding subtle shadows to enhance visual appeal.
   - **Text Customization:**
     - Customize the text within the carousel, including font size, color, and spacing to match your website's style. Ensure that the text is readable and stands out against the background.
To design a carousel slider for featured articles with previous and next controls, using a sleek, modern look, you can follow these steps:

1. **Choose a Plugin or Widget:**
   - **Woo Carousel:** This plugin offers advanced customization options and can be used to create a sleek, modern carousel for featured articles. It allows for auto-height adjustment, autoplay, and various navigation settings.
   - **MetaSlider:** This plugin provides a robust feature set for creating sliders, including post feed slides that can dynamically pull in featured articles. It also supports various navigation types and is SEO-optimized.
   - **Elementor Carousel Widget:** This widget offers flexibility in design and functionality, allowing you to customize the appearance and behavior of the carousel, including navigation controls.
3. **Integrate with Your Website:**
   - Ensure that the carousel integrates seamlessly with your website's layout and design. Use a responsive design to ensure it looks great on both desktop and mobile devices.

### Example Configuration

#### Using Woo Carousel:
1. **Add to Cart Icon:** Enable the add to cart icon for e-commerce integration.
2. **Content Tab â†’ Carousel Settings:**
   - Enable autoplay and adjust the autoplay delay.
   - Set the loop option to continuous sliding.
   - Center the active image and adjust the speed.
3. **Navigation Settings:**
   - Enable keyboard navigation and mousewheel navigation.
   - Use arrow navigation and dynamic bullets for pagination.
4. **Effect Settings:**
   - Add slide shadows and rotate effects for a sleek look.
#### Using MetaSlider:
1. **Post Feed Slides:**
   - Create a post feed slide to dynamically pull in featured articles.
   - Customize the caption template with relevant information like title, excerpt, author, and date.
2. **Navigation Options:**
   - Use thumbnail or filmstrip navigation for a clean look.

#### Using Elementor Carousel Widget:
1. **Content Tab:**
   - Adjust the number of visible slides and slides on scroll.
   - Enable autoplay and pause options.
2. **Style Tab:**
   - Customize the gap between slides and background type.
   - Adjust typography and icon sizes for a sleek look.

By following these steps and choosing the right plugin or widget, you can create a carousel slider for featured articles with previous and next controls, using a sleek, modern design.
This code creates a grid of cards where each card has a front side with the team member's photo, name, and role, and a back side with a short bio. The flip effect is achieved using CSS transitions and JavaScript event listeners for hover effects.

### Customization

- **Add More Cards**: Simply duplicate the `.card` div and update the image, name, role, and bio.
- **Customize Styles**: Adjust the grid layout, card dimensions, and styles in `styles.css`.
- **Add Interactivity**: You can enhance the interaction by adding more dynamic effects or animations if needed.

This setup provides a basic structure for creating a visually appealing team member grid with a flip effect on hover. You can further customize it to fit your specific requirements.

---

### Citations
1. GlossGenius - Salon and Spa Software Pricing
2. ProfileGrid - User Profiles, Groups and Communities
3. Squarespace Help Center - Summary blocks
  EXTRACTED KEYWORDS: Swipeable Image Carousel, mobile devices, Swipe Navigation, left, right, images, Indicators, dots, arrows, current slide, Auto-Scroll, few seconds
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: Swipeable Image Carousel, Indicators, Auto-Scroll
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Swipeable Image Carousel





Description: A simple image carousel that can be swiped through on mobile devices.



Unique Features:





Swipe Navigation: Users can swipe left or right to switch between images on mobile.



Indicators: Small dots or arrows below the carousel show the current slide position.



Auto-Scroll: Optionally auto-scrolls images every few seconds.

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To create a swipeable image carousel with the described features, you can use various tools and plugins depending on your platform of choice. Here are some options:

### For Instagram:
- **Caro App**:
  - **Swipe Navigation**: Users can easily swipe left or right to switch between images.
  - **Indicators**: The app includes multiple stylish templates with indicators (e.g., dots or arrows) to show the current slide position.
  - **Auto-Scroll**: While not explicitly mentioned, the app allows for high-quality export and customization, which could be extended to include auto-scroll features if needed.

### For WordPress:
- **WP Carousel**:
  - **Swipe Navigation**: Fully touch-friendly and supports infinite looping and autoplay controls, making it ideal for swipe navigation.
  - **Indicators**: Offers customizable navigation and pagination dots, which can be used to indicate the current slide position.
  - **Auto-Scroll**: Supports autoplay and infinite looping, which can be controlled in the settings.

### For React Applications:
- **React Swipe**:
  - **Swipe Navigation**: Provides smooth and responsive touch interactions, perfect for swipe navigation on mobile devices.
  - **Indicators**: Supports various customization options, including indicators like dots or arrows, which can be integrated to show the current slide position.
  - **Auto-Scroll**: Includes auto-play functionality, allowing for optional auto-scrolling of images every few seconds.

### For Flutter Applications:
- **Flutter Packages**:
  - **Swipe Navigation**: Various packages like `carousel_slider` and `flutter_swiper_plus` support swipe navigation and are compatible with both Android and iOS.
  - **Indicators**: Some packages offer customizable indicators, such as dots or arrows, to show the current slide position.
  - **Auto-Scroll**: Packages like `flutter_swiper_plus` support infinite looping and autoplay controls, which can be used for auto-scrolling.

### Summary:
- **Caro App**: A user-friendly app for Instagram with swipe navigation and customizable templates.
- **WP Carousel**: A powerful WordPress plugin with touch-friendly features, including indicators and auto-scroll options.
- **React Swipe**: A library for React applications that provides smooth swipe navigation, customizable indicators, and auto-play functionality.
- **Flutter Packages**: Various packages available for Flutter applications that support swipe navigation, indicators, and auto-scroll options.

### Citations: - Caro App for Instagram. - WP Carousel for WordPress. - Flutter Packages for mobile applications. - Additional information on WP Carousel. - React Swipe library for React applications.

### Additional Information:
For a more detailed implementation, you can refer to the documentation and tutorials provided with each tool or plugin. Each platform has its specific requirements and customization options, so choosing the right tool based on your needs is crucial.

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## Formatting Guide:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why itâ€™s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Usage Examples**: Provide usage examples as separate code blocks in markdown.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## Example Response Format:

  
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  