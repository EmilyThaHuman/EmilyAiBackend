
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=ü™Ñ" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. Title generalizing the component response funcitonality
2. A Brief overview of the componenet and style choice
3. The complete HTML file with all necessary scripts, styles, and React code.
4. A brief explanation of the component structure, functions and design decisions.

Return the full code for the code section wrapped in `<html></html>`.

Return the final response as json with content (markdown text) field containing full response, type for type of content, and references array containing any references which were used or considering during the research and creation process including any included from context:
{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}



## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>‚Äù trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it‚Äôs useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  # *** REACT COMPONENT PROMPT ***
  ## --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  ### CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: component, you can dynamically pass an array of icons as props. This allows the dialog to adapt to various user preferences or application themes. Additionally, for enhanced interactivity, you could use React Context or a global state management library to manage the selected icon state across different components of the application. \n\n### Example Use Case\n```jsx\n// In a parent component\nimport UserIconDialog from './UserIconDialog';\n\nconst ProfileSettings = () => (\n  <UserIconDialog />\n);\n\nexport default ProfileSettings;\n```"}
Generate a modal component for displaying icon previews
</Dialog>\n    </div>\n  );\n};\n\nexport default UserIconDialog;\n```\n\n### Customization\nTo customize this component, consider passing a dynamic list of icons as props to the component. This way, it can adapt to various use cases by allowing selection from different sets of icons. Additionally, you could implement more complex state logic or integrate with a global state management solution for handling the selected icons across the application.\n\n### Example Use Case\n```jsx\n// Within a parent component\n<UserIconDialog />\n```\n\nThis example integrates the `UserIconDialog` component within a larger application, enabling users to select and save an icon of their choice."}
below divs with actual icon components or images */}\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon1')}>Icon 1</div>\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon2')}>Icon 2</div>\n              <div className='hover:border-blue-400 border-2 rounded' onClick={() => selectIcon('icon3')}>Icon 3</div>\n              {/* Add more icons as needed */}\n            </div>\n            <div className='mt-4 flex justify-end'>\n              <button className='px-4 py-2 bg-blue-500 text-white hover:bg-blue-700 rounded' onClick={closeModal}>Close</button>\n            </div>\n          </Dialog.Panel>\n        </div>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UserIconDialog;\n```iv>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UserIconDialog;\n```\n\n### Customization\nTo customize this component, consider passing a dynamic list of icons as props to the
generate a styled dialog component displaying user icon grid as well as select and save tto user logic
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The series of messages details a progression in the task of generating a material UI dashboard for chat monitoring, starting from a basic request to increasingly detailed specifications, including chat prompt templates and a prompt creator dialog feature. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 6719859ef523af06caf802b11]: Request to generate a material UI dashboard with chat prompt templates and a prompt creator dialog for chat monitoring.
[Summary 2][id 6719770a34c2e71aaec6bce61]: Mentions generating a material UI dashboard for chat monitoring with chat prompt templates and a near-identical prompt creator feature.
[Summary 3][id 671976944977a3612198d6b21]: Expands the request by specifying the need for a chat prompt create dialog along with the dashboard and templates for chat monitoring.
[Summary 4][id 671974f2d2d3a461981b2a911]: Focuses on generating a material UI dashboard for chat monitoring, highlighted with the inclusion of chat prompt templates.
[Summary 5][id 671972c9e49fe4df33c4828d1]: Initial message requests the generation of a material UI dashboard for chat monitoring. 
      |
  ### CHAT DATA CONTEXT:
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a use avatar icon picker component with anime icons, you would typically follow these steps:

1. **Define the Component**: Create a web component that allows users to select an anime-themed avatar icon. This can be done using HTML, CSS, and JavaScript.

2. **Design the Interface**: Design an interface that displays a list of available anime-themed icons. This can be a grid or a list of images.

3. **Implement Interactivity**: Add interactivity to the component so that users can click on an icon to select it.

4. **Style the Component**: Use CSS to style the component, ensuring it looks visually appealing and consistent with your application's design.

Here is a simplified example of how you might implement this using HTML, CSS, and JavaScript:
### Additional Tips
- **Load Icons Dynamically**: If you have a large number of icons, consider loading them dynamically using JavaScript to improve performance.
- **Customize Styles**: Use CSS to customize the look and feel of your component, ensuring it fits your application's design.
- **Accessibility**: Ensure that your component is accessible by providing alternative text for the images and ensuring keyboard navigation works correctly.

By following these steps, you can create a functional and visually appealing avatar icon picker component using anime icons.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a use avatar icon picker component with anime icons, you would typically follow these steps:

1. **Define the Component**: Create a web component that allows users to select an anime-themed avatar icon. This can be done using HTML, CSS, and JavaScript.

2. **Design the Interface**: Design an interface that displays a list of available anime-themed icons. This can be a grid or a list of images.

3. **Implement Interactivity**: Add interactivity to the component so that users can click on an icon to select it.

4. **Style the Component**: Use CSS to style the component, ensuring it looks visually appealing and consistent with your application's design.

Here is a simplified example of how you might implement this using HTML, CSS, and JavaScript:

### HTML
```html
<div class="avatar-picker">
  <h2>Choose Your Avatar</h2>
  <ul class="icon-list">
    <!-- List of anime icons -->
    <li class="icon" data-icon="1"><img src="icon1.png"></li>
    <li class="icon" data-icon="2"><img src="icon2.png"></li>
    <!-- Add more icons here -->
  </ul>
  <button class="select-button">Select Avatar</button>
  <p id="selected-icon"></p>
</div>
```

### CSS
```css
.avatar-picker {
  width: 300px;
  margin: 20px auto;
  text-align: center;
}

.icon-list {
  list-style: none;
  padding: 0;
}

.icon {
  display: inline-block;
  margin: 10px;
}

.icon img {
  width: 50px;
  height: 50px;
}

.select-button {
  margin-top: 20px;
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.select-button:hover {
  background-color: #3e8e41;
}

#selected-icon {
  margin-top: 10px;
}
```

### JavaScript
```javascript
// Get elements
const iconsList = document.querySelector('.icon-list');
const selectButton = document.querySelector('.select-button');
const selectedIconText = document.getElementById('selected-icon');

// Add event listener to select button
selectButton.addEventListener('click', () => {
  // Get selected icon
  const selectedIcon = iconsList.querySelector('.icon.selected');
  
  if (selectedIcon) {
    // Update selected icon text
    selectedIconText.textContent = `Selected Icon: ${selectedIcon.dataset.icon}`;
  }
});

// Add event listener to each icon
iconsList.addEventListener('click', (e) => {
  if (e.target.classList.contains('icon')) {
    // Remove selected class from all icons
    iconsList.querySelectorAll('.icon').forEach(icon => icon.classList.remove('selected'));
    
    // Add selected class to clicked icon
    e.target.classList.add('selected');
  }
});
```

This example provides a basic structure for creating an avatar icon picker component with anime icons. You would need to replace the placeholder images (`icon1.png`, `icon2.png`, etc.) with actual anime-themed icons. 

### Additional Tips
- **Load Icons Dynamically**: If you have a large number of icons, consider loading them dynamically using JavaScript to improve performance.
- **Customize Styles**: Use CSS to customize the look and feel of your component, ensuring it fits your application's design.
- **Accessibility**: Ensure that your component is accessible by providing alternative text for the images and ensuring keyboard navigation works correctly.

By following these steps, you can create a functional and visually appealing avatar icon picker component using anime icons.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: avatar, icon, picker, component, anime, generate
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Avatar Icon Picker Component

##  --- SECTION TWO: USER PROMPT/QUERY AND RESPONSE FORMAT INSTRUCTIONS ---

  ### ***USER PROMPT/QUERY: Generate a use avatar icon picker compoenent with anime icons***

  ### RESPONSE FORMAT INSTRUCTIONS:

    Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages.
  
    Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components.

    Please ensure your response includes:

      1. A title summarizing the main purpose of the component
      2. The full React component code (utilize the VAST majority of tokens for the component code)
      3. A detailed description of the component's functionality and purpose

      -----------------------------
    --------------------------------
  