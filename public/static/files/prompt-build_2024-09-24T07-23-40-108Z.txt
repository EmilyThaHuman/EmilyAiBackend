
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices â€“ be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=ðŸª„" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: 
When responding to queries about React styled components:

1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

2. Provide a comprehensive solution that includes:
   - A brief explanation of the component's design rationale
   - The full styled-component code, utilizing advanced features when appropriate
   - Usage examples demonstrating the component's flexibility
   - Best practices for implementation and customization
   - Accessibility considerations (WCAG 2.1 AA compliance)

3. Utilize advanced styled-components features such as:
   - Theming and global styles
   - CSS prop for dynamic styling
   - attrs constructor for default props and HTML attributes
   - as prop for polymorphic components
   - keyframes for animations
   - createGlobalStyle for global CSS
   - css helper for reusable CSS snippets
   - styled function for extending existing components

4. Incorporate modern CSS techniques like:
   - CSS Grid and Flexbox for layout
   - CSS Custom Properties (variables) for theming
   - CSS Modules for local scoping when appropriate
   - Media queries for responsive design
   - CSS-in-JS techniques for dynamic styling based on props or state

5. Optimize for performance by:
   - Using memoization techniques (React.memo, useMemo) when appropriate
   - Leveraging CSS containment for improved rendering performance
   - Implementing code-splitting for larger component libraries

6. Ensure code quality by:
   - Following React and styled-components best practices
   - Using consistent naming conventions
   - Providing clear comments for complex logic
   - Suggesting unit and integration tests for the component

7. Offer guidance on:
   - Component composition and reusability
   - Integration with design systems
   - Potential pitfalls and how to avoid them
   - Performance optimization techniques

8. Always format your response using Markdown syntax.
Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
If requested, provide a summary of Markdown formatting guidelines.
Please return final response JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
Here's a quick reference:

	---

# Heading 1
## Heading 2
### Heading 3

**Bold text**
*Italic text*

- Bullet list item
1. Numbered list item

`Inline code`

```javascript
// Code block
const example = 'This is a code block';
```

[Link text](URL)

> Blockquote

| Table | Header |
|-------|--------|
| Cell  | Cell   |

For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Generate a data table component for listing chat messages
Generate a data table component for organizing a list of data related to UI componets
Generate a file manager component
<https://tailwindcss.com/docs>\n\nThis implementation exemplifies a straightforward approach to displaying a list of UI components using React and Tailwind CSS. The component is designed to be highly customizable, allowing developers to easily adapt it to their specific requirements, ensuring that it integrates seamlessly into any application.",
Usage Example\n\nAssuming you have a list of UI components as your data, here's how you could use the `DataTable` component in your application:\n\n```jsx\nimport React, { useState, useEffect } from 'react';\nimport DataTable from './DataTable';\n\nconst App = () => {\n  const [componentsList, setComponentsList] = useState([]);\n\n  useEffect(() => {\n    // Fetch or generate your components list here\n    setComponentsList([{ name: 'Button', description: 'A clickable button component.', category: 'Form' }, { name: 'Input', description: 'A user input component.', category: 'Form' }]);\n  }, []);\n\n  return <DataTable data={componentsList} />;\n};\n\nexport default App;\n```\n\n### References\n- React Documentation: <https://reactjs.org/docs/getting-started.html>\n- Tailwind CSS Documentation: <https://tailwindcss.com/docs>\n\nThis implementation exemplifies a straightforward approach to displaying a list of UI components using React and Tailwind CSS. The component is designed to be
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: ### Conclusion
Designing a group of checkboxes with a "Select All" feature and customizable styles involves using a checkbox group component, implementing the Select All logic, and customizing the appearance using CSS classes or props. Ensuring accessibility is crucial by using semantic tags and clear labels.

### Citations
1. Form.io Documentation on Form Components
2
</CheckboxRoot>
      <span class="select-none text-white">Select All</span>
    </label>
    <div v-for="(option, index) in options" :key="index" class="flex items-center">
      <CheckboxRoot v-model:checked="options[index]" class="shadow-blackA7 hover:bg-green3 flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-[4px] bg-white shadow-[0_2px_10px] outline-none focus-within:shadow-[0_0_0_2px_black]">
        <CheckboxIndicator class="bg-white h-full w-full rounded flex items-center justify-center">
          <Icon v-if="options[index]" icon="radix-icons:check" class="h-3.5 w-3.5 text-grass11" />
        </CheckboxIndicator>
      </CheckboxRoot>
      <span class="select-none text-white">{{ option.label }}</span>
    </div>
  </div>
</template>
2. **Implement the Tabs Component**:
   ```html
   <template>
     <TabsRoot orientation="horizontal">
       <TabsList class="bg-grass8 w-full h-full">
         <TabsTrigger class="bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none rounded-tl-md hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default focus-visible:relative focus-visible:shadow-[0_0_0_2px] focus-visible:shadow-black" value="tab1">
           Account
         </TabsTrigger>
         <TabsTrigger class="bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none rounded-tr-md hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default focus-visible:relative focus-visible:shadow-[0_0_0_2px] focus-visible:shadow-black" value="tab2">
           Password
         </TabsTrigger>
       </TabsList>
These components offer the flexibility and functionality you need for a tab component with horizontal navigation and dynamically loaded content.

### Citations - Tabs - Carbon Design System - NET MAUI Shell tabs - Microsoft Learn - Tabs - Radix Vue
To design a group of checkboxes that can be used to select multiple options, including a "Select All" feature and customizable styles, you can follow these steps:

### 1. Basic Components
Use a checkbox group component type, which allows for the selection of multiple true/false items, rendered as multiple checkboxes. This is commonly seen in form builders and can be configured with various settings such as value shortcuts and validation types.

### 2. Select All Feature
Implement a "Select All" checkbox that toggles all other checkboxes in the group. This can be achieved by adding an additional checkbox that, when checked, sets all other checkboxes to checked, and vice versa.
  EXTRACTED KEYWORDS: Generate, tagging, component, Chips, tag
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: 
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate tagging component using Chips for each tag

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To generate tagging components using chips for each tag in a race timing system, you can use various technologies and libraries. Hereâ€™s a step-by-step guide:

1. **Understand the Components**:
   - **RFID Tags**: These are the tags worn by participants, containing an RFID chip and an antenna. Each tag is uniquely encoded with information like the participant's bib number.

2. **Tagging System**:
   - For a race timing system, you need to create a way to display and manage these tags. This can be achieved using interactive chip components.

3. **Choose a Technology**:
   - **Flutter**: If you're developing a mobile application, you can use Flutter packages like `filter_list`, `textfield_tags`, `flutter_multi_select_items`, or `choice` to create customizable chip tags.
   - **Tailwind CSS**: For web applications, you can use Tailwind CSS chip components which are easy to integrate and customize. These components can be used to display tags neatly and allow users to interact with them.

### Example Implementation

#### Using Flutter

```dart
import 'package:flutter/material.dart';
import 'package:flutter_multi_select_items/flutter_multi_select_items.dart';

class TaggingComponent extends StatefulWidget {
  @override
  _TaggingComponentState createState() => _TaggingComponentState();
}

class _TaggingComponentState extends State<TaggingComponent> {
  List<int> selectedTags = [];

  @override
  Widget build(BuildContext context) {
    return MultiSelectChipField<int>(
      initialSelectedValues: selectedTags,
      onSelectionChanged: (newSelection) {
        setState(() {
          selectedTags = newSelection;
        });
      },
      items: List.generate(10, (index) => index).map((tag) => MultiSelectItem(tag, 'Tag $tag')).toList(),
      chipDisplay: ChipDisplay.checkmark,
    );
  }
}
```

#### Using Tailwind CSS

You can create a basic chip component using Tailwind CSS as follows:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chip Component</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div class="flex flex-wrap gap-2">
        <div class="bg-blue-500 text-white p-2 rounded">Tag 1</div>
        <div class="bg-green-500 text-white p-2 rounded">Tag 2</div>
        <!-- Add more tags as needed -->
    </div>
</body>
</html>
```

This will generate a basic chip component for each tag, allowing users to display and manage them interactively.

### Citations - How to Build an RFID Race Timing System by Race Directors HQ. - Top Flutter Chips, Tags, Selectable, Taggable packages by Flutter Gems. - What are RFID Tags, What are They Used for? by Camcode. - 10 Tailwind CSS Chip Components [Free & Open-Source] by Creative Tim. - Chip Timing Systems: Buy, Rent or Build Your Own? by Race Directors HQ.

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## Formatting Guide:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why itâ€™s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Usage Examples**: Provide usage examples as separate code blocks in markdown.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## Example Response Format:

  ```json
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```,
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }
  ```

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  