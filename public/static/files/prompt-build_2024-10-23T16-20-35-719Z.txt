
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a modal component for displaying icon previews
Generate a file manager component
Generate a popup component reusable
generate a styled file uplaod button with file preview option
Generate a Progress componenet and logic to display for a file loading/upload component
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The series of messages are from a single user, containing a sequence of nonsensical text inputs across five separate instances. These inputs seem like random keystrokes without any identifiable information or context. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671900717facfe6b62bde2451]: Contains random text 'asdfsadfdsasdf' without any clear context.
[Summary 2][id 6718fc4e673133571cffa6531]: Includes the text 'asdfdsafdsfdasf', indicating another instance of random keystrokes.
[Summary 3][id 6718fb450b982f4ff0ec70601]: Text 'asdfasdfdsfdsfadsfdsasfsadf' shows more nonsensical input by the user.
[Summary 4][id 6718f9c55200b9b85ddeceeb1]: Message with 'asdfasdfdsfasdf' continues the pattern of random text entries.
[Summary 5][id 6718f9090ae1d00431b7bab01]: Features the text 'sadfsdfdsafdsasdf', adding to the series of nonsensical messages. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: This approach uses Bootstrap for basic styling and the `file-upload-with-preview` library for handling and displaying the file previews.
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Styled File Upload</div>
                <div class="card-body">
                    <input type="file" id="fileInput" multiple accept="image/*" />
                    <div id="filePreview" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/file-upload-with-preview/dist/index.js"></script>
<script>
    const fileInput = document.getElementById('fileInput');
    const filePreview = document.getElementById('filePreview');
    
    const upload = new FileUploadWithPreview('fileInput');
To generate a styled file upload button with a file preview option, you can use a combination of HTML, CSS, and JavaScript. Here’s a step-by-step guide using Bootstrap for styling and a simple JavaScript library for previewing the files:

### Step 1: Create the HTML Structure

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Styled File Upload</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://unpkg.com/file-upload-with-preview/dist/style.css">
</head>
<body>
To generate a modal component for displaying icon previews in React, you can follow these steps:

1. **Set Up the Project**:
   - Create a new React application using `npx create-react-app react-app`.
   - Install necessary dependencies: `npm install tailwindcss postcss autoprefixer react-icons`.

2. **Install Tailwind CSS**:
   - Initialize Tailwind CSS using `npx tailwindcss init -p`.
   - Configure Tailwind CSS in `tailwind.config.js`.

3. **Create the Modal Component**:
   - Define a reusable Modal component that controls its visibility.
   - Use Tailwind CSS for styling the modal.

Here is an example of how you can create the modal component:

```javascript
// App.js
import React, { useState } from 'react';
import './App.css';
import { FaBox, FaTag, FaUsers } from 'react-icons/fa';
To generate a dashboard component for displaying UI data, including icons and options for organizing the data, you can use a combination of the following components and tools:
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a progress component and logic to display for a file loading/upload component, you can follow these steps using JavaScript and HTML. Below is an example of how you can achieve this:

### HTML
### Citations https://nx.dev/nx-api/react/generators/component https://docs.flutterflow.io/resources/ui/components/creating-components/ https://docs.uniform.app/docs/learn/tutorials/csk/create-component https://www.npmjs.com/package/new-component
To design a `FileUploaderButtonWithTooltip` component that seamlessly integrates into any web application, supporting drag-and-drop functionality for all file types, you can follow these steps:

1. **Create the File Uploader Button**:
   - Use an HTML `input` element with the type set to `file` for the drag-and-drop functionality.
   - Add a button element to trigger the file selection dialog.
   - Implement an event handler to handle the file selection and display the selected file details.

2. **Generate an Icon for Each File Type**:
   - Use JavaScript to determine the file type and generate an appropriate icon dynamically.
   - You can use libraries like Font Awesome or Material Icons for this purpose.

3. **Display a Tooltip with File Details**:
   - Use a tooltip library like `react-tooltip` or create a custom tooltip using CSS.
   - Display the file size and type in the tooltip.
To generate a dialog component in Angular that allows users to write syntax-highlighted and formatted JSON data, you can use the following steps:

1. **Install Required Dependencies**:
   Ensure you have the necessary dependencies installed. You can use tools like `ng generate component` with schematic preferences from your `angular.json` file.

2. **Create the Component**:
   Use the `ng generate component` command to create the dialog component. This command will generate a basic component structure with HTML, CSS, and TypeScript files.

3. **Customize the Component**:
   In the component's HTML file (`dialog.component.html`), you can use an `<editor>` component like Monaco Editor or ACE Editor to provide syntax highlighting for JSON data. For example, you can use Monaco Editor by including the following code:

```html
<monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
```
To generate a React component, you can use several tools and methods depending on your development environment and needs. Here are a few approaches:

1. **Using WebStorm**:
   - **Extract Component**: In WebStorm, you can extract JSX code from the render method of an existing component to create a new React component. This can be done by selecting the code you want to extract and choosing "Extract Component" from the context menu or by pressing `Ctrl+Alt+Shift+T` and selecting "Extract Component" from the popup.

2. **Using Anima in Figma**:
   - **Convert Figma Designs to React Code**: Anima allows you to convert Figma designs into clean React code. You can install the Anima plugin in Figma, select the Figma screens you want to convert, and generate React code for full flows or specific components. This method supports pixel-perfect, responsive layouts, and various styling options like CSS, SCSS, and Tailwind.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a component for previewing images, you can use the following approaches:

1. **APITemplate.io**: This platform allows you to create reusable image templates using its intuitive editor. You can customize properties like text, position, color, and style via API without needing HTML or CSS knowledge. The API can be integrated with platforms like Zapier, Integromat, and n8n to generate new images based on the template.

2. **imgix API**: This API is designed for building responsive image galleries. You can create a gallery component that maps each image in a predefined array into an `<Imgix/>` element from the `react-imgix` library. This allows for flexible rendering of images with dimensions specified by the user.

3. **@automattic/social-previews**: This package provides a suite of components for generating previews of posts for various social media platforms. You can use components like `FacebookPreviews`, `TwitterPreviews`, and `LinkedInPreviews` to display approximations of how a post might look on different platforms. Each component accepts properties like `title`, `description`, and `url`.

### Example Component Using APITemplate.io

Here’s a simplified example of how you might create a reusable image template with APITemplate.io and then generate a new image using the API:

1. **Create an Image Template**:
   - Use the intuitive editor to create a reusable image template.
   - Customize the template with your desired layout, text, images, and other visual elements.

2. **Generate a New Image**:
   - Use Zapier or Integromat to make a call to the APITemplate.io API.
   - Provide the necessary JSON data to override properties such as text, image URLs, and background colors.
   - The API will generate a new image based on the template and the provided overrides.

### Example Component Using imgix API

Here’s a simplified example of how you might build a responsive image gallery using the imgix API in React:

1. **Create an Array of Images**:
   - Define an array of image file names.
   - Use the `buildURL` function to construct the full URL for each image.

2. **Render the Gallery**:
   - Use the `<Imgix/>` component from `react-imgix` to render each image in the array.
   - Specify the `src`, `sizes`, and `imgixParams` to ensure responsive rendering.

### Example Component Using @automattic/social-previews

Here’s a simplified example of how you might use the `FacebookPreviews` component from `@automattic/social-previews`:

1. **Import the Component**:
   - Import the `FacebookPreviews` component.

2. **Render the Preview**:
   - Pass in necessary properties like `title`, `description`, and `url`.
   - The component will display an approximation of how the post would look on Facebook.

### Summary

- **APITemplate.io**: Ideal for creating reusable image templates and generating new images via API.
- **imgix API**: Suitable for building responsive image galleries in React applications.
- **@automattic/social-previews**: Useful for generating social media post previews for various platforms.

### Citations APITemplate.io - Image Generation API imgix API - Building a Responsive Image Gallery in React @automattic/social-previews - NPM Package for Social Media Post Previews
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: component, previewing, images
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a component for previewing images
  EXTRACTED KEYWORDS: component, previewing, images

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  