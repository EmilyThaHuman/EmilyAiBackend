
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a resuable button component with moddable colors
component in your application, simply import it and include it in your component tree. You can customize the appearance by applying Tailwind CSS classes or custom styles as needed.\n\n## Customization\n\nThe component's appearance can be customized by applying Tailwind CSS classes for background colors, fonts, and active link states. For more advanced customization, consider extending the component with additional props or context to manage themes or other dynamic styling requirements.\n\n## References\n- React Documentation: https://reactjs.org/docs/hooks-state.html\n- Tailwind CSS Documentation: https://tailwindcss.com/docs",
Generate advanced styled dialog component
Generate a data table component for displaying a list of UI compoennt library data
"content": "# Customizable Sidebar with Collapsible Sections and Icons\n\nThe `CustomizableSidebarWithCollapsibleSectionsAndIcons` component is designed to enhance user navigation within a web application. It allows users to easily toggle sections open or closed with animated transitions, providing a more interactive and engaging user experience. The inclusion of icons next to each item enhances visual appeal and user understanding. This component supports both fixed and floating positioning, offering a wide range of styling options for colors, fonts, and section dividers to ensure it can be seamlessly integrated into any application design.\n\n## Component Code\n\n```jsx\nimport React, { useState } from 'react';\nimport { FaBars, FaHome, FaCog } from 'react-icons/fa';\n\nconst SidebarItem = ({ icon, title, children }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div className='sidebar-item'>\n      <div
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages involve requests for generating various React components, including a button component, a button component for file uploads, and a data table component for organizing UI library documents. The requests detail the creation of components for enhancing UI/UX and possibly integrating with a vector database for AI agent creation. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 670c30063a88f6a7d8fcc4131]: A request for generating a basic React button component.
[Summary 2][id 670c1fc059ab56a3c92c10fe1]: A request for generating a React button component specifically for file uploads.
[Summary 3][id 670c1e0a59ab56a3c92c10ee1]: Another request for generating a basic React button component, similar to the first message.
[Summary 4][id 670af2f746ab40ecae9bb9f01]: A request for generating a React data table component intended for organizing a list of data and UI library documents, mentioning integration with a vector database for AI agent creation.
[Summary 5][id 670af210f6d3b57023a1f9791]: A request for generating a generic React component, not specifying its function or purpose. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To achieve a tab component with horizontal navigation and dynamically loaded content with a dark theme, you can use the **Radix Vue Tabs** component, which supports horizontal orientation and dynamic content loading. Here’s how you can implement it:

1. **Install Radix Vue**:
   ```bash
   npm add radix-vue
   ```
"language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": "<Tabs value={value} onChange={handleChange} aria-label=\"disabled tabs example\"> <Tab label=\"Active\" /> <Tab label=\"Disabled\" disabled /> <Tab label=\"Active\" /> </Tabs><Tabs value={value} onChange={handleChange} aria-label=\"disabled tabs example\"> <Tab label=\"Active\" /> <Tab label=\"Disabled\" disabled /> <Tab label=\"Active\" /> </Tabs>",
    "language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": "<Tabs value={value} onChange={handleChange} centered> <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> </Tabs><Tabs value={value} onChange={handleChange} centered> <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> </Tabs>",
    "language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
"language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": "<TabContext value={value}> <Box sx={{ borderBottom: 1, borderColor: 'divider' }}> <TabList onChange={handleChange} aria-label=\"lab API tabs example\"> <Tab label=\"Item One\" value=\"1\" /> <Tab label=\"Item Two\" value=\"2\" /> <Tab label=\"Item Three\" value=\"3\" /> </TabList> </Box> <TabPanel value=\"1\">Item One</TabPanel> <TabPanel value=\"2\">Item Two</TabPanel> <TabPanel value=\"3\">Item Three</TabPanel> </TabContext><TabContext value={value}> <Box sx={{ borderBottom: 1, borderColor: 'divider' }}> <TabList onChange={handleChange} aria-label=\"lab API tabs example\"> <Tab label=\"Item One\" value=\"1\" /> <Tab label=\"Item Two\" value=\"2\" /> <Tab label=\"Item Three\" value=\"3\" /> </TabList> </Box> <TabPanel value=\"1\">Item One</TabPanel> <TabPanel value=\"2\">Item Two</TabPanel> <TabPanel value=\"3\">Item Three</TabPanel> </TabContext>",
"language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": ".MuiTabs-scrollButtons.Mui-disabled { opacity: 0.3; }",
    "language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": "<Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons={false} aria-label=\"scrollable prevent tabs example\" > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs><Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons={false} aria-label=\"scrollable prevent tabs example\" > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs>",
    "language": "jsx",
"language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    "code": "<Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\" > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs><Tabs value={value} onChange={handleChange} variant=\"scrollable\" scrollButtons=\"auto\" aria-label=\"scrollable auto tabs example\" > <Tab label=\"Item One\" /> <Tab label=\"Item Two\" /> <Tab label=\"Item Three\" /> <Tab label=\"Item Four\" /> <Tab label=\"Item Five\" /> <Tab label=\"Item Six\" /> <Tab label=\"Item Seven\" /> </Tabs>",
    "language": "jsx",
    "description": ""
  },
  {
    "component": "Tabs",
    "title": "Untitled",
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a React tab switcher component with a dark theme, you can use a library like `flexlayout-react` and customize it to fit your needs. Here's a step-by-step guide to create such a component:

1. **Install `flexlayout-react`:**
   ```bash
   npm install flexlayout-react
   ```

2. **Import and Set Up FlexLayout:**
   ```javascript
   import { Layout, Model } from 'flexlayout-react';

   // Import the dark theme CSS
   import 'flexlayout-react/style/dark.css';
   ```

3. **Create a Simple Tab Switcher Component:**
   ```javascript
   import React, { useRef } from 'react';
   import { Layout, Model } from 'flexlayout-react';

   const TabSwitcher = () => {
     const layoutRef = useRef(null);
export default TabSwitcher;
```

This approach allows you to switch between light and dark themes seamlessly by loading the appropriate CSS file based on the current color mode.

### List of Citations - https://docusaurus.io/docs/api/themes/configuration - https://tremor.so - https://code.visualstudio.com/api/references/theme-color - https://www.npmjs.com/package/flexlayout-react - https://ej2.syncfusion.com/react/documentation/appearance/theme
ReactDOM.render(
     <React.StrictMode>
       <TabSwitcher />
     </React.StrictMode>,
     document.getElementById('root')
   );
   ```

### Example Configuration

If you want to support both light and dark themes, you can use a conditional import statement to load the appropriate CSS file based on the current theme.

```javascript
import React from 'react';
import { useColorMode } from '@docusaurus/theme-common';

const TabSwitcher = () => {
  const { colorMode } = useColorMode();

  let themeCss;
  if (colorMode === 'dark') {
    themeCss = 'flexlayout-react/style/dark.css';
  } else {
    themeCss = 'flexlayout-react/style/light.css';
  }

  return (
    <div>
      <link rel="stylesheet" href={themeCss} />
      {/* Your Tab Switcher Component */}
      <Layout ref={layoutRef} model={model} factory={(node) => {
        if (node.type === 'tab') {
          return <button>{node.name}</button>;
        }
      }} />
    </div>
  );
};

export default TabSwitcher;
```
const addTabToTabSet = (tabSetId, tab) => {
       layoutRef.current.addTabToTabSet(tabSetId, tab);
     };

     return (
       <Layout ref={layoutRef} model={model} factory={(node) => {
         if (node.type === 'tab') {
           return <button>{node.name}</button>;
         }
       }} />
     );
   };

   export default TabSwitcher;
   ```

4. **Customize the Theme:**
   You can further customize the theme by adding custom CSS or using a library like Tailwind CSS to style your tabs. For example, you can add custom CSS to change colors and backgrounds.

5. **Use the Component:**
   ```javascript
   import React from 'react';
   import ReactDOM from 'react-dom';
   import TabSwitcher from './TabSwitcher';

   ReactDOM.render(
     <React.StrictMode>
       <TabSwitcher />
     </React.StrictMode>,
     document.getElementById('root')
   );
   ```

### Example Configuration
const TabSwitcher = () => {
     const layoutRef = useRef(null);

     const model = Model.fromJson({
       rows: [
         {
           type: 'row',
           rows: [
             {
               type: 'tabset',
               tabs: [
                 {
                   type: 'tab',
                   name: 'Tab 1',
                   component: 'button',
                 },
                 {
                   type: 'tab',
                   name: 'Tab 2',
                   component: 'button',
                 },
                 {
                   type: 'tab',
                   name: 'Tab 3',
                   component: 'button',
                 },
               ],
             },
           ],
         },
       ],
     });

     const addTabToTabSet = (tabSetId, tab) => {
       layoutRef.current.addTabToTabSet(tabSetId, tab);
     };
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a React tab switcher component with a dark theme, you can use a library like `flexlayout-react` and customize it to fit your needs. Here's a step-by-step guide to create such a component:

1. **Install `flexlayout-react`:**
   ```bash
   npm install flexlayout-react
   ```

2. **Import and Set Up FlexLayout:**
   ```javascript
   import { Layout, Model } from 'flexlayout-react';

   // Import the dark theme CSS
   import 'flexlayout-react/style/dark.css';
   ```

3. **Create a Simple Tab Switcher Component:**
   ```javascript
   import React, { useRef } from 'react';
   import { Layout, Model } from 'flexlayout-react';

   const TabSwitcher = () => {
     const layoutRef = useRef(null);

     const model = Model.fromJson({
       rows: [
         {
           type: 'row',
           rows: [
             {
               type: 'tabset',
               tabs: [
                 {
                   type: 'tab',
                   name: 'Tab 1',
                   component: 'button',
                 },
                 {
                   type: 'tab',
                   name: 'Tab 2',
                   component: 'button',
                 },
                 {
                   type: 'tab',
                   name: 'Tab 3',
                   component: 'button',
                 },
               ],
             },
           ],
         },
       ],
     });

     const addTabToTabSet = (tabSetId, tab) => {
       layoutRef.current.addTabToTabSet(tabSetId, tab);
     };

     return (
       <Layout ref={layoutRef} model={model} factory={(node) => {
         if (node.type === 'tab') {
           return <button>{node.name}</button>;
         }
       }} />
     );
   };

   export default TabSwitcher;
   ```

4. **Customize the Theme:**
   You can further customize the theme by adding custom CSS or using a library like Tailwind CSS to style your tabs. For example, you can add custom CSS to change colors and backgrounds.

5. **Use the Component:**
   ```javascript
   import React from 'react';
   import ReactDOM from 'react-dom';
   import TabSwitcher from './TabSwitcher';

   ReactDOM.render(
     <React.StrictMode>
       <TabSwitcher />
     </React.StrictMode>,
     document.getElementById('root')
   );
   ```

### Example Configuration

If you want to support both light and dark themes, you can use a conditional import statement to load the appropriate CSS file based on the current theme.

```javascript
import React from 'react';
import { useColorMode } from '@docusaurus/theme-common';

const TabSwitcher = () => {
  const { colorMode } = useColorMode();

  let themeCss;
  if (colorMode === 'dark') {
    themeCss = 'flexlayout-react/style/dark.css';
  } else {
    themeCss = 'flexlayout-react/style/light.css';
  }

  return (
    <div>
      <link rel="stylesheet" href={themeCss} />
      {/* Your Tab Switcher Component */}
      <Layout ref={layoutRef} model={model} factory={(node) => {
        if (node.type === 'tab') {
          return <button>{node.name}</button>;
        }
      }} />
    </div>
  );
};

export default TabSwitcher;
```

This approach allows you to switch between light and dark themes seamlessly by loading the appropriate CSS file based on the current color mode.

### List of Citations - https://docusaurus.io/docs/api/themes/configuration - https://tremor.so - https://code.visualstudio.com/api/references/theme-color - https://www.npmjs.com/package/flexlayout-react - https://ej2.syncfusion.com/react/documentation/appearance/theme
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: react, tab switcher, component, dark theme
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: tab switcher
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a react tab switcher component with dark theme
  EXTRACTED KEYWORDS: react, tab switcher, component, dark theme

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  