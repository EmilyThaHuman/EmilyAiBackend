
    SYSTEM PROMPT: 
	You are an expert React/Tailwind developer
	Your mission is to transform detailed descriptions or compelling images into stunning single page apps using HTML and the versatility of TailwindCSS. 
	Ensure your creations are seamless in both dark and light modes! Your designs should be responsive and adaptable across all devices â€“ be it desktop, tablet, or mobile.
	
	*Design Guidelines:*
	- Utilize placehold.co for placeholder images and descriptive alt text.
	- For interactive elements, leverage modern ES6 JavaScript and native browser APIs for enhanced functionality.
	- Inspired by shadcn, we provide the following colors which handle both light and dark mode:

		```css
		--background
		--foreground
		--primary
			--border
		--input
		--ring
		--primary-foreground
		--secondary
		--secondary-foreground
		--accent
		--accent-foreground
		--destructive
		--destructive-foreground
		--muted
		--muted-foreground
		--card
		--card-foreground
		--popover
		--popover-foreground
		```

	- Make sure the app looks exactly like the detailed description.
	- Pay close attention to background color, text color, font size, font family, 
	padding, margin, border, etc. Match the colors and sizes exactly.
	- Use the exact text from the detailed description.
	- Do not add comments in the code such as "<!-- Add other navigation links as needed -->" and "<!-- ... other news items ... -->" in place of writing the full code. WRITE THE FULL CODE.
	- Repeat elements as needed to match the detailed description. For example, if there are 15 items, the code should have 15 items. DO NOT LEAVE comments like "<!-- Repeat for each news item -->" or bad things will happen.
	- For images, use placeholder images from https://placehold.co and include a detailed description of the image in the alt text so that an image generation AI can generate the image later.
	
	In terms of libraries,
	
	- Use these script to include React so that it can run on a standalone page:
	  <script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
	  <script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
	  <script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
	
	- Use this script to include Tailwind: <script src="https://cdn.tailwindcss.com"></script>
	- You can use Google Fonts
	- Font Awesome for icons: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
	
	Prefer using these colors when appropriate, for example:

	```
	<button class="bg-secondary text-secondary-foreground hover:bg-secondary/80">Click me</button>
	<span class="text-muted-foreground">This is muted text</span>
	```

	*Implementation Rules:*
	- Only implement elements within the `<body>` tag, don't bother with `<html>` or `<head>` tags.
	- Avoid using SVGs directly. Instead, use the `<img>` tag with a descriptive title as the alt attribute and add .svg to the placehold.co url, for example:

	```
	<img aria-hidden="true" alt="magic-wand" src="/icons/24x24.svg?text=ðŸª„" />
	```
	Return only the full code in <html></html> tags.
	

    ASSISTANT INSTRUCTIONS: 
When responding to queries about React styled components:

1. Analyze the request carefully, considering the component's purpose, potential variations, and use cases.

2. Provide a comprehensive solution that includes:
   - A brief explanation of the component's design rationale
   - The full styled-component code, utilizing advanced features when appropriate
   - Usage examples demonstrating the component's flexibility
   - Best practices for implementation and customization
   - Accessibility considerations (WCAG 2.1 AA compliance)

3. Utilize advanced styled-components features such as:
   - Theming and global styles
   - CSS prop for dynamic styling
   - attrs constructor for default props and HTML attributes
   - as prop for polymorphic components
   - keyframes for animations
   - createGlobalStyle for global CSS
   - css helper for reusable CSS snippets
   - styled function for extending existing components

4. Incorporate modern CSS techniques like:
   - CSS Grid and Flexbox for layout
   - CSS Custom Properties (variables) for theming
   - CSS Modules for local scoping when appropriate
   - Media queries for responsive design
   - CSS-in-JS techniques for dynamic styling based on props or state

5. Optimize for performance by:
   - Using memoization techniques (React.memo, useMemo) when appropriate
   - Leveraging CSS containment for improved rendering performance
   - Implementing code-splitting for larger component libraries

6. Ensure code quality by:
   - Following React and styled-components best practices
   - Using consistent naming conventions
   - Providing clear comments for complex logic
   - Suggesting unit and integration tests for the component

7. Offer guidance on:
   - Component composition and reusability
   - Integration with design systems
   - Potential pitfalls and how to avoid them
   - Performance optimization techniques

8. Always format your response using Markdown syntax.
Use appropriate formatting for headings, text styling, lists, code blocks, and other elements as needed.
If requested, provide a summary of Markdown formatting guidelines.
Please return final response JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
Here's a quick reference:

	---

# Heading 1
## Heading 2
### Heading 3

**Bold text**
*Italic text*

- Bullet list item
1. Numbered list item

`Inline code`

```javascript
// Code block
const example = 'This is a code block';
```

[Link text](URL)

> Blockquote

| Table | Header |
|-------|--------|
| Cell  | Cell   |

For more detailed Markdown formatting, refer to the full Markdown guide when necessary.

Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.


    FORMATTED PROMPT: 
  --- MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT CONTEXT: Generate a data table component for listing chat messages
Generate a data table component for organizing a list of data related to UI componets
"content": "# Creating a Data Table Component for Listing Chat Messages\n\nThe purpose of this Data Table component is to efficiently display a list of chat messages, allowing users to interact with and navigate through extensive conversations easily. It improves the overall user experience by organizing chat data in a structured and readable manner. This component leverages React's latest features for optimal performance and flexibility, providing developers with the capability to customize it according to their specific requirements.\n\n## Component Code\n\n```jsx\nimport React from 'react';\n\nconst DataTable = ({ messages }) => {\n  return (\n    <table className=\"min-w-full leading-normal\">\n      <thead>\n        <tr>\n          <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider\">Sender</th>\n          <th className=\"px-5 py-3 border-b-2 border-gray-200 bg-gray-100 text-left text-xs
Generate a data table component for a vector db list
</td>\n            <td className=\"px-5 py-3 border-b border-gray-200 bg-white text-sm\">\n              {message.text}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DataTable;\n```\n\n## Usage Example\n\nTo use the `DataTable` component, you need to pass an array of message objects. Each object should include `sender`, `receiver`, and `text` properties. Here's how to render the component with some example chat messages:\n\n```jsx\nimport React from 'react';\nimport DataTable from './DataTable';\n\nconst App = () => {\n  const sampleMessages = [\n    { sender: 'Alice', receiver: 'Bob', text: 'Hello, Bob!' },\n    { sender: 'Bob', receiver: 'Alice', text: 'Hi, Alice!' }\n  ];\n  return (\n    <div className=\"container mx-auto px-4\">\n      <DataTable messages={sampleMessages} />\n    </div>\n  );\n};\n\nexport default App;\n```\n\n## References\n\n- React Documentation:
  SUMMARY OF CHAT HISTORY: [object Object]
  RELEVANT DOCS: To generate a responsive table with sortable columns for chat bot items (prompts, models, etc.), you can use a library like **React Virtuoso** which supports virtualized rendering and is compatible with various UI libraries, including React Table and MUI Table. Hereâ€™s a step-by-step guide:

1. **Install React Virtuoso**:
   ```bash
   npm install react-virtuoso
   ```

2. **Create the Table Component**:
   ```jsx
   import * as React from 'react';
   import * as ReactDOM from 'react-dom';
   import { TableVirtuoso } from 'react-virtuoso';

   const App = () => {
     const data = [
       { id: 1, prompt: 'Prompt 1', model: 'Model 1' },
       { id: 2, prompt: 'Prompt 2', model: 'Model 2' },
       // Add more data as needed
     ];
This setup will create a responsive table with sortable columns for chat bot items using **React Virtuoso** and **React Table**.

### List of Citations:
1.
2.
To generate a data table component for organizing a list of custom user prompts for a chat app, you can use UI components like those in UI Bakery or Retool. Hereâ€™s a step-by-step guide:

### Using UI Bakery

1. **Add a Table Component**:
   - Click the "Add Component" button and select the "Table" component from UI Bakery.

2. **Configure Columns**:
   - Dynamic columns can be configured using JavaScript mode. Click the JS button next to the columns section to enable dynamic mode.
   - Specify columns using an array of objects, defining properties like `prop` (data property to display), `type` (available types like 'number', 'string', 'text', etc.), and `primaryKey` (at least one column must be a primary key) if necessary.
To generate a responsive prompt display table with sortable columns, row highlight on hover, and pagination, you can follow these steps:

### 1. **HTML Structure**
Create the basic table structure using HTML:

```html
<table id="prompt-table">
  <thead>
    <tr>
      <th>Header 1</th>
      <th>Header 2</th>
      <th>Header 3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Cell 1</td>
      <td>Cell 2</td>
      <td>Cell 3</td>
    </tr>
    <!-- Add more rows here -->
  </tbody>
</table>

<div id="pagination">
  <!-- Pagination controls will be placed here -->
</div>
```

### 2. **CSS for Responsiveness**
Use CSS to make the table responsive and enhance its appearance:

```css
#prompt-table {
  width: 100%;
  border-collapse: collapse;
}

#prompt-table th, #prompt-table td {
  padding: 10px;
  border: 1px solid #ddd;
}

#prompt-table th {
  background-color: #f0f0f0;
}

#prompt-table tbody tr:hover {
  background-color: #f9f9f9;
}
To generate a data table component for organizing a list of chatbot preset data, you can follow these steps:

1. **Choose a Platform**: Select a platform that supports data table components, such as Google Sheets or a form builder like Form.io.

2. **Prepare Data**: Ensure your data is in a structured format, ideally in a JSON or CSV file.

3. **Use Google Sheets**:
   - **Manual Method**: Highlight the text, go to `Data`, and select `Split text to columns` to split the data into separate columns.
   - **Automate with Formulas**: Use the `ARRAYFORMULA` function to convert a single column of names into a table with multiple columns.
   - **Add-ons**: Utilize add-ons like BulletsToTable.com, Power Tools, or Table Formatter to convert text to tables and customize formatting.
  EXTRACTED KEYWORDS: responsive table, sortable columns, chat bot items, prompts, models
  IDENTIFIED UI LIBRARIES: 
  IDENTIFIED JS LIBRARIES: 
  IDENTIFIED COMPONENT TYPES: responsive table, sortable columns
  DOCUMENTATION CONTENT FROM SCRAPED UI LIBRARY CONTENT: 

  --- USER PROMPT/QUERY ---

  USER PROMPT/QUERY: generate a responsive table with sortable columns for chat bot items (promtps, models, etc.)

  --- PERPLEXITY WEB SEARCH RESULTS ---

  RESULTS: To generate a responsive table with sortable columns for chat bot items (prompts, models, etc.), you can use a library like **React Virtuoso** which supports virtualized rendering and is compatible with various UI libraries, including React Table and MUI Table. Hereâ€™s a step-by-step guide:

1. **Install React Virtuoso**:
   ```bash
   npm install react-virtuoso
   ```

2. **Create the Table Component**:
   ```jsx
   import * as React from 'react';
   import * as ReactDOM from 'react-dom';
   import { TableVirtuoso } from 'react-virtuoso';

   const App = () => {
     const data = [
       { id: 1, prompt: 'Prompt 1', model: 'Model 1' },
       { id: 2, prompt: 'Prompt 2', model: 'Model 2' },
       // Add more data as needed
     ];

     return (
       <div style={{ height: '400px' }}>
         <TableVirtuoso
           totalCount={data.length}
           itemContent={(index) => (
             <tr key={data[index].id}>
               <td>{data[index].prompt}</td>
               <td>{data[index].model}</td>
             </tr>
           )}
         />
       </div>
     );
   };

   ReactDOM.render(<App />, document.getElementById('root'));
   ```

3. **Add Sorting**:
   You can add sorting functionality by using a library like **React Table** which works seamlessly with **React Virtuoso**. Hereâ€™s an example using **React Table**:

   ```jsx
   import * as React from 'react';
   import * as ReactDOM from 'react-dom';
   import { TableVirtuoso, GroupedVirtuoso } from 'react-virtuoso';
   import { useTable } from 'react-table';

   const data = [
     { id: 1, prompt: 'Prompt 1', model: 'Model 1' },
     { id: 2, prompt: 'Prompt 2', model: 'Model 2' },
     // Add more data as needed
   ];

   const columns = [
     {
       Header: 'Prompt',
       accessor: 'prompt',
       sortType: 'asc',
     },
     {
       Header: 'Model',
       accessor: 'model',
       sortType: 'asc',
     },
   ];

   const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(
     {
       columns,
       data,
     },
     useSortBy,
   );

   return (
     <div style={{ height: '400px' }}>
       <TableVirtuoso
         totalCount={data.length}
         itemContent={(index) => (
           <tr {...getTableBodyProps(index)} key={data[index].id}>
             {headerGroups.map((headerGroup) => (
               <th {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>
                 {headerGroup.headers.map((column) => (
                   <th {...column.getHeaderProps(column.getSortByToggleProps())} key={column.id}>
                     {column.render('Header')}
                   </th>
                 ))}
               </th>
             ))}
             {rows.map((row, i) => {
               prepareRow(row);
               return (
                 <tr {...row.getRowProps()} key={row.id}>
                   {row.cells.map((cell) => (
                     <td {...cell.getCellProps()} key={cell.column.id}>
                       {cell.render('Cell')}
                     </td>
                   ))}
                 </tr>
               );
             })}
           </tr>
         )}
       />
     </div>
   );
   ```

This setup will create a responsive table with sortable columns for chat bot items using **React Virtuoso** and **React Table**.

### List of Citations:
1.
2.

  CITATIONS: 

  --- FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- RESPONSE FORMATTING INSTRUCTIONS ---

  Format your response as a valid JSON object with markdown content.

  ## Formatting Guide:
  - **Component Explanation**: Provide a clear and concise description of what the component does, why itâ€™s useful, and how it fits into the larger application.
  - **Code Blocks**: Ensure the component code is wrapped in ``` code blocks.
  - **Usage Examples**: Provide usage examples as separate code blocks in markdown.
  - **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
  - **Structure**: Ensure the response is structured as JSON, where markdown is used for code and explanations.

  ## Example Response Format:

  ```json
  {
    "explanation": "This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.",
    "code": ```
    import React from 'react';
    import Button from '@mui/material/Button';

    const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
      <Button variant="contained" color={color} size={size} onClick={onClick}>
        Click Me
      </Button>
    );

    export default CustomButton;
    ```,
    "usageExample": ```
    // Usage in a parent component
    import CustomButton from './CustomButton';

    const ParentComponent = () => (
      <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
    );

    export default ParentComponent;
    ```,
    "references": "Material UI Button Documentation: https://mui.com/components/buttons/"
  }
  ```

  Ensure the response follows this structure and adheres to the guidelines provided.
  The final response data should look as follows JSON (json): { "content": "Your Markdown formatted message", "type": "markdown" }.
  
  