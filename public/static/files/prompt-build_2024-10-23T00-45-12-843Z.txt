
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a popup component reusable
Generate advanced styled dialog component
Generate a data table component for displaying a list of UI compoennt library data
Generate a dashboard component for displaying UI data for my project including icons for the componenets
Generate a modal compoennt with data table
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages provided are empty, indicating no content to summarize. |
      | Previous 5 User Inquiries Summarized:  
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a reusable icon button component with extensive customizable options, follow these steps:

1. **Create the Basic Component**:
   - Start with a basic button component that can be reused. This can be achieved using a library like React or by creating it from scratch. For example, you can use the `Button` component from the `@equinor/echo-components` package, which supports various styles, sizes, and states.

   ```jsx
   import { Button } from './Button';

   const Template: StoryFn<Button.Props> = (args) => (
     <div className="button-container">
       <Button {...args} />
     </div>
   );
   ```
To generate a dashboard component for displaying UI data, including icons and options for organizing the data, you can use a combination of the following components and tools:
5. **Using Polymorphic Component**:
    ```typescript
    @Component({
      selector: 'app-my-polymorphic-component',
      template: `
        <ng-container *polymorphicComponentOutlet="tooltipComponent; inputs: inputs; outputsHandlers: outputHandlers"></ng-container>
      `
    })
    export class MyPolymorphicComponent {
      public readonly tooltipComponent = new PolymorphicComponent<TooltipContent>(TooltipContent);
      public readonly inputs = {
        content: 'Custom tooltip content'
      };
      public readonly outputHandlers = {
        close: () => {
          console.log('Close clicked');
        }
      };
    }
    ```
"language": "jsx",
    "description": ""
  },
  {
    "component": "Tooltip",
    "title": "Untitled",
    "code": "<button title=\"some more information\">A button</button>\nCopyCopied(or ⌘C)",
    "language": "jsx",
    "description": ""
  },
  {
    "component": "Tooltip",
    "title": "Untitled",
To generate a dashboard component for displaying UI data, you can use a combination of React components and Tailwind CSS, as suggested by TailGrids React Dashboard Components. Here’s a sample component that includes icons for various elements:

### Sample Dashboard Component

```jsx
import React from 'react';
import { CalendarIcon, ChartBarIcon, ChatBubbleLeftIcon, CommentDotsIcon, BellIcon, UserIcon, LinkIcon } from '@heroicons/react/outline';

const DashboardComponent = () => {
  return (
    <div className="flex flex-wrap">
      {/* Calendar Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CalendarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Calendar</span>
      </div>

      {/* Chart Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChartBarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Charts</span>
      </div>
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a React component, you can use the `nx` command-line tool, which is part of the Nx framework. Here’s how you can do it:

1. **Install Nx**: Ensure you have Nx installed. If not, you can install it using npm:
   ```bash
   npm install -g @nrwl/cli
   ```

2. **Generate a Component**: Use the `nx` command to generate a React component. For example, to create a component named `my-component` under the `libs/ui` project, run:
   ```bash
   nx g @nx/react:component libs/ui/src/my-component
   ```

This command will create a new React component in the specified directory with the default setup and configurations.

Alternatively, if you're using WebStorm, you can create a new React component by extracting JSX code from an existing component or by using the built-in code snippets and refactoring tools provided by WebStorm.

### List of Citations:
3. **Using Nx**:
   - **Create a React Component**: Nx provides a command-line interface to generate React components. You can use the `nx g @nx/react:component` command to create a new React component under a specified project directory. For example, to create a component named `my-component` under the `libs/ui` project, you would run `nx g @nx/react:component libs/ui/src/my-component`.

Each method has its own advantages and is suited for different scenarios, such as integrating with design tools like Figma or using a build tool like Nx.
To generate a React component, you can use several tools and methods depending on your development environment and needs. Here are a few approaches:

1. **Using WebStorm**:
   - **Extract Component**: In WebStorm, you can extract JSX code from the render method of an existing component to create a new React component. This can be done by selecting the code you want to extract and choosing "Extract Component" from the context menu or by pressing `Ctrl+Alt+Shift+T` and selecting "Extract Component" from the popup.

2. **Using Anima in Figma**:
   - **Convert Figma Designs to React Code**: Anima allows you to convert Figma designs into clean React code. You can install the Anima plugin in Figma, select the Figma screens you want to convert, and generate React code for full flows or specific components. This method supports pixel-perfect, responsive layouts, and various styling options like CSS, SCSS, and Tailwind.
To generate a dialog component in Angular that allows users to write syntax-highlighted and formatted JSON data, you can use the following steps:

1. **Install Required Dependencies**:
   Ensure you have the necessary dependencies installed. You can use tools like `ng generate component` with schematic preferences from your `angular.json` file.

2. **Create the Component**:
   Use the `ng generate component` command to create the dialog component. This command will generate a basic component structure with HTML, CSS, and TypeScript files.

3. **Customize the Component**:
   In the component's HTML file (`dialog.component.html`), you can use an `<editor>` component like Monaco Editor or ACE Editor to provide syntax highlighting for JSON data. For example, you can use Monaco Editor by including the following code:

```html
<monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
```
To generate a reusable React button component, you can follow these steps:

1. **Create the Button Component**:
   - Start by defining a React functional component for the button. This component should accept various props to customize its appearance and behavior.

   ```jsx
   import React from 'react';

   interface ButtonProps {
     type?: 'button' | 'submit' | 'reset';
     label: string;
     onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;
     style?: { [key: string]: any };
     className?: string;
   }

   const Button: React.FC<ButtonProps> = ({ type = 'button', label, onClick, style, className }) => {
     return (
       <button
         type={type}
         className={className}
         style={style}
         onClick={onClick}
       >
         {label}
       </button>
     );
   };

   export default Button;
   ```
      | Raw Perplexity Search Results Data: 
      | -- Results: To create a component in different frameworks, follow these steps:

### 1. Create a React Component with Nx
Use Nx to generate a new React component. You can use the following command:
```bash
nx g @nx/react:component libs/ui/src/my-component
```
This will create a new component named `my-component` under the `libs/ui` project in your Nx workspace.

### 2. Create a Component in FlutterFlow
In FlutterFlow, you can create a component from scratch by clicking the **Add Button** in the **Page Selector** or **Widget Tree** tab and choosing **New Component**. You can also convert an existing widget into a reusable component by right-clicking on the root widget and selecting **Convert to Component**.

### 3. Create a Component in Uniform
To create a new React component in Uniform, follow these steps:
1. **Add the Component Directory and File**:
   - Add the following directory and file in your source code:
     ```typescript
     // src/canvas/VideoPlayer/index.ts
     import { ComponentProps, registerUniformComponent } from '@uniformdev/canvas-react';
     import { VideoPlayer } from './VideoPlayer';

     export type VideoPlayerProps = ComponentProps<{ id: string; source: string; title: string; description: string; }>;

     registerUniformComponent({ type: 'videoPlayer', component: VideoPlayer });
     export default VideoPlayer;
     ```
2. **Register the Component**:
   - Update the file to make the video player available to the front-end application:
     ```typescript
     // src/canvas/index.ts
     import './Accordion';
     import './AccordionItem';
     import './AddToCart';
     import './Banner';
     import './Breadcrumbs';
     import './Button';
     import './CallToAction';
     import './Card';
     import './Countdown';
     import './VideoPlayer'; // Add this line
     import './Tabs';
     import './Tab';
     import './CardBlock';
     import './Carousel';
     import './_containers/Container';
     import './_containers/Grid';
     import './_containers/GridItem';
     import './ContentBlock';
     import './Divider';
     ```
3. **Add the Component to a Composition**:
   - In Uniform, open the project map, navigate to `Home > Articles > The Golden Ratio of Coffee`, and add the `Video Player` component under the `Breadcrumbs` component.

### 4. Create a Component Using new-component CLI Tool
Use the `new-component` CLI tool to create a new React component quickly. Here’s how you can do it:
1. **Install the CLI Tool**:
   - Install the CLI tool globally using npm:
     ```bash
     npm i -g new-component
     ```
2. **Create a New Component**:
   - Run the following command to create a new component:
     ```bash
     new-component MyNewComponent
     ```
   This will create a new directory with the necessary files at `src/components/MyNewComponent`. The files will be formatted according to your Prettier configuration.

### Summary
- **Nx**: Use `nx g @nx/react:component` to generate a new React component.
- **FlutterFlow**: Click **Add Button** in **Page Selector** or **Widget Tree** and choose **New Component**.
- **Uniform**: Add directory and file, register component, and add to composition.
- **new-component CLI Tool**: Install globally, run command to create a new component.

### Citations https://nx.dev/nx-api/react/generators/component https://docs.flutterflow.io/resources/ui/components/creating-components/ https://docs.uniform.app/docs/learn/tutorials/csk/create-component https://www.npmjs.com/package/new-component
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: create, component
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: create componeent
  EXTRACTED KEYWORDS: create, component

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  