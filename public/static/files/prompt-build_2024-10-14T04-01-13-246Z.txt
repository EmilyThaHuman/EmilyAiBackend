
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a file system sidebar component for managing code files saved from chat bot responses
Generate a datatable component for displaying code snippets
Generate a react input component with automatic-text animation
"content": "# File System Sidebar Component for Managing Code Files from Chat Bot Responses\n\n## Component Explanation\nThis component serves as a sidebar for managing code files generated from chat bot responses. It's designed with React and TailwindCSS for a modern, responsive UI. The sidebar includes features such as file listing, search functionality, and dark mode support. The design rationale focuses on providing a user-friendly interface for developers to organize and access their code files efficiently.\n\n## Code\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nconst FileSystemSidebar = () => {\n  const [files, setFiles] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    // Fetch files from the backend or local storage\n    setFiles(['example.js', 'snippet.txt']);\n  }, []);\n\n  return (\n    <div className=\"bg-gray-800 text-white h-full p-4\">\n      <input\n        type=\"text\"\n        placeholder=\"Search
"content": "# File System Sidebar Component for Managing Code Files from Chat Bot Responses\n\n## Component Explanation\nThis component serves as a sidebar for managing code files generated from chat bot responses. It's designed with React and TailwindCSS for a modern, responsive UI. The sidebar includes features such as file listing, search functionality, and dark mode support. The design rationale focuses on providing a user-friendly interface for developers to organize and access their code files efficiently.\n\n## Code\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nconst FileSystemSidebar = () => {\n  const [files, setFiles] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  useEffect(() => {\n    // Fetch files from the backend or local storage\n    setFiles(['example.js', 'snippet.txt']);\n  }, []);\n\n  return (\n    <div className=\"bg-gray-800 text-white h-full p-4\">\n      <input\n        type=\"text\"\n        placeholder=\"Search
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages focus on generating various React components, including a button component for general purposes, another button component specifically for file uploads, and a data table component for organizing UI library documents. These components are requested for AI agent creation using a vector database. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 670c30063a88f6a7d8fcc4131]: Request to generate a general React button component.
[Summary 2][id 670c1fc059ab56a3c92c10fe1]: Request to generate a React button component for file uploads.
[Summary 3][id 670c1e0a59ab56a3c92c10ee1]: Request to generate a general React button component.
[Summary 4][id 670af2f746ab40ecae9bb9f01]: Request to generate a data table component for organizing UI library documents in a vector database for AI agent creation.
[Summary 5][id 670af210f6d3b57023a1f9791]: Request to generate a generic React component. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: "code": "Copy(or ⌘C)<Tooltip title={longText}>\n  <Button sx={{ m: 1 }}>Default Width [300px]</Button>\n</Tooltip>\n<CustomWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>Custom Width [500px]</Button>\n</CustomWidthTooltip>\n<NoMaxWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>No wrapping</Button>\n</NoMaxWidthTooltip><Tooltip title={longText}>\n  <Button sx={{ m: 1 }}>Default Width [300px]</Button>\n</Tooltip>\n<CustomWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>Custom Width [500px]</Button>\n</CustomWidthTooltip>\n<NoMaxWidthTooltip title={longText}>\n  <Button sx={{ m: 1 }}>No wrapping</Button>\n</NoMaxWidthTooltip>\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.npm__react-simple-code-editor__textarea:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support
color in IE\n    */\n  .npm__react-simple-code-editor__textarea {\n    color: transparent !important;\n  }\n\n  .npm__react-simple-code-editor__textarea::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\nPress Enter to start editing",
.npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
Press Enter to start editing
.npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
Press Enter to start editing
.npm__react-simple-code-editor__textarea::selection {
    background-color: #accef7 !important;
    color: transparent !important;
  }
}
Press Enter to start editing
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a file system sidebar component for managing code files saved from chat bot responses, you can design it using HTML, CSS, and JavaScript. Here’s a basic structure:

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code File Manager</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="sidebar">
        <h2>Code File Manager</h2>
        <button id="create-btn">Create New File</button>
        <button id="list-btn">List Files</button>
        <div id="file-list"></div>
        <div id="file-content"></div>
    </div>
To generate a dialog component in Angular that allows users to write syntax-highlighted and formatted JSON data, you can use the following steps:

1. **Install Required Dependencies**:
   Ensure you have the necessary dependencies installed. You can use tools like `ng generate component` with schematic preferences from your `angular.json` file.

2. **Create the Component**:
   Use the `ng generate component` command to create the dialog component. This command will generate a basic component structure with HTML, CSS, and TypeScript files.

3. **Customize the Component**:
   In the component's HTML file (`dialog.component.html`), you can use an `<editor>` component like Monaco Editor or ACE Editor to provide syntax highlighting for JSON data. For example, you can use Monaco Editor by including the following code:

```html
<monaco-editor [value]="jsonData" [language]="json" (onChange)="onChange($event)"></monaco-editor>
```
To generate a React component, you can use the `nx` command-line tool, which is part of the Nx framework. Here’s how you can do it:

1. **Install Nx**: Ensure you have Nx installed. If not, you can install it using npm:
   ```bash
   npm install -g @nrwl/cli
   ```

2. **Generate a Component**: Use the `nx` command to generate a React component. For example, to create a component named `my-component` under the `libs/ui` project, run:
   ```bash
   nx g @nx/react:component libs/ui/src/my-component
   ```

This command will create a new React component in the specified directory with the default setup and configurations.

Alternatively, if you're using WebStorm, you can create a new React component by extracting JSX code from an existing component or by using the built-in code snippets and refactoring tools provided by WebStorm.

### List of Citations:
To generate a dark-themed dialog component with input for writing syntax highlighted and formatted JSON data, you can use the following steps in Visual Studio Code (VS Code):

1. **Customize the Theme**:
   - Use the `workbench.colorCustomizations` user setting to customize the colors of the dialog component. For a dark theme, you can set the background and foreground colors to dark shades. For example:
   ```json
   "workbench.colorCustomizations": {
     "input.background": "#333333",
     "input.border": "#444444",
     "input.foreground": "#ffffff",
     "input.placeholderForeground": "#888888",
     ...
   }
   ```

2. **Syntax Highlighting for JSON**:
   - VS Code has built-in support for syntax highlighting JSON. When you write JSON in the input field, it will automatically highlight the syntax.

3. **Formatting JSON**:
   - You can use an extension like `json formatter` to format the JSON data as you type. This will ensure that the JSON is correctly formatted and easy to read.
To generate a React component, you can use several tools and methods depending on your development environment and needs. Here are a few approaches:

1. **Using WebStorm**:
   - **Extract Component**: In WebStorm, you can extract JSX code from the render method of an existing component to create a new React component. This can be done by selecting the code you want to extract and choosing "Extract Component" from the context menu or by pressing `Ctrl+Alt+Shift+T` and selecting "Extract Component" from the popup.

2. **Using Anima in Figma**:
   - **Convert Figma Designs to React Code**: Anima allows you to convert Figma designs into clean React code. You can install the Anima plugin in Figma, select the Figma screens you want to convert, and generate React code for full flows or specific components. This method supports pixel-perfect, responsive layouts, and various styling options like CSS, SCSS, and Tailwind.
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a React text and code file content viewer with syntax highlighting support, you can use the `@uiw/react-codemirror` package, which offers extensive customization options and supports syntax highlighting. Here’s a basic example to get you started:

1. **Install the necessary packages**:
   ```bash
   npm install @uiw/react-codemirror
   ```

2. **Create the React component**:
   ```jsx
   import React from 'react';
   import { Editor, Highlight, ProseMirror } from '@uiw/react-codemirror';
   import { json } from '@codemirror/lang-json';
   import { markdown } from '@codemirror/lang-markdown';

   const CodeViewer = () => {
     const [value, setValue] = React.useState('');

     return (
       <div>
         <Editor
           value={value}
           onChange={(value) => setValue(value)}
           height="100%"
           extensions={[markdown(), json()]}
           theme="monokai"
           style={{
             fontSize: '14px',
             padding: '10px',
             borderRadius: '5px',
             overflow: 'auto',
           }}
         />
         <Highlight value={value} />
       </div>
     );
   };

   export default CodeViewer;
   ```

3. **Customize the component as needed**:
    - You can add more extensions for different languages.
    - Customize the theme and styles.
    - Add additional features like line numbering, folding, etc.

4. **Use the component in your app**:
    ```jsx
    import React from 'react';
    import ReactDOM from 'react-dom';
    import CodeViewer from './CodeViewer';

    ReactDOM.render(
      <React.StrictMode>
        <CodeViewer />
      </React.StrictMode>,
      document.getElementById('root')
    );
    ```

This will give you a basic text and code file content viewer with syntax highlighting support. You can further customize it to suit your needs by adding more features or plugins.

### Additional Customization

For more advanced customization, you might want to explore other packages like `react-ace` or `react-monaco-editor`, which offer similar functionality but with different feature sets and customization options.

### Example with MDX

If you're using MDX with Docusaurus, you can also use the `ReactMarkdown` component from `react-markdown` and integrate it with syntax highlighting plugins like `remark-gfm` and custom components for syntax highlighting.

```jsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';

const CodeViewer = ({ children }) => {
  return (
    <ReactMarkdown
      children={children}
      remarkPlugins={[remarkGfm]}
      components={{
        code({ node, inline, className, children, ...props }) {
          const match = /language-(\w+)/.exec(className || '');
          if (!match) return <code {...props}>{children}</code>;

          const language = match;
          const value = props Inline ? children : React.Children.toArray(children);
          return (
            <SyntaxHighlighter
              style={dark}
              language={language}
              PreTag="div"
              {...props}
            >
              {value}
            </SyntaxHighlighter>
          );
        },
      }}
    />
  );
};

export default CodeViewer;
```

This example integrates `react-markdown` with `react-syntax-highlighter` to provide syntax highlighting for code blocks in MDX files.

### Summary

To generate a React text and code file content viewer with syntax highlighting support, you can use packages like `@uiw/react-codemirror`, `react-ace`, or `react-monaco-editor`. For MDX files, integrating `react-markdown` with syntax highlighting plugins and custom components can provide the desired functionality.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: react, text, code file, content viewer, syntax highlighting, support
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a react text and code file content viewer with syntax hightlighting support
  EXTRACTED KEYWORDS: react, text, code file, content viewer, syntax highlighting, support

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  