
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a resuable button component with moddable colors
Generate advanced styled dialog component
Generate a Progress componenet and logic to display for a file loading/upload component
Generate a react input component with automatic-text animation
Generate a popup component reusable
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages are a series of nonsensical text entries by a single user over a session, indicating testing or random input without meaningful content. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671900717facfe6b62bde2451]: User submits a nonsensical text input.
[Summary 2][id 6718fc4e673133571cffa6531]: Another instance of random text submitted by the user.
[Summary 3][id 6718fb450b982f4ff0ec70601]: User continues to input random, meaningless text.
[Summary 4][id 6718f9c55200b9b85ddeceeb1]: Further nonsensical text input by the user.
[Summary 5][id 6718f9090ae1d00431b7ba651]: User posts yet another entry of random text. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To build a progress bar component that visually represents the completion status with customizable properties like value, max, color, and animated transitions, you can use a combination of HTML, CSS, and JavaScript. Below is an example using Tailwind CSS for styling and React for the dynamic component:

### Progress Bar Component Example

```html
<!-- HTML Structure -->
<div class="w-full bg-gray-200 rounded-full">
  <div class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-l-full animate-progress" style="width: {{percentage}}%" id="progress-bar">{{percentage}}%</div>
</div>

<!-- React Component -->
import React, { useState, useEffect } from 'react';

const ProgressBar = ({ value, max, color }) => {
  const [percentage, setPercentage] = useState(0);

  useEffect(() => {
    setPercentage((value / max) * 100);
  }, [value, max]);
const ProgressBar = ({ value, max, color }) => {
  const [percentage, setPercentage] = useState(0);

  useEffect(() => {
    setPercentage((value / max) * 100);
  }, [value, max]);

  return (
    <div className={`w-full bg-gray-200 rounded-full`}>
      <div
        className={`bg-${color}-600 text-xs font-medium text-${color}-100 text-center p-0.5 leading-none rounded-l-full animate-progress`}
        style={{ width: `${percentage}%` }}
        id="progress-bar"
      >
        {percentage}%
      </div>
    </div>
  );
};

export default ProgressBar;
```

### Explanation

1. **HTML Structure**:
   - The outer div sets the width and background color of the progress bar.
   - The inner div sets the background color of the progress bar and its text.
To generate a dashboard component for displaying UI data, you can use a combination of React components and Tailwind CSS, as suggested by TailGrids React Dashboard Components. Here’s a sample component that includes icons for various elements:

### Sample Dashboard Component

```jsx
import React from 'react';
import { CalendarIcon, ChartBarIcon, ChatBubbleLeftIcon, CommentDotsIcon, BellIcon, UserIcon, LinkIcon } from '@heroicons/react/outline';

const DashboardComponent = () => {
  return (
    <div className="flex flex-wrap">
      {/* Calendar Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <CalendarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Calendar</span>
      </div>

      {/* Chart Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <ChartBarIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Charts</span>
      </div>
{/* Drawer Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        <LinkIcon className="h-6 w-6 inline mr-2" />
        <span className="inline">Drawers</span>
      </div>

      {/* Horizontal Menu Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for horizontal menu items */}
        {/* Example Icon */}
        {/* <ArrowRightIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Horizontal Menu</span> */}
      </div>

      {/* Map Component */}
      <div className="w-full p-4 mb-4 bg-gray-100 rounded-lg">
        {/* Add icons for map items */}
        {/* Example Icon */}
        {/* <LocationMarkerIcon className="h-6 w-6 inline mr-2" /> */}
        {/* Example Text */}
        {/* <span className="inline">Maps</span> */}
      </div>
You can customize the size by setting the `height` and `width` props, and change the color by setting the `color` prop.

These components are suitable for async operations and can be easily integrated into your application to provide a visually appealing loading experience.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a black and white gradient login component, you can use Adobe Illustrator or a similar design tool. Here’s a step-by-step guide using Adobe Illustrator:

1. **Open Adobe Illustrator**: Launch Adobe Illustrator and create a new document.

2. **Create a Rectangle**: Draw a rectangle where you want the gradient to be applied. This will be your login component.

3. **Access the Gradient Panel**: Go to `Window` > `Gradient` to open the Gradient panel.

4. **Create a Linear Gradient**:
   - Click on the `Gradient Type` buttons in the Control panel and select `Linear`.
   - In the Gradient panel, click on the `Gradient** drop-down and choose `Linear**.
   - Click on the `Color Stop** buttons to add color stops. Click on the first color stop and select black (`#000000`).
   - Click on the second color stop and select white (`#FFFFFF`).
   - Adjust the position of the color stops to control the gradient's direction and intensity.
5. **Apply the Gradient**:
   - Select your rectangle and click on the `Gradient** tool in the toolbar.
   - Drag the Gradient tool from the top-left corner of your rectangle to the bottom-right corner. This will apply the linear gradient to your rectangle.

6. **Adjust the Gradient**:
   - If needed, you can adjust the gradient by modifying the color stops or changing the gradient type (e.g., radial or freeform) in the Gradient panel.

7. **Save Your Gradient**:
   - To save the gradient for future use, click on the `New** button in the Gradient panel and name your gradient. Then, you can apply this saved gradient to other objects in your document.

This process will help you create a simple black and white gradient login component in Adobe Illustrator. You can further customize the gradient by adding more color stops or using different gradient types for a unique effect.
To generate a gradient ghost button component, you can use CSS and HTML to create the button and apply a gradient effect. Here’s a step-by-step guide:

1. **HTML Structure**:
   ```html
   <a class="ghost-button" href="example-link.com">Click here!</a>
   ```

2. **CSS Styling**:
   ```css
   .ghost-button {
     display: inline-block;
     width: 400px;
     padding: 5px;
     color: #fff;
     background-color: transparent;
     border: 3px solid #fff;
     text-align: center;
     outline: none;
     text-decoration: none;
     transition: color 0.1s ease-out, background-color 0.1s ease-out, border-color 0.1s ease-out;
   }

   .ghost-button:hover, .ghost-button:active {
     background-color: #FFFF00; /* Change this to your desired gradient */
     border-color: #FFFF00;
     color: #fff;
     transition: color 0.1s ease-in, background-color 0.1s ease-in, border-color 0.1s ease-in;
   }
To build a `LoadingSpinnerWithProgressIndicatorAndTheming` component that visually represents loading progress with a spinner and optional progress bar, you can use a combination of Tailwind CSS and React. Here’s how you can approach it:

1. **Spinner Component**:
   - Use Tailwind CSS to create a CSS-based spinner. This will include classes for creating a circular shape and applying animations.

2. **Progress Bar Component**:
   - You can use a library like `react-loading-skeleton` for the progress bar, which automatically adapts to your app's styles and supports theming options.

3. **Theming Options**:
   - Implement theming options using props in React. For example, you can use `baseColor` and `highlightColor` props from `react-loading-skeleton` to customize the colors, and add additional props for customizing the spinner's colors and sizes.
const LoadingSpinnerWithProgressIndicatorAndTheming = ({ theme }) => {
  const { baseColor, highlightColor } = theme;

  return (
    <div className="flex justify-center items-center h-screen">
      {/* Spinner */}
      <div className={`w-16 h-16 border-4 border-${baseColor} border-t-transparent rounded-full animate-spin`} />
      
      {/* Progress Bar */}
      <Skeleton count={5} baseColor={baseColor} highlightColor={highlightColor} />
    </div>
  );
};

export default LoadingSpinnerWithProgressIndicatorAndTheming;

// Example Usage
// Importing the component and passing theme props
import React from 'react';
import LoadingSpinnerWithProgressIndicatorAndTheming from './LoadingSpinnerWithProgressIndicatorAndTheming';

const App = () => {
  const theme = { baseColor: '#202020', highlightColor: '#444' };

  return (
    <div>
      <LoadingSpinnerWithProgressIndicatorAndTheming theme={theme} />
    </div>
  );
};

export default App;
```
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a black and white gradient login component, you can use Adobe Illustrator or a similar design tool. Here’s a step-by-step guide using Adobe Illustrator:

1. **Open Adobe Illustrator**: Launch Adobe Illustrator and create a new document.

2. **Create a Rectangle**: Draw a rectangle where you want the gradient to be applied. This will be your login component.

3. **Access the Gradient Panel**: Go to `Window` > `Gradient` to open the Gradient panel.

4. **Create a Linear Gradient**:
   - Click on the `Gradient Type` buttons in the Control panel and select `Linear`.
   - In the Gradient panel, click on the `Gradient** drop-down and choose `Linear**.
   - Click on the `Color Stop** buttons to add color stops. Click on the first color stop and select black (`#000000`).
   - Click on the second color stop and select white (`#FFFFFF`).
   - Adjust the position of the color stops to control the gradient's direction and intensity.

5. **Apply the Gradient**:
   - Select your rectangle and click on the `Gradient** tool in the toolbar.
   - Drag the Gradient tool from the top-left corner of your rectangle to the bottom-right corner. This will apply the linear gradient to your rectangle.

6. **Adjust the Gradient**:
   - If needed, you can adjust the gradient by modifying the color stops or changing the gradient type (e.g., radial or freeform) in the Gradient panel.

7. **Save Your Gradient**:
   - To save the gradient for future use, click on the `New** button in the Gradient panel and name your gradient. Then, you can apply this saved gradient to other objects in your document.

This process will help you create a simple black and white gradient login component in Adobe Illustrator. You can further customize the gradient by adding more color stops or using different gradient types for a unique effect.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: black, white, gradient, login, component
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Login Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a a black and white gradient login compoenent
  EXTRACTED KEYWORDS: black, white, gradient, login, component

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  