
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
   import React from 'react';
   import PropTypes from 'prop-types';
   import styles from './MyComponent.module.css';
   import { useMyHook } from '../hooks/myHook';
   import { MyContext } from '../context/myContext';
   import MyIcon from '../icons/MyIcon';

   const MyComponent = ({ prop1, prop2 }) => {
     const { state, dispatch } = useMyHook();
     const { data } = useContext(MyContext);

     return (
       <div className={styles.myComponent}>
         <MyIcon />
         <h1>{data.title}</h1>
         <p>{data.description}</p>
         {/* Render additional components or content based on props and state */}
       </div>
     );
   };
   MyComponent.propTypes = {
     prop1: PropTypes.string.isRequired,
     prop2: PropTypes.number,
   };

   export default MyComponent;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a data table compoennt for handlign Ai Prompt data
Generate a file system component for saving code files saved from chat bot responses
Generate a data table component for listing chat messages
Generate a reusable form dialog with a variety of data table components displaying data about chat bots
Generate a floating UI button for setting chat input configs
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The task involves generating a data table component to organize a list of data and UI library documents that have been upserted into a vector database. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 66f03c3c2a7bc27b85b47d801]: Task to generate a data table component for organizing data and UI library documents in a vector database. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate an auto-suggest input component for prompts, you can use the principles of prompt engineering to ensure the prompt is clear, specific, and contextual. Here is a step-by-step guide:

1. **Clarity**: Ensure the prompt is clear and unambiguous. For example, instead of "Design an interface," say "Design a minimalistic electric car interface, focusing on sustainability aspects."

2. **Context**: Provide sufficient context to help the AI generate relevant responses. For instance, "Design a modern, user-friendly e-commerce website for a fashion brand, featuring a clean layout, easy navigation, and vibrant colors."

3. **Specificity**: Be specific about the information or format needed. For example, "Create a minimalist logo for a MedTech startup, using blue and white colors and incorporating a geometric shape."
1. **Create a Form Field**:
   - Use a text input field where users can enter their prompts.

2. **Auto-Suggest Functionality**:
   - Implement auto-suggest functionality that provides suggestions based on the above criteria.
   - For example, as the user types, suggest possible completions that match the clarity, context, specificity, and constraints criteria.

3. **Dynamic Prompt Generation**:
   - Use the selected options to generate a dynamic prompt that aligns with the user's input and the suggested criteria.

4. **Iterative Refinement**:
   - Provide an option for users to test and refine their prompts based on the suggested options.

By following these steps, you can create a comprehensive auto-suggest input component that helps users generate effective and relevant prompts for AI models.

### References

- **Prompt Engineering Guide for UX/UI Designers**: UXPin
- **Create a GPT Prompt**: Microsoft Learn
- **Automatic Prompt Optimization**: Galileo
variables: {

"customer_data":"",

"chat_query":""

}

})
```

This template can be extended with more variables and Mustache tags to enhance its functionality.

### Conclusion

By combining these features and best practices, you can create a robust prompt template editor component that supports seamless creation, management, and deployment of LLM prompts.

### References Portkey Docs: Prompt Templates Amazon Bedrock: Design a Prompt Salesforce Help: Manage Prompt Templates
To generate a prompt template editor component, you can leverage the features of tools like Portkey AI and Salesforce Prompt Builder, which offer robust capabilities for creating, managing, and deploying prompt templates. Here’s a concise overview of how you can build such a component:

1. **Use a Templating Engine**: Utilize a templating engine like Mustache, which is used by Portkey AI under the hood. Mustache allows you to define variables and incorporate them into your prompts, making them extensible.

2. **Variable Definition**: Define variables within the template that can be passed at runtime. For example, in Portkey AI, you can use `{{customer_data}}` and `{{chat_query}}` as variables.

3. **API Integration**: Integrate the prompt template editor with an API to deploy the templates seamlessly. Portkey AI allows you to create and manage prompts with just an API call.
### Example of an Auto-Suggest Input Component

```plaintext
Auto-Suggest Input Component:
  - **Input Type**: Text
  - **Placeholder Text**: "Enter your prompt"
  - **Auto-Suggest Options**:
    1. **Clarity Check**: Ensure the prompt is clear and unambiguous.
    2. **Context Provision**: Provide sufficient context to help the AI generate relevant responses.
    3. **Specificity Enhancement**: Be specific about the information or format needed.
    4. **Iterative Refinement**: Continuously test and refine prompts to improve results.
    5. **Constraints Addition**: Add constraints or guidelines to narrow down the AI’s responses.
```

### Implementation

To implement this in a tool like UXPin or any other design environment, you can use the following structure:

1. **Create a Form Field**:
   - Use a text input field where users can enter their prompts.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: ### Example Dashboard Components
- **Engagement Metrics**: Display the total number of chatbot sessions, engagement rate, and conversation length.
- **Performance Metrics**: Show response time, accuracy, and satisfaction scores.
- **Lead Generation**: Track the number of successful interactions or leads generated.
- **Alerts and Notifications**: Set up alerts for when model accuracy drops below a certain threshold or when unusual patterns in user behavior occur.

By following these steps, you can create a comprehensive dashboard to monitor and optimize your chatbot's performance effectively.

### List of Citations
To generate a dashboard to display data related to your chatbot app, such as tokens, message history, and prompt history, you can use the following tools:

1. **Zapier with ChatGPT**:
   - Zapier allows you to create dashboards and integrate various data sources, including chatbot interactions. You can use ChatGPT to analyze and display data like tokens, message history, and prompt history. For example, you can create a dashboard page to display your data with buttons to change it if needed, like a personal budget planner.

2. **BlazeSQL AI**:
   - BlazeSQL AI can connect to your database and generate insights based on SQL queries. You can use it to extract and display data related to your chatbot app, such as tokens and message history. It supports various SQL databases and allows for hyper-personalized dashboards.
To generate a dashboard to display data related to a chatbot, you can follow these steps:

1. **Collect Data**: Use chatbot analytics tools to collect relevant data such as engagement rates, satisfaction scores, conversation lengths, and other key performance indicators (KPIs) like the number of successful interactions or leads generated by the chatbot.

2. **Choose a Dashboard Tool**: Select a suitable no-code or low-code dashboard builder that can integrate with your chatbot analytics data. Tools like BlazeSQL or Phospho can be used to create custom dashboards with ease.

3. **Set Up Data Logging**: Integrate your chatbot interactions into the chosen dashboard tool. This can be done using APIs or by importing data files into the tool. Phospho, for instance, allows you to log user interactions and get real-time insights.
To generate a file system sidebar component for managing code files saved from chat bot responses, you can design a sidebar that integrates with the file system of your chosen operating system or file manager. Here’s a conceptual outline:

1. **Sidebar Design**:
   - **Layout**: Use HTML, CSS, and JavaScript to create a sidebar that appears on the side of your browser or application window. This can be done using web technologies like HTML5 and CSS3 for the layout and design.
   - **Content**: The sidebar will display a list of code files managed by the chat bot responses. Each file can be represented by a clickable item that shows the file name and possibly a brief description or preview.
To generate a file system sidebar component for managing code files saved from chat bot responses, you can design it using HTML, CSS, and JavaScript. Here’s a basic structure:

### HTML
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code File Manager</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="sidebar">
        <h2>Code File Manager</h2>
        <button id="create-btn">Create New File</button>
        <button id="list-btn">List Files</button>
        <div id="file-list"></div>
        <div id="file-content"></div>
    </div>
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a rating component for evaluating the quality of chat prompt responses, you can follow these steps and criteria, similar to those used in human evaluation frameworks:

1. **Define the Evaluation Criteria**:
   - **Instruction Following**: The response demonstrates a clear understanding of the task instructions, satisfying all requirements.
   - **Groundedness**: The response contains information included only in the context provided, without referencing outside information.
   - **Conciseness**: The response summarizes relevant details without significant loss in key information, avoiding verbosity or terseness.
   - **Fluency**: The response is well-organized and easy to read.
   - **Coherence**: The writing demonstrates a logical flow, with clear transitions and maintains relevance to the main point.

2. **Rating Rubric**:
   - **5: (Very Good)**: The summary follows instructions, is grounded, concise, fluent, and aligned with the reference summary.
   - **4: (Good)**: The summary follows instructions, is grounded, concise, and fluent but not aligned with the reference summary.
   - **3: (Okay)**: The summary mostly follows instructions, is grounded, but is not very concise and is not fluent and is not aligned with the reference summary.
   - **2: (Bad)**: The summary is grounded but does not follow the instructions.
   - **1: (Very Bad)**: The summary does not follow the instructions and lacks grounding.

3. **Evaluation Process**:
   - Assign a rating based on the criteria and rubric.
   - Provide step-by-step explanations for the rating, ensuring that the evaluation is transparent and consistent.

4. **Customization**:
   - If additional dimensions are needed, such as toxicity or accuracy, they can be included with custom evaluation dimensions defined by the work team.

5. **Reporting Metrics**:
   - Choose comparative or individual reporting metrics based on the number of models being evaluated. For comparative metrics, use options like Likert scale comparison, choice buttons, or ordinal rank to provide detailed feedback.

### Example Rating Component

```
Rating Component for Chat Prompt Response Quality

**Evaluation Criteria:**
1. **Instruction Following**
2. **Groundedness**
3. **Conciseness**
4. **Fluency**
5. **Coherence**

**Rating Rubric:**
1. **5: (Very Good)**
   - Summary follows instructions, is grounded, concise, fluent, and aligned with the reference summary.
2. **4: (Good)**
   - Summary follows instructions, is grounded, concise, and fluent but not aligned with the reference summary.
3. **3: (Okay)**
   - Summary mostly follows instructions, is grounded, but is not very concise and is not fluent and is not aligned with the reference summary.
4. **2: (Bad)**
   - Summary is grounded but does not follow the instructions.
5. **1: (Very Bad)**
   - Summary does not follow the instructions and lacks grounding.

**Evaluation Process:**
1. Read the user input carefully for task analysis.
2. Evaluate the quality of responses based on the criteria above.
3. Assign a rating following the Rating Rubric and provide step-by-step explanations for the rating.

**Customization:**
- Add custom evaluation dimensions as needed (e.g., toxicity, accuracy).
- Define the name and description of custom dimensions for clarity.

**Reporting Metrics:**
- Choose comparative or individual reporting metrics based on the number of models being evaluated.
- Use options like Likert scale comparison, choice buttons, or ordinal rank for detailed feedback.
```

### Citations:
1. - Amazon SageMaker documentation on human evaluation.
2. - Google Cloud Vertex AI documentation on metric prompt templates.
3. - Oracle Digital Assistant documentation on chatbot design and evaluation.
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: rating component, chat prompt, response quality
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a rating componenet for rating chat prompt response quality
  EXTRACTED KEYWORDS: rating component, chat prompt, response quality

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  