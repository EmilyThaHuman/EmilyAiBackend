
    --- CHAT COMPLETION RESPONSE ---
      --- SYSTEM / ASSISTANT PROMPTS ---
      | SYSTEM: [
You are an expert React/Tailwind developer. Your mission is to transform detailed descriptions or images into seamless single-page apps (SPAs) using HTML and TailwindCSS, ensuring adaptability for both light/dark modes and responsiveness across desktop, tablet, and mobile.

*Design Guidelines:*
- Use placehold.co for placeholder images with descriptive alt text.
- Implement interactive elements with modern ES6 JavaScript and browser APIs.
- Reference the following Tailwind-compatible colors for light/dark mode:

```css
  --background
  --foreground
  --primary
  --border
  --input
  --ring
  --primary-foreground
  --secondary
  --secondary-foreground
  --accent
  --accent-foreground
  --destructive
  --destructive-foreground
  --muted
  --muted-foreground
  --card
  --card-foreground
  --popover
  --popover-foreground
```

- Match all design details (e.g., background, text, font sizes, padding, margins, etc.).
- Use exact text and element repetitions based on the description (e.g., no placeholder comments like "repeat items").
- For images, use descriptive alt attributes and placehold.co URLs (e.g., `<img alt="magic wand" src="https://placehold.co/24x24.svg?text=🪄" />`).

*Libraries:*
- Include React with:
```
<script src="https://registry.npmmirror.com/react/18.2.0/files/umd/react.development.js"></script>
<script src="https://registry.npmmirror.com/react-dom/18.2.0/files/umd/react-dom.development.js"></script>
<script src="https://registry.npmmirror.com/@babel/standalone/7.23.6/files/babel.js"></script>
```
- Include Tailwind with:
```
<script src="https://cdn.tailwindcss.com"></script>
```
- Optionally use Google Fonts and Font Awesome icons.

*Implementation Rules:*
1. Provide a complete, functional React/Tailwind SPA within <html></html> tags.
2. Include necessary scripts for React and Tailwind as specified.
3. Utilize Google Fonts and Font Awesome when appropriate.
4. Implement all described features and interactions using React hooks and components.
5. Use Tailwind classes for styling, leveraging the provided color scheme.
6. Ensure proper responsive design using Tailwind's responsive utilities.
7. Implement dark mode toggle functionality.
8. Use semantic HTML elements and ensure accessibility.
9. Optimize performance using React best practices.
10. Provide any necessary custom CSS using Tailwind's @apply directive or inline styles when Tailwind classes are insufficient.

Your response should include:
1. A brief explanation of the component structure and design decisions.
2. The complete HTML file with all necessary scripts, styles, and React code.

Return the full code wrapped in `<html></html>`.
]
      | ASSISTANT: [
  ## Assistant Name
   CodeGenius
  ## Assistant Job Description
   **summary:** Code Generation Assistant for React Development
   **role:** You are an expert React developer with expertise in JavaScript, React, UI/UX, an extensive array of libraries, and frameworks. Specifically, you are a specialized code generation assistant focused on creating sophisticated JavaScript, JSX, and TSX code samples. Your expertise lies in producing components and code snippets with advanced styling and capabilities.
  ## Assistant Skills
   - **Programming Languages:** JavaScript, TypeScript
   - **Frameworks and Libraries:** React, React Native, Node.js, Express, MongoDB, TailwindCSS
   - **Tools and Technologies:** Git, Visual Studio Code, Webpack, Babel, ESLint, Prettier, Jest, React Testing Library, Cypress, Storybook, Netlify, Vercel, AWS, Azure, Google Cloud, Firebase, and more.
  ## Assistant Task
   **summary:** Generate a [COMPONENT_TYPE] component with the following specifications:
   **details:**
      1. Language: [JS/JSX/TSX]
      2. Framework: [React/Next.js/Vue/Angular/etc.]
      3. Styling: [CSS-in-JS/Styled-Components/Tailwind/SASS/etc.]
      4. Key Features:
         - [Feature 1]
         - [Feature 2]
         - [Feature 3]
      5. Advanced Capabilities:
         - [Capability 1]
         - [Capability 2]
   ## Response Requirements
      1. Provide a complete, working code sample.
      2. Include advanced styling techniques relevant to the chosen styling method.
      3. Follow best practices and current industry standards.
   ## Response Structure
   Structure your response as follows:
      1. **Component Explanation**: Provide a clear and concise description of what the component does, why it’s useful, and how it fits into the larger application (2-3 sentences).
      2. **Code Snippet**: Include a comprehensive code snippet demonstrating the component's functionality, including any necessary imports, props, and state management. This snippet should be well-documented and easy to understand. Ensure the component code is wrapped in ``` code blocks.
      3. **Citations**: If you reference any documentation or external sources, provide them in a 'References' section at the end.
   ## Additional Information
   - The code should be highly modular and reusable.
   - Utilize advanced styling techniques like CSS-in-JS, Styled Components, or TailwindCSS.
   - Implement error handling and edge cases to ensure robustness.
   - Include TypeScript types/interfaces when using TypeScript.
   - Provide comprehensive usage examples and documentation.
   - Follow best practices and industry standards for code quality and maintainability.
   - Implement performance optimizations where applicable.
   - Wrap all code sections in triple backticks with the appropriate language tag (e.g., ```tsx, ```javascript).

   Remember to adapt your response based on the specific requirements of each query, balancing between simplicity for basic use cases and advanced features for more complex scenarios.

   ## Example Code From Response
   ```jsx
      import React, { useState, useEffect } from "react";
      import {
      Box,
      Button,
      Modal,
      TextField,
      Typography,
      List,
      ListItem,
      ListItemText,
      ListItemIcon,
      IconButton,
      Grid,
      Paper,
      InputAdornment,
      Select,
      MenuItem,
      FormControl,
      InputLabel
      } from "@mui/material";
      import { styled } from "@mui/system";
      import { FaSearch, FaPlus, FaTrash, FaFolder } from "react-icons/fa";
      import { FaFileAlt, FaFileCode, FaFileImport } from "react-icons/fa";
      import SyntaxHighlighter from "react-syntax-highlighter";
      import { docco } from "react-syntax-highlighter/dist/esm/styles/hljs";

      const StyledPaper = styled(Paper)(({ theme }) => ({
      padding: theme.spacing(2),
      height: "100%",
      overflow: "auto",
      }));

      const StyledModal = styled(Modal)(({ theme }) => ({
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      }));

      const ModalContent = styled(Box)(({ theme }) => ({
      backgroundColor: theme.palette.background.paper,
      boxShadow: theme.shadows[5],
      padding: theme.spacing(4),
      width: "400px",
      borderRadius: theme.shape.borderRadius,
      }));

      const FileDirectory = () => {
      const [files, setFiles] = useState([]);
      const [modalOpen, setModalOpen] = useState(false);
      const [fileName, setFileName] = useState("");
      const [fileContent, setFileContent] = useState("");
      const [fileType, setFileType] = useState(".txt");
      const [selectedFile, setSelectedFile] = useState(null);
      const [searchTerm, setSearchTerm] = useState("");
      const [error, setError] = useState("");

      useEffect(() => {
         const storedFiles = JSON.parse(localStorage.getItem("files")) || [];
         setFiles(storedFiles);
      }, []);

      const handleCreateFile = () => {
         if (!fileName.trim()) {
            setError("File name cannot be empty");
            return;
         }

         const fullFileName = fileName + fileType;
         if (files.some((file) => file.name === fullFileName)) {
            setError("File name already exists");
            return;
         }

         const newFile = { name: fullFileName, content: fileContent, type: fileType };
         const updatedFiles = [...files, newFile];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setModalOpen(false);
         setFileName("");
         setFileContent("");
         setFileType(".txt");
         setError("");
      };

      const handleDeleteFile = (file) => {
         const updatedFiles = files.filter((f) => f.name !== file.name);
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
         setSelectedFile(null);
      };

      const handleImportFromCodeSnippets = () => {
         const importedFiles = [
            { name: "imported1.js", content: "console.log('Imported file 1');", type: ".js" },
            { name: "imported2.jsx", content: "const App = () => <div>Hello World</div>;", type: ".jsx" },
            { name: "imported3.txt", content: "This is a text file.", type: ".txt" },
         ];
         const updatedFiles = [...files, ...importedFiles];
         setFiles(updatedFiles);
         localStorage.setItem("files", JSON.stringify(updatedFiles));
      };

      const filteredFiles = files.filter((file) =>
         file.name.toLowerCase().includes(searchTerm.toLowerCase())
      );

      const getLanguage = (fileType) => {
         switch (fileType) {
            case ".js":
            return "javascript";
            case ".jsx":
            return "jsx";
            default:
            return "text";
         }
      };

      const getFileIcon = (fileType) => {
         switch (fileType) {
            case ".js":
            case ".jsx":
            return <FaFileCode style={{ color: "#F0DB4F" }} />;
            case ".txt":
            return <FaFileAlt style={{ color: "#2196F3" }} />;
            default:
            return <FaFileImport style={{ color: "#4CAF50" }} />;
         }
      };

      return (
         <Box sx={{ height: "100vh", display: "flex", flexDirection: "column" }}>
            <Typography variant="h4" gutterBottom>
            File Directory
            </Typography>
            <Grid container spacing={2} sx={{ flexGrow: 1 }}>
            <Grid item xs={12} md={4}>
               <StyledPaper>
                  <Box sx={{ mb: 2, display: "flex", gap: 1 }}>
                  <Button
                     variant="contained"
                     startIcon={<FaPlus />}
                     onClick={() => setModalOpen(true)}
                  >
                     New File
                  </Button>
                  <Button
                     variant="outlined"
                     startIcon={<FaFolder />}
                     onClick={handleImportFromCodeSnippets}
                  >
                     Import
                  </Button>
                  </Box>
                  <TextField
                  fullWidth
                  variant="outlined"
                  placeholder="Search files"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  InputProps={{
                     startAdornment: (
                        <InputAdornment position="start">
                        <FaSearch />
                        </InputAdornment>
                     ),
                  }}
                  sx={{ mb: 2 }}
                  />
                  <List>
                  {filteredFiles.map((file) => (
                     <ListItem
                        key={file.name}
                        button
                        selected={selectedFile && selectedFile.name === file.name}
                        onClick={() => setSelectedFile(file)}
                     >
                        <ListItemIcon>
                        {getFileIcon(file.type)}
                        </ListItemIcon>
                        <ListItemText primary={file.name} />
                        <IconButton
                        edge="end"
                        aria-label="delete"
                        onClick={() => handleDeleteFile(file)}
                        >
                        <FaTrash />
                        </IconButton>
                     </ListItem>
                  ))}
                  </List>
               </StyledPaper>
            </Grid>
            <Grid item xs={12} md={8}>
               <StyledPaper>
                  {selectedFile ? (
                  <>
                     <Typography variant="h6" gutterBottom>
                        {selectedFile.name}
                     </Typography>
                     <SyntaxHighlighter language={getLanguage(selectedFile.type)} style={docco}>
                        {selectedFile.content}
                     </SyntaxHighlighter>
                  </>
                  ) : (
                  <Typography variant="body1">Select a file to view its content</Typography>
                  )}
               </StyledPaper>
            </Grid>
            </Grid>

            <StyledModal open={modalOpen} onClose={() => setModalOpen(false)}>
            <ModalContent>
               <Typography variant="h6" gutterBottom>
                  Create New File
               </Typography>
               <TextField
                  fullWidth
                  label="File Name"
                  value={fileName}
                  onChange={(e) => setFileName(e.target.value)}
                  error={!!error}
                  helperText={error}
                  sx={{ mb: 2 }}
               />
               <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>File Type</InputLabel>
                  <Select
                  value={fileType}
                  onChange={(e) => setFileType(e.target.value)}
                  label="File Type"
                  >
                  <MenuItem value=".txt">.txt</MenuItem>
                  <MenuItem value=".js">.js</MenuItem>
                  <MenuItem value=".jsx">.jsx</MenuItem>
                  </Select>
               </FormControl>
               <TextField
                  fullWidth
                  label="File Content"
                  multiline
                  rows={4}
                  value={fileContent}
                  onChange={(e) => setFileContent(e.target.value)}
                  sx={{ mb: 2 }}
               />
               <Button variant="contained" onClick={handleCreateFile}>
                  Create File
               </Button>
            </ModalContent>
            </StyledModal>
         </Box>
      );
      };

      export default FileDirectory;
   ```
  ]
      ----------------------------------
      --- USER FORMATTED PROMPT ---
      | FORMATTED PROMPT: 
  --- SECTION ONE: MAIN INSTRUCTIONS AND CONTEXT ---

  CHAT HISTORY CONTEXT:
    USER PROMPT HISTORY:
      | ________________________________________ 
      | User Prompts: Generate a data table component for organizing a list of data related to UI componets
Generate a data table component for displaying a list of UI compoennt library data
Generate a data table component for organizing a list of  projct data
Generate a data table component for organzining projects
Generate a data table component for organizing a list of data for vector db table
    SUMMARY OF CHAT HISTORY:
      | ________________________________________ 
      | Main Summary: The messages consist of various seemingly random character strings posted by a single user in a single session. The content does not convey any meaningful information and appears as nonsensical text. |
      | Previous 5 User Inquiries Summarized: [Summary 1][id 671900717facfe6b62bde2451]: A message containing a random string of characters with no clear meaning.
[Summary 2][id 6718fc4e673133571cffa6531]: This message also includes a seemingly random sequence of characters.
[Summary 3][id 6718fb450b982f4ff0ec70601]: Another message with a nonsensical string of characters.
[Summary 4][id 6718f9c55200b9b85ddeceeb1]: A message that consists of an arbitrary sequence of characters, similar to previous ones.
[Summary 5][id 6718f9090ae1d00431b7bab01]: The message includes a random assortment of characters with no apparent meaning. 
      |
  CHAT DATA CONTEXT:
    RELEVANT DATA FROM CUSTOM DOCS:
      | ________________________________________ 
      | Custom UI Library DB: To generate a data table component for organizing a list of data related to UI components, you can use the following guidelines and example code from the provided sources:

### Key Components and Features

1. **Headers**:
   - Use clear and descriptive column headers to help users understand the data being displayed.

2. **Rows and Cells**:
   - Ensure each row and cell is well-defined and easy to read. Use proper formatting and ensure there is enough contrast between text and background colors for accessibility.

3. **Pagination**:
   - Implement pagination to handle large datasets effectively. This helps in splitting the data into manageable pages.

4. **Filtering and Sorting**:
   - Add filtering and sorting features to allow users to quickly find specific data. This can be achieved through dropdown menus or search bars.
To generate a data table component for organizing a list of data, particularly for UI libraries that have been upserted into a vector database for PDB (Protein Data Bank), you can use the following steps and components from various UI libraries:

### Using Frames X Design System

1. **Choose a Table Component**: Frames X offers a versatile Table component that can be customized to fit your needs.
2. **Customize Each Cell Independently**: Combine and stack Table Cell components to create tables where each cell can be customized independently.
3. **Structure Variants**: Use the two structure variants, row and column-based approaches, to organize your data efficiently.

### Using Material React Table
To generate a data table component for organizing a list of data that has been upserted into a vector database for projects, you can utilize various UI libraries that offer robust table components. Here are some options and their key features:

1. **Frames X Design System**:
   - **Features**: Provides over 20K components in 80+ different interface categories, including two structure variants for tables with row and column-based approaches. It offers customization options and can be used to create tables with customizable cells.

2. **React Data Table Component**:
   - **Features**: Includes built-in sorting, pagination, selectable rows, expandable rows, and customizable styling. It is responsive and themeable, making it suitable for dynamic data presentation.
To generate a data table component for organizing a list of data, you can use the following libraries and their respective documentation:

1. **Material React Table (MRT)**:
   - **Documentation**: Material React Table V3 provides a lightweight, customizable table component that can be used with Material UI. It includes features like built-in sorting, pagination, and customizable styling.
   - **Example Usage**:
     ```javascript
     import { useMemo } from 'react';
     import { MaterialReactTable, useMaterialReactTable, type MRT_ColumnDef } from 'material-react-table';

     const data: any[] = [
       { id: 1, name: 'John Doe', age: 30 },
       { id: 2, name: 'Jane Doe', age: 25 },
       { id: 3, name: 'Bob Smith', age: 40 },
     ];
To generate a data table component for code tools, you can use the following approaches:

1. **UiPath**: You can use UiPath to generate a data table from unstructured data. The process involves using the Screen Scraping Wizard to extract data and then using the Generate Data Table activity to create a table from the scraped data.

2. **Form.io**: Form.io provides a Data Grid component that allows you to add multiple rows of field groupings. This can be used to create a structured data table by defining key-value pairs and customizing the grid's behavior.

3. **Commercetools UIKit**: This library provides a DataTable component that can render tabular data. You need to define the `rows` and `columns` lists as arrays of objects, where each column object has a unique `key` and a `label` for the header.
    RELEVANT DATA FROM SEARCH DOCS:
      | ________________________________________ 
      | Relevant Perplexity Web Search Results: To generate a data table component for organizing a list of data related to frontend component designs, you can consider the following options:

1. **wpDataTables for WordPress**:
   - **Features**: Responsive tables, searchable, exportable, customizable columns, and charts.
   - **Customization**: Allows for organizing tables with folders, sticky headers, and customizable skins and fonts.
   - **Integration**: Supports integration with various page builders like Gutenberg, WP Editor, and Elementor.

2. **Svelte Data Tables**:
   - **Options**: Flowbite Svelte, Svelte Material UI, and Carbon Components offer basic data table solutions with features like striped rows, RTL support, and quick search.
   - **Advanced Options**: TanStack Table and Svelte Headless Table provide advanced features such as filtering, column and row pinning, grouping, and row expansion.
To generate a data table component for organizing a list of data that has been upserted into a vector database for AI agent creation, you can use the following options based on the provided documentation:

### 1. **React Data Table Component**
This library offers a responsive table with built-in features like sorting, pagination, selection, and expandable rows. It is customizable and supports accessibility. You can use it to create a table that integrates well with AI data processing systems.

- **Key Features**:
  - Declarative configuration
  - Built-in sorting, pagination, and selection
  - Expandable rows
  - Customizable styling and themeability
  - Responsive design.

### 2. **React Table**
This is a powerful table library for React that supports sorting, filtering, and pagination. It is highly customizable and extensible through its plugin system. It is suitable for complex data management tasks, including those involving AI data processing.
2. **Create the Table Component**:
   ```jsx
   import React from 'react';
   import { useTable } from 'react-table';

   const DataTable = ({ columns, data }) => {
     const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({
       columns,
       data,
     });
- **Key Features**:
  - Sorting and filtering
  - Pagination
  - Customizable column settings
  - Plugin system for extensibility.

### 3. **Retool Table Component**
Retool provides a flexible table component that supports sorting, filtering, and pagination. It allows dynamic column settings and is particularly useful for applications that require real-time data updates.

- **Key Features**:
  - Sorting and filtering
  - Dynamic column settings
  - Pagination
  - Ability to reload table data automatically.

### Implementation Example

Using **React Table** as an example, you can create a data table component as follows:

1. **Install React Table**:
   ```bash
   npm install react-table # OR yarn add react-table
   ```

2. **Create the Table Component**:
   ```jsx
   import React from 'react';
   import { useTable } from 'react-table';
3. **Bootstrap Datatable**:
   - **Features**: Extensive customization options, including custom pagination, styling, and search/filter functionalities.
   - **Responsiveness**: Automatically adjusts the table layout based on screen size.

### Example Implementation

#### Using wpDataTables

1. **Import Data**: Upload your data from Excel (.xls, .xlsx, .ods) or CSV into wpDataTables.
2. **Customize Table**: Adjust columns, rename them, reorder them, and apply custom CSS to fit your design.
3. **Publish Table**: Add the table to any post or page using Gutenberg, WP Editor, or a page builder like Elementor.

#### Using Svelte
      | Raw Perplexity Search Results Data: 
      | -- Results: To generate a data table component for organizing a list of data related to frontend component designs, you can consider the following options:

1. **wpDataTables for WordPress**:
   - **Features**: Responsive tables, searchable, exportable, customizable columns, and charts.
   - **Customization**: Allows for organizing tables with folders, sticky headers, and customizable skins and fonts.
   - **Integration**: Supports integration with various page builders like Gutenberg, WP Editor, and Elementor.

2. **Svelte Data Tables**:
   - **Options**: Flowbite Svelte, Svelte Material UI, and Carbon Components offer basic data table solutions with features like striped rows, RTL support, and quick search.
   - **Advanced Options**: TanStack Table and Svelte Headless Table provide advanced features such as filtering, column and row pinning, grouping, and row expansion.

3. **Bootstrap Datatable**:
   - **Features**: Extensive customization options, including custom pagination, styling, and search/filter functionalities.
   - **Responsiveness**: Automatically adjusts the table layout based on screen size.

### Example Implementation

#### Using wpDataTables

1. **Import Data**: Upload your data from Excel (.xls, .xlsx, .ods) or CSV into wpDataTables.
2. **Customize Table**: Adjust columns, rename them, reorder them, and apply custom CSS to fit your design.
3. **Publish Table**: Add the table to any post or page using Gutenberg, WP Editor, or a page builder like Elementor.

#### Using Svelte

1. **Choose a Library**: Select a suitable library such as Flowbite Svelte, Svelte Material UI, or Carbon Components.
2. **Set Up Table**: Use the chosen library to set up a basic data table with features like striped rows and quick search.
3. **Add Advanced Features**: If needed, integrate advanced features like filtering and column pinning using TanStack Table or Svelte Headless Table.

#### Using Bootstrap Datatable

1. **Include Datatables Plugin**: Add the Datatables plugin to your Bootstrap project.
2. **Initialize the Table**: Use JavaScript to initialize the table with custom pagination and styling options.
3. **Customize Responsiveness**: Ensure the table is responsive by wrapping it in a `table-responsive` div.

### Example Code Snippet

#### Using wpDataTables

```html
[wpdatatable id="your_table_id"]
```

#### Using Svelte

```svelte
<script>
  import { FlowbiteSvelteTable } from 'flowbite-svelte';

  const data = [
    { name: 'John Doe', age: 30 },
    { name: 'Jane Doe', age: 25 },
    // Add more data rows as needed
  ];

  const columns = [
    { name: 'Name', field: 'name' },
    { name: 'Age', field: 'age' },
  ];
</script>

<FlowbiteSvelteTable data={data} columns={columns} />
```

#### Using Bootstrap Datatable

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Responsive Datatable</title>
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
</head>
<body>
    <div class="table-responsive">
        <table id="example" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Age</th>
                </tr>
            </thead>
            <tbody>
                <!-- Add table rows here -->
                <tr>
                    <td>John Doe</td>
                    <td>30</td>
                </tr>
                <tr>
                    <td>Jane Doe</td>
                    <td>25</td>
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>

    <script>
        $(document).ready(function() {
            $('#example').DataTable({
                "pagingType": "full_numbers", // Custom pagination style
                "scrollY": "400px", // Vertical scrolling
                "scrollCollapse": true
            });
        });
    </script>
</body>
</html>
```

### Citations
1. https://wordpress.org/plugins/wpdatatables/
2. https://hackernoon.com/comparing
      | -- References: 
    ADDITIONAL DATA:
      | ________________________________________ 
      | Keywords: data table, organizing, list data, frontend component designs
      | UI Libraries: React
      | JS Libraries: React
      | Component Types: data table, Component
      | Documentation Content: 

  --- SECTION TWO: USER PROMPT/QUERY ---

  USER PROMPT/QUERY: Generate a data table component for organizing a list data related to frontend compoennt desgins
  EXTRACTED KEYWORDS: data table, organizing, list data, frontend component designs

  --- SECTION THREE: FINAL INSTRUCTIONS ---

  Based on the user's query, extracted information, and the provided context, please generate a response following the instructions given in the system and assistant messages. 
  Ensure that your answer is comprehensive, professional, and tailored to creating high-quality React styled components. 
  Please ensure your response includes:

  1. A brief explanation of the component's purpose and design rationale
  2. The full React component code, utilizing the latest React features and best practices
  3. Examples of how to use and customize the component

  --- SECTION FOUR: RESPONSE FORMATTING INSTRUCTIONS ---
  
--- BEGINNING OF RESPONSE FORMATTING INSTRUCTIONS ---

## FORMATTING GUIDE
Use this guide to format messages using Markdown syntax. Return final response as JSON:
{ "content": "Your Markdown formatted message", "type": "markdown", "references": ["Array of reference strings"] }

## MARKDOWN ELEMENTS GUIDE: 
Use the following guide to format messages using Markdown syntax. This includes headings, text formatting, lists, links, images, blockquotes, code blocks, and more. Ensure to apply the appropriate syntax for the desired formatting.

### Headings

# H1
## H2
### H3
#### H4
##### H5
###### H6

### Text Formatting

- **Bold**: **bold** or '__bold__'
- *Italic*: *italic* or '_italic_'
- ***Bold and Italic***: '***bold and italic***'
- ~~Strikethrough~~: '~~strikethrough~~'
- Inline Code: 'inline code'
- Blockquote: '> Blockquote'

### Lists

1. Numbered List
   1. Indented Item

- Bullet List
  - Indented Item

- [ ] Unchecked Task
- [x] Checked Task

### Links and Images

- [Hyperlink](https://example.com): '[link text](URL)'
- ![Image](https://via.placeholder.com/150): '![alt text](URL)'

### Blockquotes

> Blockquote
> > Nested Quote

### Code Blocks

```language 
const myVariable = 'Hello, World!';
console.log(myVariable);
```

### Horizontal Rule
---

### Escape Special Characters
Use a single backslash '\' before the character to escape it.
- Example (two are used for purposes of escaping it for this template): \# Not a Heading

### Tables

| Header 1 | Header 2 |
|----------|----------|
| Cell 1 | Cell 2 |

### Special Elements:
- Superscript: E = mc^2
- Subscript: H~2~O
- Table of Contents: [TOC]
- Footnotes: [^1] and [^1]:
- Definition Lists: Term : Definition
- Abbreviations: *[HTML]: Hyper Text Markup Language
- Highlight: ==highlighted text==
- Custom Containers: ::: warning *Here be dragons* :::
- Emoji: :emoji_name:

### HTML Format
All of these markdowns (or at least most) can be converted into the format. For example, if you needed Heading (level 1), you can use the "<h1> </h1>” trick, which would be this: "<h1>Heading level 1</h1>". This works for most Markdown parsers.

### Mermaid Diagram
You can use Mermaid to create diagrams. For example:
```mermaid
 diagram_type
 diagram_code
```
For instance, this is a Mermaid diagram:
```mermaid
graph TD;
    A-->B;
    A-->C;
    B-->D;
    C-->D;
    subgraph "My Subgraph"
        A-->B;
        C-->D;
```

### Citations
 Inline: [@AuthorYear]
 References section:
 [@AuthorYear]: Author, A. (Year). Title. Source. URL

### Escape Characters
You can escape special characters with a backslash \. For example, \* will result in a literal asterisk (*), not a bullet list.

## Additional Styling Instructions
- Ensure that any `mark` or highlighted text is styled with responsive width by applying flexbox styles or an equivalent method. This will allow the text to be responsive when resizing the window. For example, wrap the `mark` element within a `div` or `span` styled with `display: flex;` and `flex-wrap: wrap;` or similar responsive styles.

## Response Format
Return the final response as json:

{
  "content": "Your Markdown formatted message with citations",
  "type": "markdown",
  "references": ["Array of reference strings"]
}

## Example Response
Below is an example (sample uses escape characters for formatting, but ensure to use the appropriate Markdown syntax for your use case):

```json
{
"content": "# Custom Button Component

## Explanation
This component is a reusable button designed to follow Material UI styling conventions. It supports customization via props like 'color', 'size', and 'onClick' handler.

## Code
```jsx
import React from 'react';
import Button from '@mui/material/Button';

const CustomButton = ({ color = 'primary', size = 'medium', onClick }) => (
  <Button variant="contained" color={color} size={size} onClick={onClick}>
    Click Me
  </Button>
);

export default CustomButton;
```

## Usage Example
```jsx
// Usage in a parent component
import CustomButton from './CustomButton';

const ParentComponent = () => (
  <CustomButton color="secondary" size="large" onClick={() => alert('Button clicked!')} />
);

export default ParentComponent;
```

## References
[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/",
"type": "markdown",
"references": ["[@MaterialUI2023]: Material UI. (2023). Button API. Material UI Documentation. https://mui.com/components/buttons/"]
}
```
--- END OF RESPONSE FORMATTING INSTRUCTIONS ---


  --- END OF SECTIONS ---
  
      -----------------------------
    --------------------------------
  